### Eclipse Workspace Patch 1.0
#P org.dawb.passerelle.actors.tango
Index: fragment.xml
===================================================================
--- fragment.xml	(revision 1481)
+++ fragment.xml	(working copy)
@@ -59,5 +59,15 @@
       </actor>
       
    </extension>
+   <extension
+         point="org.eclipse.ui.cheatsheets.cheatSheetContent">
+      <cheatsheet
+            category="org.dawb.passerelle.actors.cheat.sheet.category"
+            composite="true"
+            contentFile="cheat/workflow-tango-menu.xml"
+            id="org.dawb.passerelle.actors.tango.cheatsheet1920943321"
+            name="Workflows for ESRF data acqusition">
+      </cheatsheet>
+   </extension>
 
 </fragment>
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 1481)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -6,3 +6,4 @@
 Bundle-Vendor: DLS Ltd.
 Fragment-Host: org.dawb.passerelle.actors;bundle-version="1.0.0"
 Bundle-RequiredExecutionEnvironment: JavaSE-1.6
+Export-Package: org.dawb.passerelle.actors.hardware
Index: cheat/workflow-tango-menu.xml
===================================================================
--- cheat/workflow-tango-menu.xml	(revision 0)
+++ cheat/workflow-tango-menu.xml	(revision 0)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<compositeCheatsheet name="Workflows for ESRF data acqusition">
+   <taskGroup kind="set" name="ESRF Data Acquisition Workflow Tutorials" skip="false">
+      <intro>
+         <b>Introduction</b>
+      </intro>
+      <onCompletion>
+         <b>Conclusion</b>
+      </onCompletion>
+      <task kind="cheatsheet" name="Data collection commands" skip="true">
+         <intro>
+            An introduction to substituting variables into a spec macro file and running the macro. Tango and spec are required to be present for this workflow to work with real hardware, however it can still be run in mock mode.
+         </intro>
+         <onCompletion>
+            <b>Conclusion</b>
+         </onCompletion>
+         <param name="path" value="workflow-command.xml">
+         </param>
+      </task>
+      <task kind="cheatsheet" name="Moving motors" skip="true">
+         <intro>
+            An introduction to moving hardware using actors in the workflow. This is only possible with Tango based hardware at the moment. However there is a mock mode for investigating the functionality without Tango.
+         </intro>
+         <onCompletion>
+            <b>Conclusion</b>
+         </onCompletion>
+         <param name="path" value="workflow-motors.xml">
+         </param>
+      </task>
+   </taskGroup>
+</compositeCheatsheet>

Property changes on: cheat/workflow-tango-menu.xml
___________________________________________________________________
Added: svn:mime-type
   + text/plain

Index: src/org/dawb/passerelle/actors/hardware/command/CommandParameter.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/command/CommandParameter.java	(revision 0)
+++ src/org/dawb/passerelle/actors/hardware/command/CommandParameter.java	(revision 0)
@@ -0,0 +1,79 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.hardware.command;
+
+import org.dawb.passerelle.common.parameter.CellEditorParameter;
+import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.viewers.CellEditor;
+import org.eclipse.jface.viewers.DialogCellEditor;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import ptolemy.kernel.util.IllegalActionException;
+import ptolemy.kernel.util.NameDuplicationException;
+import ptolemy.kernel.util.NamedObj;
+
+public class CommandParameter extends CellEditorParameter {
+	
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = 8999174318856900808L;
+	
+	private final static Logger logger = LoggerFactory.getLogger(CommandParameter.class);
+	
+	public CommandParameter(NamedObj container, String name) throws IllegalActionException, NameDuplicationException {
+		super(container, name);
+	}
+	
+	@Override
+	public CellEditor createCellEditor(Control control) {
+		
+		final DialogCellEditor editor = new DialogCellEditor((Composite)control) {
+			@Override
+			protected Object openDialogBox(Control cellEditorWindow) {
+								
+				final CommandDialog dialog = new CommandDialog(cellEditorWindow.getShell(), getContainer()); // extends BeanDialog
+				dialog.create();
+				dialog.getShell().setSize(450,600); // As needed
+				dialog.getShell().setText("Call Spec Commands");
+			
+				dialog.setBean(getBeanFromValue(CommandContainer.class));
+		        final int ok = dialog.open();
+		        if (ok == Dialog.OK) {
+		            return getValueFromBean((CommandContainer)dialog.getBean());
+		        }
+		        
+		        return null;
+			}
+		    protected void updateContents(Object value) {
+		        if ( getDefaultLabel() == null) {
+					return;
+				}
+		        getDefaultLabel().setText(getRendererText());
+		    }
+
+		};
+		
+		
+		return editor;
+	}
+	
+	/**
+	 * May need to cache here but JFace already does a better job of this than swing.
+	 */
+	@Override
+	public String getRendererText() {
+		return getBeanFromValue(CommandContainer.class).toString();
+	}	
+
+}
Index: src/org/dawb/passerelle/actors/hardware/command/CommandDialog.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/command/CommandDialog.java	(revision 0)
+++ src/org/dawb/passerelle/actors/hardware/command/CommandDialog.java	(revision 0)
@@ -0,0 +1,71 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.hardware.command;
+
+import org.dawb.common.ui.util.GridUtils;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Shell;
+
+import ptolemy.kernel.util.NamedObj;
+import uk.ac.gda.richbeans.components.selector.VerticalListEditor;
+import uk.ac.gda.richbeans.dialog.BeanDialog;
+
+public class CommandDialog extends BeanDialog {
+
+	private VerticalListEditor beans;
+	
+	
+	protected CommandDialog(Shell parentShell, NamedObj container) {
+		super(parentShell);
+	}
+	
+	public Control createDialogArea(Composite parent) {
+		
+		final Composite main = (Composite)super.createDialogArea(parent);
+		main.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
+		
+		final Label label = new Label(main, SWT.WRAP);
+		label.setText("Call individual commands and record their output here. Note that you can also substitute values directly into a spec macro using the 'Spec Macro' attribute, however that does not record response.");
+		label.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
+		
+		beans = new VerticalListEditor(main, SWT.NONE);
+		beans.setRequireSelectionPack(false);
+		beans.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
+		beans.setMinItems(0);
+		beans.setMaxItems(25);
+		beans.setDefaultName("command_result");
+		beans.setEditorClass(CommandBean.class);
+		
+		final CommandComposite beanComp =  new CommandComposite(beans, SWT.NONE);
+		beans.setEditorUI(beanComp);
+		beans.setNameField("variableName");
+		beans.setAdditionalFields(new String[]{"command"});
+		beans.setColumnWidths(new int[]{120, 300});
+		beans.setListHeight(150);
+		
+		GridUtils.setVisibleAndLayout(beans, true);
+		return main;
+	}
+
+	public VerticalListEditor getBeans() {
+		return beans;
+	}
+	
+	public int open() {
+		beans.setShowAdditionalFields(true);
+        int ret = super.open();
+        beans = null;
+        return ret;
+	}
+}
Index: src/org/dawb/passerelle/actors/hardware/command/CommandContainer.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/command/CommandContainer.java	(revision 0)
+++ src/org/dawb/passerelle/actors/hardware/command/CommandContainer.java	(revision 0)
@@ -0,0 +1,83 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.hardware.command;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class CommandContainer {
+
+	private List<CommandBean> beans;
+	
+	public CommandContainer() {
+		beans = new ArrayList<CommandBean>();
+	}
+	
+	public void clear() {
+		if (beans!=null) beans.clear();
+	}
+
+	public List<CommandBean> getBeans() {
+		return beans;
+	}
+
+	public void setBeans(List<CommandBean> expressions) {
+		this.beans = expressions;
+	}
+
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result
+				+ ((beans == null) ? 0 : beans.hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		CommandContainer other = (CommandContainer) obj;
+		if (beans == null) {
+			if (other.beans != null)
+				return false;
+		} else if (!beans.equals(other.beans))
+			return false;
+		return true;
+	}
+	
+	/**
+	 * Constructs user readable version of bean
+	 */
+	public String toString() {
+		if (beans==null||beans.isEmpty()) return "No commands created, click to edit...";
+		final StringBuilder buf = new StringBuilder();
+		for (CommandBean b : beans) {
+
+			buf.append("'");
+			buf.append(b.getCommand());
+			buf.append("'  ");
+		}
+		return buf.toString();
+	}
+
+	public int size() {
+		return beans.size();
+	}
+
+	public boolean isEmpty() {
+		return beans==null||size()<1;
+	}
+}
Index: src/org/dawb/passerelle/actors/hardware/command/CommandBean.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/command/CommandBean.java	(revision 0)
+++ src/org/dawb/passerelle/actors/hardware/command/CommandBean.java	(revision 0)
@@ -0,0 +1,89 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.hardware.command;
+
+public class CommandBean {
+
+	private String  variableName;
+	private String  command;
+	private String  attributeName;
+	private String  commandAttributeName;
+	
+	public String getVariableName() {
+		return variableName;
+	}
+	public void setVariableName(String variableName) {
+		this.variableName = variableName;
+	}
+	public String getCommand() {
+		return command;
+	}
+	public void setCommand(String command) {
+		this.command = command;
+	}
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result
+				+ ((attributeName == null) ? 0 : attributeName.hashCode());
+		result = prime * result + ((command == null) ? 0 : command.hashCode());
+		result = prime
+				* result
+				+ ((commandAttributeName == null) ? 0 : commandAttributeName
+						.hashCode());
+		result = prime * result
+				+ ((variableName == null) ? 0 : variableName.hashCode());
+		return result;
+	}
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		CommandBean other = (CommandBean) obj;
+		if (attributeName == null) {
+			if (other.attributeName != null)
+				return false;
+		} else if (!attributeName.equals(other.attributeName))
+			return false;
+		if (command == null) {
+			if (other.command != null)
+				return false;
+		} else if (!command.equals(other.command))
+			return false;
+		if (commandAttributeName == null) {
+			if (other.commandAttributeName != null)
+				return false;
+		} else if (!commandAttributeName.equals(other.commandAttributeName))
+			return false;
+		if (variableName == null) {
+			if (other.variableName != null)
+				return false;
+		} else if (!variableName.equals(other.variableName))
+			return false;
+		return true;
+	}
+	public String getAttributeName() {
+		return attributeName;
+	}
+	public void setAttributeName(String attributeName) {
+		this.attributeName = attributeName;
+	}
+	public String getCommandAttributeName() {
+		return commandAttributeName;
+	}
+	public void setCommandAttributeName(String commandAttributeName) {
+		this.commandAttributeName = commandAttributeName;
+	}
+}
Index: src/org/dawb/passerelle/actors/hardware/command/CommandComposite.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/command/CommandComposite.java	(revision 0)
+++ src/org/dawb/passerelle/actors/hardware/command/CommandComposite.java	(revision 0)
@@ -0,0 +1,111 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.hardware.command;
+
+import org.dawb.common.ui.util.GridUtils;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.ui.forms.events.ExpansionAdapter;
+import org.eclipse.ui.forms.events.ExpansionEvent;
+import org.eclipse.ui.forms.widgets.ExpandableComposite;
+
+import uk.ac.gda.richbeans.components.wrappers.TextWrapper;
+
+public class CommandComposite extends Composite {
+
+	private TextWrapper variableName, command;
+	private TextWrapper attributeName, commandAttributeName;
+
+	public CommandComposite(Composite parent, int style) {
+		
+		super(parent, style);
+		setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
+		
+		setLayout(new GridLayout(1, false));
+		
+		final Composite main = new Composite(this, SWT.NONE);
+		main.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
+		main.setLayout(new GridLayout(2, false));
+
+		final Label variableLabel = new Label(main, SWT.NONE);
+		variableLabel.setText("Variable Name");
+		variableLabel.setToolTipText("The variable that the command will be read into.");
+		
+		this.variableName = new TextWrapper(main, SWT.NONE);
+		variableName.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
+		variableName.setTextLimit(64);
+		variableName.setTextType(TextWrapper.TEXT_TYPE.EXPRESSION);
+		
+		final Label commandLabel = new Label(main, SWT.NONE);
+		commandLabel.setText("Command");
+		commandLabel.setToolTipText("The spec command to run.\nCommands of the form '<scan_command> <hardware_name> <<numerical args>...>' will have brackets and quotations inserted automatically. Variables can be inserted using '${variable_name}' notation.");
+		
+		this.command = new TextWrapper(main, SWT.NONE);
+		command.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
+		command.setTextLimit(250);
+		
+		final ExpandableComposite advancedComposite = new ExpandableComposite(this, SWT.NONE);
+		advancedComposite.setExpanded(false);
+		advancedComposite.setText("Advanced");
+		advancedComposite.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
+		
+		final Composite advanced = new Composite(this, SWT.NONE);
+		advanced.setLayout(new GridLayout(2, false));
+		advanced.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
+		
+		Label label = new Label(advanced, SWT.NONE);
+		label.setText("Event Attribute");
+		
+		this.attributeName = new TextWrapper(advanced, SWT.NONE);
+		attributeName.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
+		attributeName.setToolTipText("The attribute name or 'Position' if left blank.");
+		
+		label = new Label(advanced, SWT.NONE);
+		label.setText("Command Attribute");
+		
+		this.commandAttributeName = new TextWrapper(advanced, SWT.NONE);
+		commandAttributeName.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
+		commandAttributeName.setToolTipText("The command name or 'ExecuteCmd' if left blank.");
+		
+		GridUtils.setVisible(advanced, false);
+		ExpansionAdapter expansionListener = new ExpansionAdapter() {
+			@Override
+			public void expansionStateChanged(ExpansionEvent e) {
+				GridUtils.setVisible(advanced, !advanced.isVisible());
+				layout(new Control[]{advanced, advancedComposite});
+				getParent().layout();
+				getParent().getParent().layout();
+			}
+		};
+		advancedComposite.addExpansionListener(expansionListener);
+
+	}
+
+	public TextWrapper getVariableName() {
+		return variableName;
+	}
+
+	public TextWrapper getCommand() {
+		return command;
+	}
+
+	public TextWrapper getAttributeName() {
+		return attributeName;
+	}
+
+	public TextWrapper getCommandAttributeName() {
+		return commandAttributeName;
+	}
+
+}
Index: src/org/dawb/passerelle/actors/hardware/motor/MotorContainer.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/motor/MotorContainer.java	(revision 0)
+++ src/org/dawb/passerelle/actors/hardware/motor/MotorContainer.java	(revision 0)
@@ -0,0 +1,100 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.hardware.motor;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class MotorContainer {
+
+	private List<MotorBean> expressions;
+	
+	public MotorContainer() {
+		expressions = new ArrayList<MotorBean>();
+	}
+	
+	public void clear() {
+		if (expressions!=null) expressions.clear();
+	}
+
+	public List<MotorBean> getExpressions() {
+		return expressions;
+	}
+
+	public void setExpressions(List<MotorBean> expressions) {
+		this.expressions = expressions;
+	}
+
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result
+				+ ((expressions == null) ? 0 : expressions.hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		MotorContainer other = (MotorContainer) obj;
+		if (expressions == null) {
+			if (other.expressions != null)
+				return false;
+		} else if (!expressions.equals(other.expressions))
+			return false;
+		return true;
+	}
+
+
+	public MotorBean getBean(String name) {
+		if (name==null)        return null;
+		if (expressions==null) return null;
+		for (MotorBean b : expressions) {
+			if (name.equals(b.getMotorName())) return b;
+		}
+		return null;
+	}
+	
+	/**
+	 * Constructs user readable version of bean
+	 */
+	public String toString() {
+		if (expressions==null||expressions.isEmpty()) return "No motors set or read, click to edit...";
+		final StringBuilder buf = new StringBuilder();
+		for (MotorBean b : expressions) {
+			if (b.isReadOnly()) {
+				buf.append("read '");
+				buf.append(b.getMotorName());
+				buf.append("'");
+			} else {
+				buf.append("set '");
+				buf.append(b.getMotorName());
+				buf.append("' to ");
+				buf.append(b.getExpression());
+			}
+			buf.append(";  ");
+		}
+		return buf.toString();
+	}
+
+	public int size() {
+		return expressions.size();
+	}
+
+	public boolean isEmpty() {
+		return expressions==null||size()<1;
+	}
+}
Index: src/org/dawb/passerelle/actors/hardware/motor/MotorDialog.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/motor/MotorDialog.java	(revision 0)
+++ src/org/dawb/passerelle/actors/hardware/motor/MotorDialog.java	(revision 0)
@@ -0,0 +1,111 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.hardware.motor;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.dawb.common.ui.util.GridUtils;
+import org.dawb.passerelle.common.actors.AbstractDataMessageTransformer;
+import org.dawb.passerelle.common.message.IVariable;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Shell;
+
+import ptolemy.kernel.util.NamedObj;
+import uk.ac.gda.richbeans.components.selector.BeanSelectionEvent;
+import uk.ac.gda.richbeans.components.selector.BeanSelectionListener;
+import uk.ac.gda.richbeans.components.selector.VerticalListEditor;
+import uk.ac.gda.richbeans.dialog.BeanDialog;
+
+public class MotorDialog extends BeanDialog {
+
+	private VerticalListEditor expressions;
+	
+	/**
+	 * Used to check expressions entered.
+	 */
+	private AbstractDataMessageTransformer parent;
+	
+	protected MotorDialog(Shell parentShell, NamedObj container) {
+		super(parentShell);
+		this.parent = (AbstractDataMessageTransformer)container;
+	}
+	
+	public Control createDialogArea(Composite parent) {
+		
+		final Composite main = (Composite)super.createDialogArea(parent);
+		main.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
+		
+		final Label label = new Label(main, SWT.WRAP);
+		label.setText("Set and read motor values here. The expression is used to set value, the motor value is read into a variable of the same name as the motor. For instance if the motor path is 'motors/phi', the motor name is 'phi'. Motors written are always read afterwards and their value passed on.");
+		label.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
+		
+		expressions = new VerticalListEditor(main, SWT.NONE);
+		expressions.setRequireSelectionPack(false);
+		expressions.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
+		expressions.setMinItems(0);
+		expressions.setMaxItems(25);
+		expressions.setDefaultName("motor");
+		expressions.setEditorClass(MotorBean.class);
+		
+		final MotorComposite motorComp = createMotorComposite();
+		expressions.setEditorUI(motorComp);
+		expressions.setNameField("motorName");
+		expressions.setAdditionalFields(new String[]{"expression"});
+		expressions.setColumnWidths(new int[]{100, 300});
+		expressions.setListHeight(150);
+		expressions.addBeanSelectionListener(new BeanSelectionListener() {
+			@Override
+			public void selectionChanged(BeanSelectionEvent evt) {
+				motorComp.updateVisibility();
+			}
+		});
+		
+		GridUtils.setVisibleAndLayout(expressions, true);
+		return main;
+	}
+
+	private MotorComposite createMotorComposite() {
+		
+		final MotorComposite expressionComposite = new MotorComposite(expressions, SWT.NONE);
+		
+		final Map<String,Object> values = new HashMap<String,Object>(7);
+		final List<IVariable>    vars   = parent.getInputVariables();
+		for (IVariable var : vars) {
+			Object value = var.getExampleValue();
+			if (value instanceof String) {
+				try {
+					value = Double.parseDouble((String)value);
+				} catch (Exception igonred) {
+					// Nothing
+				}
+			}
+			values.put(var.getVariableName(), value);
+		}
+		expressionComposite.setExpressionVariables(values);
+		return expressionComposite;
+	}
+
+	public VerticalListEditor getExpressions() {
+		return expressions;
+	}
+	
+	public int open() {
+		expressions.setShowAdditionalFields(true);
+        int ret = super.open();
+        expressions = null;
+        return ret;
+	}
+}
Index: src/org/dawb/passerelle/actors/hardware/motor/MotorParameter.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/motor/MotorParameter.java	(revision 0)
+++ src/org/dawb/passerelle/actors/hardware/motor/MotorParameter.java	(revision 0)
@@ -0,0 +1,80 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.hardware.motor;
+
+import org.dawb.passerelle.common.parameter.CellEditorParameter;
+import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.viewers.CellEditor;
+import org.eclipse.jface.viewers.DialogCellEditor;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import ptolemy.kernel.util.IllegalActionException;
+import ptolemy.kernel.util.NameDuplicationException;
+import ptolemy.kernel.util.NamedObj;
+
+public class MotorParameter extends CellEditorParameter {
+	
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = 8999174318856900808L;
+	
+	private final static Logger logger = LoggerFactory.getLogger(MotorParameter.class);
+	
+	public MotorParameter(NamedObj container, String name) throws IllegalActionException, NameDuplicationException {
+		super(container, name);
+	}
+	
+	@Override
+	public CellEditor createCellEditor(Control control) {
+		
+		final DialogCellEditor editor = new DialogCellEditor((Composite)control) {
+			@Override
+			protected Object openDialogBox(Control cellEditorWindow) {
+								
+				final MotorDialog dialog = new MotorDialog(cellEditorWindow.getShell(), getContainer()); // extends BeanDialog
+				dialog.create();
+				dialog.getShell().setSize(450,600); // As needed
+				dialog.getShell().setText("Read and Write Motor Values");
+			
+				dialog.setBean(getBeanFromValue(MotorContainer.class));
+		        final int ok = dialog.open();
+		        if (ok == Dialog.OK) {
+		            return getValueFromBean((MotorContainer)dialog.getBean());
+		        }
+		        
+		        return null;
+			}
+		    protected void updateContents(Object value) {
+		        if ( getDefaultLabel() == null) {
+					return;
+				}
+		        getDefaultLabel().setText(getRendererText());
+		    }
+
+		};
+		
+		
+		return editor;
+	}
+	
+
+	/**
+	 * May need to cache here but JFace already does a better job of this than swing.
+	 */
+	@Override
+	public String getRendererText() {
+		return getBeanFromValue(MotorContainer.class).toString();
+	}	
+
+}
Index: src/org/dawb/passerelle/actors/hardware/motor/MotorComposite.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/motor/MotorComposite.java	(revision 0)
+++ src/org/dawb/passerelle/actors/hardware/motor/MotorComposite.java	(revision 0)
@@ -0,0 +1,138 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.hardware.motor;
+
+import java.util.Map;
+
+import org.eclipse.jface.fieldassist.ControlDecoration;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.ui.forms.events.ExpansionAdapter;
+import org.eclipse.ui.forms.events.ExpansionEvent;
+import org.eclipse.ui.forms.widgets.ExpandableComposite;
+
+import uk.ac.gda.common.rcp.util.GridUtils;
+import uk.ac.gda.richbeans.components.wrappers.BooleanWrapper;
+import uk.ac.gda.richbeans.components.wrappers.TextWrapper;
+import uk.ac.gda.richbeans.event.ValueAdapter;
+import uk.ac.gda.richbeans.event.ValueEvent;
+
+import com.swtdesigner.ResourceManager;
+
+public class MotorComposite extends Composite {
+
+	private TextWrapper motorName,expression,attributeName;
+	private BooleanWrapper readOnly;
+	private Label expressionLabel;
+	private ControlDecoration controlDecoration;
+
+	public MotorComposite(Composite parent, int style) {
+		
+		super(parent, style);
+		setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
+		
+		setLayout(new GridLayout(1, false));
+		
+		final Composite main = new Composite(this, SWT.NONE);
+		main.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
+		main.setLayout(new GridLayout(2, false));
+
+		final Label motorLabel = new Label(main, SWT.NONE);
+		motorLabel.setText("Motor Name");
+		
+		controlDecoration = new ControlDecoration(motorLabel, SWT.LEFT | SWT.TOP);
+		controlDecoration.setImage(ResourceManager.getPluginImage("org.dawb.passerelle.actors", "icons/hardware.gif"));
+		controlDecoration.setDescriptionText("The motor path after the beamline part of the path, for instance 'motors/phi'");
+		
+		this.motorName = new TextWrapper(main, SWT.NONE);
+		motorName.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
+		motorName.setTextLimit(64);
+		
+		final Label readOnlyLabel = new Label(main, SWT.NONE);
+		readOnlyLabel.setText("Read only");
+
+		readOnly = new BooleanWrapper(main, SWT.NO_FOCUS);
+		//readOnly.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
+		readOnly.addValueListener(new ValueAdapter() {
+			@Override
+			public void valueChangePerformed(ValueEvent e) {
+				updateVisibility();
+			}
+		});
+
+		this.expressionLabel = new Label(main, SWT.NONE);
+		expressionLabel.setText("Value");
+		
+		this.expression = new TextWrapper(main, SWT.NONE);
+		expression.setTextType(TextWrapper.TEXT_TYPE.EXPRESSION);
+		expression.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
+		
+
+		final ExpandableComposite advancedComposite = new ExpandableComposite(this, SWT.NONE);
+		advancedComposite.setExpanded(false);
+		advancedComposite.setText("Advanced");
+		advancedComposite.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
+		
+		final Composite advanced = new Composite(this, SWT.NONE);
+		advanced.setLayout(new GridLayout(2, false));
+		advanced.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
+		
+		final Label label = new Label(advanced, SWT.NONE);
+		label.setText("Attribute Name");
+		
+		this.attributeName = new TextWrapper(advanced, SWT.NONE);
+		attributeName.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
+		attributeName.setToolTipText("The attribute name or 'Position' if left blank.");
+		
+		GridUtils.setVisible(advanced, false);
+		ExpansionAdapter expansionListener = new ExpansionAdapter() {
+			@Override
+			public void expansionStateChanged(ExpansionEvent e) {
+				GridUtils.setVisible(advanced, !advanced.isVisible());
+				layout(new Control[]{advanced, advancedComposite});
+				getParent().layout();
+				getParent().getParent().layout();
+			}
+		};
+		advancedComposite.addExpansionListener(expansionListener);
+		
+	}
+
+	public TextWrapper getMotorName() {
+		return motorName;
+	}
+
+	public TextWrapper getExpression() {
+		return expression;
+	}
+	
+	public TextWrapper getAttributeName() {
+		return attributeName;
+	}
+	
+	public BooleanWrapper getReadOnly() {
+		return readOnly;
+	}
+
+	protected void setExpressionVariables(final Map<String, Object> vars) {
+		expression.setExpressionVariables(vars);
+	}
+
+	public void updateVisibility() {
+		GridUtils.setVisible(expressionLabel, !readOnly.getValue().booleanValue());
+		GridUtils.setVisible(expression,      !readOnly.getValue().booleanValue());
+		
+		layout(new Control[]{expressionLabel, expression});
+	}
+}
Index: src/org/dawb/passerelle/actors/hardware/motor/MotorBean.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/motor/MotorBean.java	(revision 0)
+++ src/org/dawb/passerelle/actors/hardware/motor/MotorBean.java	(revision 0)
@@ -0,0 +1,92 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.hardware.motor;
+
+public class MotorBean {
+
+	private String  motorName;
+	private String  expression;
+	private String  attributeName;
+	private boolean readOnly;
+	
+	public MotorBean() {}
+	public MotorBean(String name, String expr) {
+		setMotorName(name);
+		setExpression(expr);
+	}
+	public String getMotorName() {
+		return motorName;
+	}
+	public void setMotorName(String actorName) {
+		this.motorName = actorName;
+	}
+	public String getExpression() {
+		return expression;
+	}
+	public void setExpression(String expression) {
+		this.expression = expression;
+	}
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result
+				+ ((attributeName == null) ? 0 : attributeName.hashCode());
+		result = prime * result
+				+ ((expression == null) ? 0 : expression.hashCode());
+		result = prime * result
+				+ ((motorName == null) ? 0 : motorName.hashCode());
+		result = prime * result + (readOnly ? 1231 : 1237);
+		return result;
+	}
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		MotorBean other = (MotorBean) obj;
+		if (attributeName == null) {
+			if (other.attributeName != null)
+				return false;
+		} else if (!attributeName.equals(other.attributeName))
+			return false;
+		if (expression == null) {
+			if (other.expression != null)
+				return false;
+		} else if (!expression.equals(other.expression))
+			return false;
+		if (motorName == null) {
+			if (other.motorName != null)
+				return false;
+		} else if (!motorName.equals(other.motorName))
+			return false;
+		if (readOnly != other.readOnly)
+			return false;
+		return true;
+	}
+	public boolean isReadOnly() {
+		return readOnly;
+	}
+	public boolean getReadOnly() {
+		return readOnly;
+	}
+	public void setReadOnly(boolean isReadOnly) {
+		this.readOnly = isReadOnly;
+	}
+	public String getAttributeName() {
+		return attributeName;
+	}
+	public void setAttributeName(String attributeName) {
+		this.attributeName = attributeName;
+	}
+}
#P org.dawb.passerelle.actors
Index: cheat/workflow-command.xml
===================================================================
--- cheat/workflow-command.xml	(revision 1481)
+++ cheat/workflow-command.xml	(working copy)
@@ -1,79 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<cheatsheet title="Running Data Collection Commands">
-
-	<intro>
-		<description>
-		    In this tutorial we will look at running data collection commands and calling spec macros within workflows. This tutorial is designed for sites with spec and Tango available, such as the ESRF. Later versions of the software will have actors available for other beamline control systems.
-	    </description>
-	</intro>
-
-   <item
-         title="Workflow Perspective">
-      <description>
-         Please choose the workflow perspective if you do not already have it selected (nothing will happen if you do not).
-      </description>
-      <command
-            required="false"
-            serialization="org.eclipse.ui.perspectives.showPerspective(org.eclipse.ui.perspectives.showPerspective.perspectiveId=org.edna.workbench.application.perspective.WorkflowPerspective)"/>
-   </item>
-   <item
-         title="Open File">
-      <description>
-         We will start with the finished example file which runs a command. We will run this command in 'Mock' for now. This will mean that no real hardware is connected when the workflow is run.
-      </description>
-      <command
-            required="false"
-            serialization="org.eclipse.ui.navigate.openResource(filePath=workflows/examples/command_example.moml)"/>
-   </item>
-   
-   <item title="Run Workflow">
-      <description>
-         Right click on the 'Monitor' view part and choose 'Tango Preferences...'. Set the preferences to make the tango connection a mock one, the database properties will grey out. Then press 'Ok' on the dialog.
-         Use the green play button in the main toolbar to run the workflow. You will see the results of the actor 'Scan' command in the hdf5 file under the variable 'ascan_result' (go to the hdf5 tree and look in the Dictionary node, use the 'Value' view to see value).
-      </description>
-   </item>
-   
-   <item title="Command Actor">
-      <description>
-         Select the 'Scan' actor. Look at the 'Commands' attribute and open the editor for it by using the '...' button as we have seen before. You can add sequential commands and record their output returned here. Note that in the example here, the text '${interval}' is expanded when the command is run using the value of 'interval' coming from upstream actors. You can expand variables using ${'variable_name'} in text fields and type expressions directly into number fields.
-      </description>
-   </item>
-   
-   <item title="Editing Macros">
-   
-      <description>
-         We will now take a few simple steps for editing and substituting variables into a macro file. Then switch the 'Scan' actor to run a macro file rather than individual commands. Ensure that you are monitoring 'motors/phi' in the 'Monitor' view as we will use this to see the scan on phi.
-      </description>
-      <subitem
-            label="1. Look at the 'Spec Macro' attribute but do not set it. Now go back to the actor 'Scan' and right click on it. You will see the action 'Open Spec Macro' in the menu. Choose this option and a new window will open.">
-      </subitem>
-      <subitem
-            label="2. The part opened is used to insert variables to a macro file. Type into the text editor under the comment (starting with '#') the string 'ascan phi 0 10 10 1'. You could also paste multiple lines of more complex macros here.">
-      </subitem>
-      <subitem
-            label="3. Now highlight the second 10 in the command you just typed. Then double click on the variable 'interval' appearing in the column on the left.">
-      </subitem>
-      <subitem
-            label="4. You now see that the variable 'interval' is inserted into the macro. Go to the toolbar and click the button which completes an expand substitution example. You will see that the example value for 'interval' is substituted. This mode gives a preview of what the substituted file will look like when it is run with spec.">
-      </subitem>
-      <subitem
-            label="5. Save and close your macro.">
-      </subitem>
-      <subitem
-            label="6. Click the 'Commands' attribute in the 'Actor Attributes' view, this time the 'Attribute' column rather than the 'Value', and press the delete key. Now when you run the workflow, only the macro will be run.">
-      </subitem>
-      <subitem
-            label="7. Run the workflow as before. This time the same thing will happen however, the result is not recorded in the variable 'ascan_result'.">
-      </subitem>
-   </item>
-   
-   <item title="Macros - Check">
-      <description>
-         We have seen that macros in the workflow can run either as individual commands with recorded results or as a complete macro using upstream variables.
-      </description>
-    <onCompletion>
-      Congratulations, you are now a macro hacker! Why not experiment with different expand settings in mock mode or using real macros if you are familiar with your hardware setup.
-    </onCompletion>
-   </item>
-   	
-</cheatsheet>
Index: cheat/workflow-edna.xml
===================================================================
--- cheat/workflow-edna.xml	(revision 1481)
+++ cheat/workflow-edna.xml	(working copy)
@@ -1,117 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<cheatsheet title="Edna">
-
-	<intro>
-		<description>
-		    In this tutorial we will look at running edna actors. These are a special kind of python actor running the edna &apos;plugins&apos;. If you were unable to run python in the last example, this tutorial will not work. Edna often runs underlying analysis codes which is where the true power of the system lies but also requires that these codes be installed and available.
-	    </description>
-	</intro>
-	
-   <item
-         title="Open Edna Site">
-      <description>
-         Please take a look at edna-site now. Take the time to find out how to install and configure the underlying software which edna uses. If this workbench allows it, run the edna tests, otherwise run the tests using a python command.
-      </description>
-      <command
-            required="false"
-            serialization="org.eclipse.ui.browser.openBrowser(url=http://www.edna-site.org)"/>
- </item>
-   <item
-         title="Set EDNA_HOME and EDNA_SITE">
-      <description>
-         In order to use edna actors in DAWB workflows you must set two environment variables before starting DAWB. The &quot;EDNA_HOME&quot; variable should be a path to a valid EDNA installation directory and &quot;EDNA_SITE&quot; should be set in order for EDNA to find the corresponding configuration files. If you haven&apos;t defined these two variables now please stop DAWB, define the two variables and restart DAWB.
-      </description>
-   </item>  
-	
-
-   <item
-         title="Workflow Perspective">
-      <description>
-         Please choose the workflow perspective if you do not already have it selected (nothing will happen if you do not).
-      </description>
-      <command
-            required="false"
-            serialization="org.eclipse.ui.perspectives.showPerspective(org.eclipse.ui.perspectives.showPerspective.perspectiveId=org.edna.workbench.application.perspective.WorkflowPerspective)"/>
-   </item>
-   <item
-         title="Edna Thumbnail">
-      <description>
-         Open the edna thumbnail example below. Try running it and, it will automatically open the thumbnail image created. 
-      </description>
-      <command
-            required="false"
-            serialization="org.eclipse.ui.navigate.openResource(filePath=workflows/examples-edna/edna_thumbnail.moml)"/>
-   </item>
-   <item
-         title="Edna Image Indexing">
-      <description>
-         Open the edna image indexing example below. Try running it, it will automatically open the indexed image files. 
-      </description>
-      <command
-            required="false"
-            serialization="org.eclipse.ui.navigate.openResource(filePath=workflows/examples-edna/edna_image_indexing.moml)"/>
-   </item>
-   
-   <item
-         title="Edna Characterisation">
-      <description>
-         Open the edna characterisation example below. Try running it, it will automatically open the best log. 
-      </description>
-      <command
-            required="false"
-            serialization="org.eclipse.ui.navigate.openResource(filePath=workflows/examples-edna/edna_characterisation.moml)"/>
-   </item>
-  
-   <item
-         title="Getting to Grips with Edna Actors">
-      <description>
-         In the workbench there are many edna actors. However they all work the same way. They have the concept of an xml file as input and an xml as output. The input has a substitution done on it for inserting workbench values and the output has a extract called 'XPath' used which allows any part of the output file to be passed forwards as workflow variables.
-      </description>
-      <subitem
-            label="1. Go to the thumbnail example and click on the edna actor there called 'Thumbnail Image'. Go to the attributes of the actor. Notice that there is a template XML file, containing expanded value and there is a output file which contains the xpath extracts which will be done.">
-      </subitem>
-      <subitem
-            label="2. There is no need to change the path to these files, usually. Copying of actors when done, will share the same files.">
-      </subitem>
-      <subitem
-            label="3. Now right click on the 'Thumbnail Image' and open the edna python file. Here you can see the edna 'plugin' python code which is running for the actor.">
-      </subitem>
-      <subitem
-            label="4. Right click again on the actor and this time open the linker. This shows a multi-page editor containing a page for creating the input file and extracting from the output file.">
-      </subitem>
-      <subitem
-            label="5. On the input page you will see a substitution editor as we used for spec macros earlier. The upstream variables are on the left and can be inserted to the XML file by selecting the text and double clicking the variable to replace. These will be expanded when the actor is run in the workflow.">
-      </subitem>
-      <subitem
-            label="6. On the output page you will see xpath expressions written to extract information from the output file. In this case only the expression '/' is used which puts all of the XML into a variable called 'thumbnail_output'. To see example output files for helping with building your extract, open the python file again and click on 'Link with Editor' in the Project Explorer part. This will take you to the edna plugin area where example output XML files are located.">
-      </subitem>
-       <subitem
-            label="7. Click on 'thumbnail_output' and then on 'Value' view. This shows the value of the xpath extract as you type it in based on an extract from an example output file. Change the value from '/' to '//thumbnailPath' and press enter. The value which the xpath extracts from the example output file changes. You can add many extracts from the XML information and pass these on to be used downstream.">
-      </subitem>
-      
-   </item>
-  
-   <item
-         title="Something More Complex">
-      <description>
-         Lets take a look at 'edna_characterisation.moml'. This workflow has multiple edna actors with variables which are propagated down the graph from the beginning.
-      </description>
-      <subitem
-            label="1. Click on the connections from beginning to end to view the variables being passed down the workflow. Try and follow these down as best you can.">
-      </subitem>
-      <subitem
-            label="2. Notice that there is an attribute for passing variables on, it is by default selected. Try de-selecting it and viewing the change in variables passed along the workflow pipeline.">
-      </subitem>
-    </item>
-
-
-   <item title="Conclusion">
-      <description>
-         There are scores of edna plugins availble from EDNA. The usage of these in conjunction which Tango based data acquisition actors, will provide a single configurable interface to beamline control and data analysis.
-      </description>
-    <onCompletion>
-      Congratulations, you can now run edna actors and complete advanced data analysis.
-    </onCompletion>
-   </item>
-   
-</cheatsheet>
Index: cheat/workflow-motors.xml
===================================================================
--- cheat/workflow-motors.xml	(revision 1481)
+++ cheat/workflow-motors.xml	(working copy)
@@ -1,80 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<cheatsheet title="Moving Motors">
-
-	<intro>
-		<description>
-		    In this tutorial we will look at moving motor within workflows. This tutorial is designed for sites with Tango available such as the ESRF. However it can still be run in mock mode. Later versions of the software will have actors available for other beamline control systems.
-	    </description>
-	</intro>
-
-   <item
-         title="Workflow Perspective">
-      <description>
-         Please choose the workflow perspective if you do not already have it selected (nothing will happen if you do not).
-      </description>
-      <command
-            required="false"
-            serialization="org.eclipse.ui.perspectives.showPerspective(org.eclipse.ui.perspectives.showPerspective.perspectiveId=org.edna.workbench.application.perspective.WorkflowPerspective)"/>
-   </item>
-   <item
-         title="Open File">
-      <description>
-         We will start with the finished example file which moves a motor. We will run this command in 'Mock' for now. This will mean that no real hardware is connected when the workflow is run.
-      </description>
-      <command
-            required="false"
-            serialization="org.eclipse.ui.navigate.openResource(filePath=workflows/examples/motor_example.moml)"/>
-   </item>
-   
-   
-   <item title="New Actors">
-      <description>
-         In this section we look at the two new actors introduced. 
-      </description>
-      <subitem
-            label="1. There are two actors interacting with motors in this example, 'Read Values' and 'Write Values'. Click on Read Values and open the 'Motors' attribute using the '...' button.">
-      </subitem>
-      <subitem
-            label="2. Look at the motor with name 'motors/phi'. Notice that there is a check box to define if the motor should read value only or set value as well. A motor value is always read and the name of it, in this case 'phi' is the scalar value which enters the workflow.">
-      </subitem>
-     <subitem
-            label="3. Click on the 'Review' actor and view the Attributes. A review actor shows the scalar values (or optionally a sub-set of them) and allows the person running the workflow to change them or cancel the workflow. This is useful when interacting with hardware and data collection as well as configuring data analysis algorithms.">
-      </subitem>
-     <subitem
-            label="4. Click on the 'User Fields' attribute and open the editor using the '...' button. This dialog can be used to create fields that the user will interact with. This works by defining a scalar value and a data input type for editing it. There are fields like bounds and a label for the input too.">
-      </subitem>
-      <subitem
-            label="5. Click on the 'Write Values' actor and view the motors being written. Here the same motor is written with the expression 'phi'. In this case phi is the original value extracted and then edited with the 'Review' actor.">
-      </subitem>
-      
-   </item>
-   
-   <item title="Run Workflow">
-      <description>
-         In this section we will run the workflow in mock mode.
-       </description>
-      <subitem
-            label="1. Click on the 'Window' main application menu and choose 'Preferences'. There is a box on the top left for searching. Enter Tango and press enter. Select the 'Tango' preference and ensure that the system is in 'Mock' mode.">
-      </subitem>
-      <subitem
-            label="2. Ensure that the 'Monitor' part is visible and that it has 'phi' and 'kap1' being monitored. If not add them using the URI 'motors/phi' and 'motors/kap1'.">
-      </subitem>
-      <subitem
-            label="3. Right click on the monitor part and open the spec console. Set both 'phi' and 'kap1' to the value 1 using the 'mv' command ('mv phi 1' and 'mv kap1 1').">
-      </subitem>
-      <subitem
-            label="4. Use the green play button in the main toolbar to run the workflow. Enter new motor values in the dialog. Notice that the monitor values change and that the new motor values are in the hdf5 tree when the file opens.">
-      </subitem>
-      
-   </item>
-
-   <item title="Conclusion">
-      <description>
-         We have seen in this section that it is possible to connect to hardware directly from a workflow. This hardware can be any device exposed with a Tango attribute.
-      </description>
-    <onCompletion>
-      Congratulations, you can now read and write motor values and create user interface. Try creating a test workflow with different inputs talking to real hardware.
-    </onCompletion>
-   </item>
-   
-</cheatsheet>
Index: cheat/workflow-main-menu.xml
===================================================================
--- cheat/workflow-main-menu.xml	(revision 1481)
+++ cheat/workflow-main-menu.xml	(working copy)
@@ -87,36 +87,6 @@
          <param name="path" value="workflow-python.xml">
          </param>
       </task>
-      <task kind="cheatsheet" name="Edna" skip="true">
-         <intro>
-            An introduction to the workflow Edna connection. This tutorial is subject to being able to set up and run Edna on your site as well as python and the other Edna dependencies.
-         </intro>
-         <onCompletion>
-            <b>Conclusion</b>
-         </onCompletion>
-         <param name="path" value="workflow-edna.xml">
-         </param>
-      </task>
-      <task kind="cheatsheet" name="Data collection commands" skip="true">
-         <intro>
-            An introduction to substituting variables into a spec macro file and running the macro. Tango and spec are required to be present for this workflow to work with real hardware, however it can still be run in mock mode.
-         </intro>
-         <onCompletion>
-            <b>Conclusion</b>
-         </onCompletion>
-         <param name="path" value="workflow-command.xml">
-         </param>
-      </task>
-      <task kind="cheatsheet" name="Moving motors" skip="true">
-         <intro>
-            An introduction to moving hardware using actors in the workflow. This is only possible with Tango based hardware at the moment. However there is a mock mode for investigating the functionality without Tango.
-         </intro>
-         <onCompletion>
-            <b>Conclusion</b>
-         </onCompletion>
-         <param name="path" value="workflow-motors.xml">
-         </param>
-      </task>
       <task kind="cheatsheet" name="Batch" skip="true">
          <intro>
             A tutorial designed to familiarize you with the execution of workflows outside the user interface.
Index: src/org/dawb/passerelle/actors/edna/AbstractEdnaPlugin.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/AbstractEdnaPlugin.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/edna/AbstractEdnaPlugin.java	(working copy)
@@ -1,825 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.edna;
-
-import java.io.ByteArrayInputStream;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Date;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import org.dawb.common.python.EDJob;
-import org.dawb.common.python.PythonUtils;
-import org.dawb.common.python.rpc.PythonService;
-import org.dawb.common.util.SubstituteUtils;
-import org.dawb.common.util.io.Grep;
-import org.dawb.common.util.io.IFileUtils;
-import org.dawb.common.util.io.PropUtils;
-import org.dawb.common.util.xml.XMLUtils;
-import org.dawb.passerelle.common.actors.AbstractDataMessageTransformer;
-import org.dawb.passerelle.common.actors.AbstractPassModeTransformer;
-import org.dawb.passerelle.common.message.DataMessageComponent;
-import org.dawb.passerelle.common.message.DataMessageComponent.VALUE_TYPE;
-import org.dawb.passerelle.common.message.IVariable;
-import org.dawb.passerelle.common.message.IVariableProvider;
-import org.dawb.passerelle.common.message.MessageUtils;
-import org.dawb.passerelle.common.message.XPathVariable;
-import org.dawb.passerelle.editors.EdnaActorMultiPageEditor;
-import org.dawb.passerelle.editors.SubstitutionParticipant;
-import org.dawb.passerelle.editors.XPathParticipant;
-import org.eclipse.core.resources.IContainer;
-import org.eclipse.core.resources.IFile;
-import org.eclipse.core.resources.IFolder;
-import org.eclipse.core.resources.IProject;
-import org.eclipse.core.resources.IResource;
-import org.eclipse.core.resources.ResourcesPlugin;
-import org.eclipse.core.runtime.CoreException;
-import org.eclipse.core.runtime.NullProgressMonitor;
-import org.eclipse.core.runtime.Path;
-import org.eclipse.ui.PlatformUI;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import ptolemy.actor.Actor;
-import ptolemy.actor.ExecutionListener;
-import ptolemy.actor.Manager;
-import ptolemy.actor.util.Time;
-import ptolemy.data.BooleanToken;
-import ptolemy.data.expr.Parameter;
-import ptolemy.data.expr.StringParameter;
-import ptolemy.kernel.CompositeEntity;
-import ptolemy.kernel.util.Attribute;
-import ptolemy.kernel.util.IllegalActionException;
-import ptolemy.kernel.util.NameDuplicationException;
-import ptolemy.kernel.util.Settable;
-
-import com.isencia.passerelle.actor.InitializationException;
-import com.isencia.passerelle.actor.ProcessingException;
-import com.isencia.passerelle.util.ptolemy.ResourceParameter;
-import com.isencia.passerelle.workbench.model.actor.IResourceActor;
-import com.isencia.passerelle.workbench.model.actor.ResourceObject;
-import com.isencia.passerelle.workbench.model.utils.ModelUtils;
-
-public abstract class AbstractEdnaPlugin extends AbstractDataMessageTransformer implements Actor, IResourceActor, IVariableProvider, SubstitutionParticipant, XPathParticipant {
-	
-	private static String[] PYLINK_CHOICES      = new String[]{"RPC",    "Jep"};
-	private static String[] PYDEBUG_CHOICES     = new String[]{"Start new python rcp server",    "Python rpc server already running"};
-
-	private static Logger logger = LoggerFactory.getLogger(AbstractEdnaPlugin.class);
-	
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = 1551436102354087550L;
-	
-	
-	protected StringParameter pluginParam;
-	protected String          plugin;
-	
-	protected ResourceParameter inputParam;
-	protected String            inputString;
-
-	protected ResourceParameter outputParam;
-	protected String            output;
-	
-	private final Parameter             passInputsParameter;
-	private final Parameter             debugModeParameter;
-	private final Parameter             enableChangeWorkingDirParameter;
-	private boolean                     isPassInputs = true;
-	private boolean                     isDebugMode = false;
-	private boolean                     isEnabledChangeWorkingDir = false;
-	
-	private StringParameter             pythonCommand;
-	private StringParameter             pythonLink;
-	private StringParameter             pythonDebug;
-	
-
-	public AbstractEdnaPlugin(final String          pluginName,
-			                  final CompositeEntity container, 
-			                  final String          name) throws NameDuplicationException, IllegalActionException {
-		super(container, name);
-		
-		pluginParam = new StringParameter(this, "Plugin Name");
-		registerExpertParameter(pluginParam);
-		pluginParam.setExpression(pluginName);
-		this.plugin = pluginName;
-		
-		inputParam = new ResourceParameter(this, "Input Template", "XML File", "*.xml");
-		registerConfigurableParameter(inputParam);
-		
-		outputParam = new ResourceParameter(this, "Output Template", "XML File", "*.xml");
-		registerConfigurableParameter(outputParam);
-
-		passModeParameter.setExpression(EXPRESSION_MODE.get(1));
-		memoryManagementParam.setVisibility(Settable.NONE);
-		dataSetNaming.setVisibility(Settable.NONE);
-		
-		passInputsParameter = new Parameter(this,"Pass Inputs On",new BooleanToken(true));
-		registerConfigurableParameter(passInputsParameter);
-
-		debugModeParameter = new Parameter(this,"Debug mode",new BooleanToken(false));
-		registerConfigurableParameter(debugModeParameter);
-
-		enableChangeWorkingDirParameter = new Parameter(this,"Enable change to edna_working_dir",new BooleanToken(true));
-		registerConfigurableParameter(enableChangeWorkingDirParameter);
-		
-		pythonCommand = new StringParameter(this, "Python Interpreter Command");
-		registerConfigurableParameter(pythonCommand);
-		pythonCommand.setExpression(PythonUtils.getPythonInterpreterCommand());
-
-		// Expert param for changing between Jep and RPC
-		pythonLink = new StringParameter(this,"Python Link") {
-
-			public String[] getChoices() {
-				return PYLINK_CHOICES;
-			}
-		};
-		registerExpertParameter(pythonLink);
-		pythonLink.setExpression(PYLINK_CHOICES[0]);
-		
-		// Expert param for turning on debug python server
-		pythonDebug = new StringParameter(this,"Python Debug") {
-
-			public String[] getChoices() {
-				return PYDEBUG_CHOICES;
-			}
-		};
-		registerExpertParameter(pythonDebug);
-		pythonDebug.setExpression(PYDEBUG_CHOICES[0]);
-	}
-	
-	public void attributeChanged(Attribute attribute) throws IllegalActionException {
-		
-		if (attribute == pluginParam) {
-			plugin = pluginParam.getExpression();
-		} else if (attribute == inputParam) {
-			inputString = inputParam.getExpression();
-		} else if (attribute == passInputsParameter) {
-			final BooleanToken b = (BooleanToken) passInputsParameter.getToken();
-			isPassInputs = b.booleanValue();
-		} else if (attribute == debugModeParameter) {
-			final BooleanToken b = (BooleanToken) debugModeParameter.getToken();
-			isDebugMode = b.booleanValue();
-		} else if (attribute == enableChangeWorkingDirParameter) {
-			final BooleanToken b = (BooleanToken) enableChangeWorkingDirParameter.getToken();
-			isEnabledChangeWorkingDir = b.booleanValue();
-		} else if (attribute == outputParam) {
-			output = outputParam.getExpression();
-		}
-		
-	    super.attributeChanged(attribute);
-		
-	}
-	
-	protected static PythonService sharedService;
-	protected static String        managerName;
-	
-	public boolean doPreFire() throws ProcessingException {
-		
-        final boolean ret = super.doPreFire();
-		
-        if (PYLINK_CHOICES[0].equals(pythonLink.getExpression())) {
-        	
-        	// Create a new python interpreter if the name of the Manager has changed,
-        	// The name of the Manager must always be unique for this to work
-			final String manName = getManager().getName();
-			if (sharedService==null || !manName.equals(managerName)) {
-				
-				final boolean isRpcDebug = PYDEBUG_CHOICES[1].equals(pythonDebug.getExpression());
-				
-				try {
-	                if (isRpcDebug) { // The python server could be running in a pydev session!
-		                              // Very handy for debugging the python
-		            	sharedService = PythonService.openClient(PythonService.getDebugPort());
-		            } else {
-		            	// Normally start an interpreter and connect to it on a free port.
-		            	sharedService = PythonService.openConnection(pythonCommand.getExpression());
-		            } 
-	                
-	                getManager().addExecutionListener(new ExecutionListener() {
-
-						@Override
-						public void executionFinished(Manager manager) {
-							sharedService.stop();
-						}
-
-						@Override
-						public void managerStateChanged(Manager manager) { }
-	                	
-						@Override
-						public void executionError(Manager manager, Throwable throwable) {}
-
-	                });
-	                
-				} catch (Exception ne) {
-					throw new ProcessingException("Cannot start python connection!", this, ne);
-				}
-	
-	            managerName = manName;
-			}
-        }
-		
-		return ret;
-	}
-
-	/**
-	 * Should return the file path to the schema file for this plugin.
-	 * This is a relative path to the workspace folder.
-	 * 
-	 * For instance "edna/execPlugins/plugins/EDPluginExecThumbnail-v1.0/datamodel/XSDataExecThumbnail.xsd"
-	 * 
-	 * Use / and not \
-	 * 
-	 * @return
-	 */
-	protected abstract String getSchemaLocation();
-	
-	/**
-	 * Should return the file path to the schema file for this plugin.
-	 * This is a relative path to the workspace folder.
-	 * 
-	 * For instance "edna/execPlugins/plugins/EDPluginExecThumbnail-v1.0/datamodel/XSDataExecThumbnail.xsd"
-	 * 
-	 * Use / and not \
-	 * 
-	 * @return
-	 */
-	protected abstract String getPythonLocation();
-	
-	
-	/**
-	 * The original idea for this method was to use the schema to generate
-	 * some default input xml. Just as the action Generate ->Xml doe in eclipse
-	 * on a xsd file.
-	 * 
-	 * However the xml was not really good enough for the default input. It turns
-	 * out better for each actor to provide the default XML.
-	 */
-	public abstract String getDefaultInputXML();
-	
-	/**
-	 * Please provide an implementation to return an example output xml in the
-	 * edna folder for using as a practice value to run xpaths on.
-	 */
-	protected abstract String getExampleOutputLocation();
-	
-	/**
-	 * Returns key value pairs for the variables and their corresponding
-	 * xpath values or a string describing the parameter.
-	 * 
-	 * @param message
-	 * @throws ProcessingException
-	 */
-	public abstract Properties getDefaultOutputProperties();
-
-	@SuppressWarnings("unused")
-	@Override
-	protected DataMessageComponent getTransformedMessage(List<DataMessageComponent> cache) throws ProcessingException {
-		
-	
-		String  outputXML = null;
-		IFolder ednaWkDir = null;
-		try {
-			ednaWkDir = getEdnaWorkingDirFolder();
-			String lastDir = ednaWkDir.getLocation().lastSegment();
-			String absPathToWorkingDir = ednaWkDir.getLocation().toOSString();
-			if (isEnabledChangeWorkingDir) {
-				for (DataMessageComponent dataMessageComponent : cache) {
-					if (dataMessageComponent.getScalar()!=null) {
-						for (String name : dataMessageComponent.getScalar().keySet()) {						
-							if (name.equals("edna_working_dir")) {
-								absPathToWorkingDir = dataMessageComponent.getScalar().get(name)+"/"+lastDir;
-								boolean success = (new File(absPathToWorkingDir)).mkdirs();
-								if (!success) {
-									logger.warn("Cannot create EDNA working directory: "+absPathToWorkingDir);
-									absPathToWorkingDir = ednaWkDir.getLocation().toOSString();
-									logger.warn("Reverting back to workspace location: "+absPathToWorkingDir);
-								}
-							}
-						}
-					}
-				}
-			}
-			
-            final EDJob  job  = new EDJob(sharedService, plugin, absPathToWorkingDir);
-    		final String xml  = getDataInput(cache);
-            job.setDataInput(xml);
-            job.setDebugMode(isDebugMode);
-            job.execute();
-            
-            outputXML = job.getDataOutput();
-            
-            // We get the variables to pass on
-            final Map      stringProperties = PropUtils.loadProperties(getOutputFile().getContents());
-		    final Map<String,String> xPaths = XPathVariable.getXPaths(stringProperties);
-		    final Map<String,String> rename = XPathVariable.getRenames(stringProperties);
-		    final Map<String,String>     in = MessageUtils.getValues(cache, xPaths.keySet(), this);
-		    
-		    
-			if (xPaths==null) {
-				throw createDataMessageException("Cannot run edna task "+getName()+", the xpaths could not be found!", null);
-			}
-			if (in==null) {
-				throw createDataMessageException("Cannot run edna task "+getName()+", the xpath existing variables could not be extracted!", null);
-			}
-			if (outputXML==null || "".equals(outputXML)) {
-				throw createDataMessageException("Cannot run edna task "+getName()+", the output XML is null!", null);
-			}
-			
-			final DataMessageComponent despatch = new DataMessageComponent();
-			final Map<String,String>   outputs  = XMLUtils.getVariables(xPaths, outputXML, in);				
-			transformNames(outputs, rename);
-			transformOutputValues(outputs);
-			
-			despatch.setMeta(MessageUtils.getMeta(cache));
-			if (isPassInputs) {
-				final Map<String,String> upStreamScalar = MessageUtils.getScalar(cache);
-			    despatch.addScalar(upStreamScalar);
-			}
-			despatch.addScalar(outputs, true);
-			assignAdditiveProperties(despatch, xPaths);
-
-			return despatch;
-            
-		} catch (Throwable ne) {
-			logger.error("Output XML from "+getName()+" may be invalid. It is:\n"+outputXML);
-			throw createDataMessageException("Cannot run edna task "+plugin, ne);
-			
-		} finally {
-			try {
-	            if (ednaWkDir!=null) {
-	            	ednaWkDir.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
-	    			AbstractPassModeTransformer.refreshResource(ednaWkDir.getProject());
-	            }
-			} catch (Throwable ne) {
-				logger.error("Cannot refresh folder "+ednaWkDir);
-				throw createDataMessageException("Cannot run edna task "+plugin, ne);
-			}
-		}
-
-	}
-
-	/**
-	 * Project used to get edna resources. 
-	 * 
-	 * You may set a system property org.dawb.edna.project.name to
-	 * change the default project, or override this method.
-	 * 
-	 * @return
-	 */
-	
-	public String getEdnaProject() {
-		return System.getenv("EDNA_HOME");
-	}
-
-	
-	private void assignAdditiveProperties(final DataMessageComponent despatch, final Map outputs) {
-		
-		for (Object key : outputs.keySet()) {
-			if (outputs.get(key)==null || "".equals(outputs.get(key))) continue;
-			despatch.setValueType(key.toString(), VALUE_TYPE.OVERWRITE_STRING);
-		}
-	}
-
-	protected String getDataInput(List<DataMessageComponent> cache) throws Exception {
-		
-		final IFile              file = getInputFile();
-		final List<CharSequence> referencedVars = XMLUtils.getVariables(file);
-		final Map<String,String> variables = MessageUtils.getValues(cache, referencedVars, this);
-		return SubstituteUtils.substitute(file.getContents(), variables);
-	}
-
-	@Override
-	public int getResourceCount() {
-		return 2;
-	}
-	
-	@Override
-	public ResourceObject getResource(int num) {
-		
-		if (num==0) {
-			final ResourceObject ret = new ResourceObject();
-			ret.setResource(getLinkerFile());
-			ret.setResourceTypeName("Linker");
-			ret.setEditorId(EdnaActorMultiPageEditor.ID);
-			return ret;
-		} else {
-			final ResourceObject ret = new ResourceObject();
-			final File res = new File(getEdnaProject() + "/" + getPythonLocation());
-			ret.setResource(res);
-			ret.setResourceTypeName("'"+plugin+"'");
-			return ret;
-		}
-	}
-	
-	protected String getOutputTagName() throws Exception {
-		String tag = getInputTagName();
-		tag = tag.replace("Input", "Output");
-		tag = tag.replace("input", "output");
-		return tag;
-	}
-	
-	private String cachedTagName = null;
-	/**
-	 * Should return the name of the XSData input object
-	 * 
-	 * @return
-	 * @throws Exception 
-	 */
-	abstract protected String getInputTagName() throws Exception;
-	
-
-	private IResource momlFile;
-	
-	@Override
-	public void setMomlResource(IResource momlFile) {
-		this.momlFile = momlFile;
-	}
-
-	/**
-	 * Creates or reuses a properties file in the workspace
-	 * which carries the properties for the three (or so)
-	 * files needed to link an edna node.
-	 * 
-	 * Method can be called a lot, needs to be fast.
-	 * 
-	 * @return
-	 */
-	private IResource getLinkerFile() {
-		
-		if (!PlatformUI.isWorkbenchRunning() || momlFile==null) return null;
-		
-		IFolder edna = null;
-		try {
-			edna = getEdnaXmlFolder();
-			
-			final StringBuilder props = new StringBuilder();
-			props.append("org.dawb.edna.name = ");
-			props.append(getName());
-			props.append("\n");
-
-			props.append("org.dawb.edna.moml = ");
-			props.append(momlFile.getFullPath().toString());
-			props.append("\n");
-			
-			props.append("org.dawb.edna.input = ");
-			props.append(getInputFile().getFullPath().toString());
-			props.append("\n");
-
-			props.append("org.dawb.edna.output = ");
-			props.append(getOutputFile().getFullPath().toString());
-			props.append("\n");
-			
-			props.append("org.dawb.edna.schema = ");
-			props.append(getEdnaProject()+"/"+getSchemaLocation());
-			props.append("\n");
-		
-			final IFile linker = edna.getFile(getName()+".properties");
-			if (linker.exists()) linker.delete(true, new NullProgressMonitor());
-			final InputStream is = new ByteArrayInputStream(props.toString().getBytes("UTF-8"));
-			linker.create(is, true, new NullProgressMonitor());
-			linker.setHidden(true);
-			
-			return linker;
-			
-		} catch (Exception ne) {
-			logger.error("Cannot create input xml!", ne);
-		} 
-        return null;
-	}
-
-	/**
-	 * Creates one if its not there.
-	 * @return
-	 */
-	protected IFile getInputFile() {
-		try {
-		    return getFileForParameter(inputParam, getInputTagName(), "xml", getDefaultInputXML());
-		} catch (Exception ne) {
-			logger.error("Cannot create input xml!", ne);
-			return null;
-		}
-	}
-	
-	/**
-	 * Creates one if its not there.
-	 * @return
-	 */
-	protected IFile getOutputFile() {
-		try {
-	        final String out = PropUtils.getPropertiesAsString(getDefaultOutputProperties());
-		    return getFileForParameter(outputParam, getOutputTagName(), "properties", out);
-		} catch (Exception ne) {
-			logger.error("Cannot create input xml!", ne);
-			return null;
-		}
-	}
-
-	/**
-	 * Must return a real existing file which is used to 
-	 * create the input to the edna node.
-	 * 
-	 * @return
-	 */
-	private IFile getFileForParameter(final ResourceParameter param,
-							          final String            tag,
-							          final String            ext,
-			                          final String            defaultXml) throws Exception {
-
- 	    synchronized (param) {
-			
- 	    	String path = param.getExpression();
- 	    	path = ModelUtils.substitute(path, this);
- 	    	IFile file = null;
-			// We generate a template input file if one does not exist.
-			// This is only applicable in the UI.
-	        // In the workflow, this file must have been set.
- 	    	if (!path.equals("")) {
- 	    		file = (IFile) ResourcesPlugin.getWorkspace().getRoot().findMember(path);
- 	    		logger.debug("Linker getFileForParameter path="+path);
- 	    	}
-			final IFolder edna = getEdnaXmlFolder();
-	        if ( file == null) {
-	        	file = IFileUtils.getUniqueIFile(edna, tag, ext);
-	        	param.setExpression(file.getFullPath().toString());
-	        	logger.debug("Linker new input file: "+file.getFullPath().toString());
-	        } else {
-	        	param.setExpression(file.getFullPath().toString());
-	        	logger.debug("Linker existing input file: "+file.getFullPath().toString());
-	        }
-	        	
-	        
-	        if (!file.exists()) {
-		        // Only create a new file if we are not running through jmx!
-	        	if ( (System.getProperty("org.dawb.worbench.jmx.service") == null) || (!System.getProperty("org.dawb.worbench.jmx.service").equals("true")) ) {
-	        		logger.debug("Linker input file doesn't exist, we create one");
-	        		final InputStream is = new ByteArrayInputStream(defaultXml.getBytes("UTF-8"));
-	        		file.create(is, true, new NullProgressMonitor());
-	        		file.refreshLocal(IResource.DEPTH_ZERO, new NullProgressMonitor());
-	        	} else {
-	        		throw createDataMessageException("Cannot run edna task "+getName()+", the linker path(s) could not be found!", null);
-	        	}
-	        }
-			// Happens when model run in model runner
-			return file;
-	    }
-	}
-
-
-
-	private IFolder getEdnaXmlFolder() throws Exception {
-		
-		final IContainer cont = getProject();
-
-		// Sub directory for the input file.
-		final IFolder edna = cont.getFolder(new Path("edna-xml"));
-		if (!edna.exists()) {
-			try {
-				edna.create(true, true, new NullProgressMonitor());
-			} catch (Exception ne) {
-				logger.error("Did not create new folder "+edna.getName(), ne);
-			}
-		}
-		
-		return edna;
-	}
-	
-	private static final DateFormat DATE_FOLDER = new SimpleDateFormat("yyyyMMdd_HHmmss");
-	private static final Object     LOCK        = new Object();
-	
-	private IFolder getEdnaWorkingDirFolder() throws Exception {
-		
-		final IProject cont = getProject();
-		logger.debug("Containing project is "+cont);
-
-		// Sub directory for the input file.
-		final IFolder edna = cont.getFolder("edna-working-dir");
-		
-		// Best to use single lock blocks or lock entire methods.
-		synchronized (LOCK) {
-			if (!edna.exists()) {
-				edna.create(true, true, new NullProgressMonitor());
-			}
-
-			Time   time       = getDirector()!=null
-			                  ? getDirector().getModelTime()
-			                  : new Time(null, 0);
-			if (time.getLongValue()<=0)  {
-				time = new Time(getDirector(), System.currentTimeMillis());
-				if (getDirector()!=null) getDirector().setModelTime(time);
-			}
-			final String timeFolder = DATE_FOLDER.format(new Date(time.getLongValue()));
-			
-			final IFolder dir = edna.getFolder(timeFolder);
-			if (!dir.exists()) {
-				dir.create(true, true, new NullProgressMonitor());
-			}
-			
-			return dir;
-		}
-	}
-
-	public List<IVariable> getInputVariables() {
-		
-		final List<IVariable> inputs = new ArrayList<IVariable>(7);
-		final List<String>    names  = new ArrayList<String>(7);
-		
-		final List<IVariable> vars = super.getInputVariables();				
-		for (IVariable input : vars) {
-			if (!names.contains(input.getVariableName())) {
-				inputs.add(input);
-				names.add(input.getVariableName());
-			}
-		}
-
-		return inputs;
-	}
-
-	/**
-	 * returns only the outputs from this plugin, not upstream ones.
-	 * @return
-	 * @throws CoreException 
-	 * @throws IOException 
-	 */
-	public boolean isDefinitelyLocalOutput(final String name) throws IOException, CoreException {
-		final Properties outputs  = PropUtils.loadProperties(getOutputFile().getContents());
-		return outputs.containsKey(name);
-	}
-	/**
-	 * Can be used to manipulate the output variable values after they
-	 * have been evaluated. Bu default does nothing.
-	 * 
-	 * @param outputs
-	 */
-	protected void transformOutputValues(Map<String, String> outputs) {
-		// TODO Auto-generated method stub
-		
-	}
-	
-	protected void transformNames(Map<String, String> outputs,
-			                      Map<String, String> renames) {
-		
-		if (renames==null||renames.isEmpty()) return;
-		for (String name : renames.keySet()) {
-			final String rename = renames.get(name);
-			final String value  = transformName(outputs.get(name), rename);
-	        outputs.put(name, value);
-		}
-	}
-	
-	private static final Pattern FIRST_TAG = Pattern.compile("\\<([a-zA-Z0-9_]+)( |\\>).*", Pattern.DOTALL);
-	
-	private String transformName(String value, final String rename) {
-		
-		if (rename==null||value==null) return value;
-		if ("".equals(rename)||"".equals(value)) return value;
-
-		final Matcher matcher = FIRST_TAG.matcher(value.trim());
-		if (!matcher.matches()) return value;
-        final String  tag     = matcher.group(1);
-        
-        value = value.replace("<"+tag+">",  "<"+rename+">");
-        value = value.replace("<"+tag+"/>", "<"+rename+"/>");
-        value = value.replace("<"+tag+" ",  "<"+rename+" ");
-        value = value.replace("</"+tag+">", "</"+rename+">");
-        
-        return value;
-	}
-
-	/**
-	 * Can be used to manipulate the output variable values after they
-	 * have been evaluated. Bu default does nothing.
-	 * 
-	 * @param outputs
-	 */
-	protected void transformExampleValue(IVariable var) {
-		
-		if (var instanceof XPathVariable) {
-			final XPathVariable xp = (XPathVariable)var;
-			if (getExampleOutputLocation()!=null) {
-				xp.setExampleValue(getExampleValueFromFile(getExampleOutputLocation(), xp.getxPath(), xp.getRename()));
-			}
-		}
- 		
-	}
-
-	/**
-	 * Uses the data to get a subWedge example
-	 * @return
-	 */
-	protected String getExampleValueFromFile(final String filePath, final String xPath, final String rename) {
-
-		//final IFile file = (IFile)getEdnaProject().findMember(filePath);
-		final File file = new File(getEdnaProject() + "/" + filePath);
-	    try {
-			String value = XMLUtils.getXPathValue(file, xPath);
-			value        = transformName(value, rename);
-			return value;
-	    } catch (Exception ne) {
-	    	logger.error("Cannot parse "+file, ne);
-	    	return null;
-	    }
-	}
-	
-	public String getExampleValue(final String xPath, final String rename) {
-		return getExampleValueFromFile(getExampleOutputLocation(), xPath, rename); 
-	}
-
-	@Override
-	protected String getOperationName() {
-		return plugin;
-	}
-
-	/**
-	 * Use to reset editor 
-	 */
-	public String getDefaultSubstitution() {
-		return getDefaultInputXML();
-	}
-	
-	public boolean isUpstreamVariable(final String name) {
-		
-		try {
-			final Properties xpathsInFile =  PropUtils.loadProperties(getOutputFile().getContents());
-			if (xpathsInFile.containsKey(name)) return false; // We overwrite it here.
-		} catch (Exception e) {
-			logger.error("Cannot read properties file!", e);
-		}
-		return super.isUpstreamVariable(name);
-	}	
-	
-	
-	/**
-	 * This method reads the output file and returns the 
-	 * variable names defined in the output file.
-	 * 
-	 * You can override this method to return the variables from
-	 * both upstream nodes and xpath variables.
-	 * 
-	 * The file is a properties file.
-	 */
-	public List<IVariable> getOutputVariables() {
-
-		final List<IVariable> xpaths = getXPathVariables();
-		final List<IVariable> ret;
-		if (isPassInputs) {
-			ret =  getInputVariables();
-		} else {
-			ret = new ArrayList<IVariable>(xpaths.size());
-		}
-		ret.addAll(xpaths);
-
-		return ret;
-	}
-
-	/**
-	 * XPaths local to this object
-	 */
-	public List<IVariable> getXPathVariables() {
-		
-		try {
-			final IFile      outputProps = getOutputFile();
-			final Properties outputs     = PropUtils.loadProperties(outputProps.getContents());
-			final List<IVariable> ret    = new ArrayList<IVariable>(outputs.size());;
-
-			for (Object varName : outputs.keySet()) {
-				final String variableName = (String)varName;
-				final String saveString   = outputs.getProperty(variableName);
-				if (saveString!=null&&!"".equals(saveString)) {
-
-					final IVariable iVariable = new XPathVariable(variableName, saveString);
-					transformExampleValue(iVariable);
-					ret.add(iVariable);
-				} 
-			}
-			return ret;
-		} catch (Exception ne) {
-			logger.error("Cannot read output properties "+getOutputFile(), ne);
-		}
-		return Collections.emptyList();
-	}
-
-	public List<IVariable> getUpstreamVariables() {
-		if (isPassInputs) {
-			return  getInputVariables();
-		} else {
-			return Collections.emptyList();
-		}
-	}
-}
Index: src/org/dawb/passerelle/actors/edna/ControlIntegrationv10.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ControlIntegrationv10.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/edna/ControlIntegrationv10.java	(working copy)
@@ -1,101 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.edna;
-
-import java.util.Properties;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import ptolemy.kernel.CompositeEntity;
-import ptolemy.kernel.util.IllegalActionException;
-import ptolemy.kernel.util.NameDuplicationException;
-
-/**
- * EdnaPluginTransformer, copied from delay action.
- * 
- * @author svensson
- * @date Feb 15, 2011
- * @project org.edna.passerelle.actors
- **/
-public class ControlIntegrationv10 extends AbstractEdnaPlugin {
-
-	private final static Logger logger = LoggerFactory.getLogger(ControlIntegrationv10.class);
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = -8749832798743297984L;
-
-	public ControlIntegrationv10(CompositeEntity container,
-			String name) throws NameDuplicationException,
-			IllegalActionException {
-		super("EDPluginControlIntegrationv10", container, name);
-
-	}
-
-	@Override
-	protected String getInputTagName() {
-		return "XSDataInputIntegration";
-	}
-
-	@Override
-	protected String getSchemaLocation() {
-		return "/mxv1/datamodel/XSDataMXv1.xsd";
-	}
-
-	@Override
-	protected String getPythonLocation() {
-		return "mxv1/plugins/EDPluginControlIntegration-v1.0/plugins/EDPluginControlIntegrationv10.py";
-	}
-
-	@Override
-	protected String getExampleOutputLocation() {
-		return "mxv1/plugins/EDPluginControlIntegration-v1.0/tests/data/XSDataIntegrationResult_reference.xml";
-	}
-
-	@Override
-	public String getExtendedInfo() {
-		return "MXv1 Integration";
-	}
-
-	@Override
-	public String getDefaultInputXML() {
-
-		final StringBuilder buf = new StringBuilder();
-
-		buf.append("<?xml version=\"1.0\" ?>\n");
-		buf.append("<XSDataIntegrationInput>\n");
-		buf.append("    <dataCollection>\n");
-		buf.append("      ${sub_wedges}\n");
-		buf.append("    </dataCollection>\n");
-		buf.append("    <selectedIndexingSolution>\n");
-		buf.append("      ${selectedSolution_content}\n");
-		buf.append("    </selectedIndexingSolution>\n");
-		buf.append("    <experimentalConditionRefined>\n");
-		buf.append("      ${experimentalConditionRefined_content}\n");
-		buf.append("    </experimentalConditionRefined>\n");
-		buf.append("</XSDataIntegrationInput>\n");
-
-		return buf.toString();
-	}
-
-	@Override
-	public Properties getDefaultOutputProperties() {
-		final Properties props = new Properties();
-		props.put("file_dir", "");
-		props.put("file_path", "");
-		props.put("bestfilePar_content", "//bestfilePar/*");
-		props.put("bestfileDat_content", "//bestfileDat/*");
-		props.put("bestfileHKL_content", "//bestfileHKL/*");
-		props.put("experimental_ConditionRefined_content", "//experimentalConditionRefined/*");
-		return props;
-	}
-
-}
Index: src/org/dawb/passerelle/actors/edna/ControlStrategyv1_2.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ControlStrategyv1_2.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/edna/ControlStrategyv1_2.java	(working copy)
@@ -1,111 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.edna;
-
-import java.util.Properties;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import ptolemy.kernel.CompositeEntity;
-import ptolemy.kernel.util.IllegalActionException;
-import ptolemy.kernel.util.NameDuplicationException;
-
-/**
- * EdnaPluginTransformer, copied from delay action.
- * 
- * @author svensson
- * @date Feb 15, 2011
- * @project org.edna.passerelle.actors
- **/
-public class ControlStrategyv1_2 extends AbstractEdnaPlugin {
-
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = 7823020490489403315L;
-
-	private final static Logger logger = LoggerFactory.getLogger(ControlStrategyv1_2.class);
-
-	/**
-	 * 
-	 */
-
-	public ControlStrategyv1_2(CompositeEntity container, String name)
-			throws NameDuplicationException, IllegalActionException {
-		super("EDPluginControlStrategyv1_2", container, name);
-
-	}
-	
-	@Override
-	protected String getInputTagName() {
-		return "XSDataInputStrategy";
-	}
-
-
-	@Override
-	protected String getSchemaLocation() {
-		return "/mxv1/datamodel/XSDataMXv1.xsd";
-	}
-
-	@Override
-	protected String getPythonLocation() {
-		return "mxv1/plugins/EDPluginControlStrategy-v1.2/plugins/EDPluginControlStrategyv1_2.py";
-	}
-
-	@Override
-	protected String getExampleOutputLocation() {
-		return "mxv1/plugins/EDPluginControlStrategy-v1.2/tests/data/XSDataInputStrategy_reference.xml";
-	}
-
-	@Override
-	public String getExtendedInfo() {
-		return "MXv1 Strategy Calculation";
-	}
-
-	@Override
-	public String getDefaultInputXML() {
-
-		final StringBuilder buf = new StringBuilder();
-
-		buf.append("<?xml version=\"1.0\" ?>\n");
-		buf.append("<XSDataInputStrategy>\n");
-		buf.append("  <bestFileContentPar>\n");		
-		buf.append("    ${bestfilePar_content}\n");
-		buf.append("  </bestFileContentPar>\n");		
-		buf.append("  <bestFileContentDat>\n");		
-		buf.append("    ${bestfileDat_content}\n");
-		buf.append("  </bestFileContentDat>\n");		
-		buf.append("  <bestFileContentHKL>\n");		
-		buf.append("    ${bestfileHKL_content}\n");
-		buf.append("  </bestFileContentHKL>\n");		
-		buf.append("  <experimentalCondition>\n");		
-		buf.append("    ${experimentalConditionRefined_content}\n");
-		buf.append("  </experimentalCondition>\n");		
-		buf.append("  <diffractionPlan>\n");		
-		buf.append("    <maxExposureTimePerDataCollection>\n");		
-		buf.append("      <value>600</value>\n");		
-		buf.append("    </maxExposureTimePerDataCollection>\n");		
-		buf.append("  </diffractionPlan>\n");		
-		buf.append("  <crystalRefined>\n");		
-		buf.append("    ${crystal_content}\n");		
-		buf.append("  </crystalRefined>\n");		
-		buf.append("</XSDataInputStrategy>\n");
-		return buf.toString();
-	}
-
-	@Override
-	public Properties getDefaultOutputProperties() {
-		final Properties props = new Properties();
-		props.put("log_path", "//bestLogFile/path/value/text()");
-		return props;
-	}
-
-}
Index: src/org/dawb/passerelle/actors/edna/PeakSearchv1_0.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/PeakSearchv1_0.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/edna/PeakSearchv1_0.java	(working copy)
@@ -1,91 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.edna;
-
-import java.util.Properties;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import ptolemy.kernel.CompositeEntity;
-import ptolemy.kernel.util.IllegalActionException;
-import ptolemy.kernel.util.NameDuplicationException;
-
-/**
- * ControlCharForReorientationv2_0
- * 
- * @author svensson
- * @date April 6, 2011
- * @project org.edna.passerelle.actors
- **/
-public class PeakSearchv1_0 extends AbstractEdnaPlugin {
-
-
-	private static final long serialVersionUID = -2229884393788676874L;
-
-	private final static Logger logger = LoggerFactory.getLogger(PeakSearchv1_0.class);
-
-	public PeakSearchv1_0(CompositeEntity container, String name)
-			throws NameDuplicationException, IllegalActionException {
-		super("EDPluginExecPeakSearchv1_0", container, name);
-
-	}
-	
-	@Override
-	protected String getInputTagName() {
-		return "XSDataInputPeakSearch";
-	}
-
-	@Override
-	protected String getSchemaLocation() {
-		return "sandbox/id11/EDPluginExecPeakSearch-v1.0/datamodel/XSDataPeakSearchv1_0.xsd";
-	}
-
-	@Override
-	protected String getPythonLocation() {
-		return "sandbox/id11/EDPluginExecPeakSearch-v1.0/plugins/EDPluginExecPeakSearchv1_0.py";
-	}
-
-	@Override
-	protected String getExampleOutputLocation() {
-		return "sandbox/id11/EDPluginExecPeakSearch-v1.0/tests/data/XSDataResultPeakSearch_reference.xml";
-	}
-
-	@Override
-	public String getExtendedInfo() {
-		return "Fable Peak Search";
-	}
-
-	@Override
-	public String getDefaultInputXML() {
-
-		final StringBuilder buf = new StringBuilder();
-
-		buf.append("<?xml version=\"1.0\" ?>\n");
-		buf.append("<XSDataInputPeakSearch>\n");
-		buf.append("  <stem><value>${file_dir}/ref-testscale_1_</value></stem>\n");
-		buf.append("  <indexMin><value>1</value></indexMin>\n");
-		buf.append("  <indexMax><value>1</value></indexMax>\n");
-		buf.append("  <threshold><value>5</value></threshold>\n");
-		buf.append("  <numberOfDigits><value>3</value></numberOfDigits>\n");
-		buf.append("  <imageFormat><value>.img</value></imageFormat>\n");
-		buf.append("</XSDataInputPeakSearch>\n");
-		return buf.toString();
-	}
-
-	@Override
-	public Properties getDefaultOutputProperties() {
-		final Properties props = new Properties();
-		props.put("peakFile2D", "//peakFile2D/path/value/text()");
-		props.put("peakFile3D", "//peakFile3D/path/value/text()");
-		return props;
-	}
-
-}
Index: src/org/dawb/passerelle/actors/edna/ControlCharAtNewOrientationv2_0.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ControlCharAtNewOrientationv2_0.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/edna/ControlCharAtNewOrientationv2_0.java	(working copy)
@@ -1,86 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.edna;
-
-import java.util.Properties;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import ptolemy.kernel.CompositeEntity;
-import ptolemy.kernel.util.IllegalActionException;
-import ptolemy.kernel.util.NameDuplicationException;
-
-/**
- * ControlCharForReorientationv2_0
- * 
- * @author svensson
- * @date March 25, 2011
- * @project org.edna.passerelle.actors
- **/
-public class ControlCharAtNewOrientationv2_0 extends AbstractEdnaPlugin {
-
-	private static final long serialVersionUID = -2653031224929933394L;
-
-	private final static Logger logger = LoggerFactory.getLogger(ControlCharAtNewOrientationv2_0.class);
-
-	public ControlCharAtNewOrientationv2_0(CompositeEntity container, String name)
-			throws NameDuplicationException, IllegalActionException {
-		super("EDPluginControlCharAtNewOrientationv2_0", container, name);
-
-	}
-	
-	@Override
-	protected String getInputTagName() {
-		return "XSDataInputCharacterisationv2_0";
-	}
-
-	@Override
-	protected String getSchemaLocation() {
-		return "mxv2/datamodel/XSDataMXv2.xsd";
-	}
-
-	@Override
-	protected String getPythonLocation() {
-		return "mxv2/plugins/EDPluginControlCharAtNewOrientation-v2.0/plugins/EDPluginControlCharAtNewOrientationv2_0.py";
-	}
-
-	@Override
-	protected String getExampleOutputLocation() {
-		return "mxv2/plugins/EDPluginControlCharAtNewOrientation-v2.0/tests/data/ControlCharForReorientationv2_0_dataOutput_betterResolution.xml";
-	}
-
-	@Override
-	public String getExtendedInfo() {
-		return "MXv2 Char At New Orientation";
-	}
-
-	@Override
-	public String getDefaultInputXML() {
-
-		final StringBuilder buf = new StringBuilder();
-
-		buf.append("<?xml version=\"1.0\" ?>\n");
-		buf.append("<XSDataInputCharacterisationv2_0>\n");
-		buf.append("  ${mxv1InputCharacterisation}\n");
-		buf.append("  ${mxv2DataCollection}\n");
-		buf.append("</XSDataInputCharacterisationv2_0>\n");
-		return buf.toString();
-	}
-
-	@Override
-	public Properties getDefaultOutputProperties() {
-		final Properties props = new Properties();
-		props.put("suggestedStrategy", "//suggestedStrategy");
-		props.put("possibleOrientations", "//possibleOrientations");
-		return props;
-	}
-
-}
Index: src/org/dawb/passerelle/actors/edna/ISPyBStoreDataCollectionv1_3.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ISPyBStoreDataCollectionv1_3.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/edna/ISPyBStoreDataCollectionv1_3.java	(working copy)
@@ -1,89 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.edna;
-
-import java.util.Properties;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import ptolemy.kernel.CompositeEntity;
-import ptolemy.kernel.util.IllegalActionException;
-import ptolemy.kernel.util.NameDuplicationException;
-
-/**
- * ISPyBStoreDataCollectionv1_3
- * 
- * @author svensson
- * @date October 6, 2011
- * @project org.dawb.passerelle.actors
- **/
-public class ISPyBStoreDataCollectionv1_3 extends AbstractEdnaPlugin {
-
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = -2056933313200018801L;
-	/**
-	 * 
-	 */
-	
-
-	public ISPyBStoreDataCollectionv1_3(CompositeEntity container, String name)
-			throws NameDuplicationException, IllegalActionException {
-		super("EDPluginISPyBStoreDataCollectionv1_3", container, name);
-
-	}
-	
-	@Override
-	protected String getInputTagName() {
-		return "XSDataInputStoreDataCollection";
-	}
-
-	@Override
-	protected String getSchemaLocation() {
-		return "mxPluginExec/plugins/EDPluginGroupISPyB-v1.3/datamodel/XSDataISPyBv1_3.edml";
-	}
-
-	@Override
-	protected String getPythonLocation() {
-		return "mxPluginExec/plugins/EDPluginGroupISPyB-v1.3/plugins/EDPluginISPyBStoreDataCollectionv1_3.py";
-	}
-
-	@Override
-	protected String getExampleOutputLocation() {
-		return "XSDataResultStoreDataCollection_reference.xml";
-	}
-
-	@Override
-	public String getExtendedInfo() {
-		return "ISPyB Store Data Collection";
-	}
-
-	@Override
-	public String getDefaultInputXML() {
-
-		final StringBuilder buf = new StringBuilder();
-
-		buf.append("<?xml version=\"1.0\" ?>\n");
-		buf.append("<XSDataInputStoreDataCollection>\n");
-		buf.append("${ispybDataCollection}\n");
-		buf.append("</XSDataInputStoreDataCollection>\n");
-		return buf.toString();
-	}
-
-	@Override
-	public Properties getDefaultOutputProperties() {
-		final Properties props = new Properties();
-		props.put("dataCollectionId", "//dataCollectionId/value/text()");
-	return props;
-	}
-
-}
Index: src/org/dawb/passerelle/actors/edna/ControlCharForReorientationv2_0.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ControlCharForReorientationv2_0.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/edna/ControlCharForReorientationv2_0.java	(working copy)
@@ -1,222 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.edna;
-
-import java.util.Properties;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import ptolemy.kernel.CompositeEntity;
-import ptolemy.kernel.util.IllegalActionException;
-import ptolemy.kernel.util.NameDuplicationException;
-
-/**
- * ControlCharForReorientationv2_0
- * 
- * @author svensson
- * @date March 23, 2011
- * @project org.edna.passerelle.actors
- **/
-public class ControlCharForReorientationv2_0 extends AbstractEdnaPlugin {
-
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = -6909806600920182932L;
-	/**
-	 * 
-	 */
-	private final static Logger logger = LoggerFactory.getLogger(ControlCharForReorientationv2_0.class);
-
-	/**
-	 * 
-	 */
-
-	public ControlCharForReorientationv2_0(CompositeEntity container, String name)
-			throws NameDuplicationException, IllegalActionException {
-		super("EDPluginControlCharForReorientationv2_0", container, name);
-
-	}
-	
-	@Override
-	protected String getInputTagName() {
-		return "XSDataInputCharacterisationv2_0";
-	}
-
-	@Override
-	protected String getSchemaLocation() {
-		return "mxv2/datamodel/XSDataMXv2.xsd";
-	}
-
-	@Override
-	protected String getPythonLocation() {
-		return "mxv2/plugins/EDPluginControlCharForReorientation-v2.0/plugins/EDPluginControlCharForReorientationv2_0.py";
-	}
-
-	@Override
-	protected String getExampleOutputLocation() {
-		return "mxv2/plugins/EDPluginControlCharForReorientation-v2.0/tests/data/XSDataResultCharacterisationv2_0_reference.xml";
-	}
-
-	@Override
-	public String getExtendedInfo() {
-		return "MXv2 Char For Reorientation";
-	}
-
-	@Override
-	public String getDefaultInputXML() {
-
-		final StringBuilder buf = new StringBuilder();
-
-		buf.append("<?xml version=\"1.0\" ?>\n");
-		buf.append("<XSDataInputCharacterisationv2_0>\n");
-		buf.append("  <mxv1InputCharacterisation>\n");
-		buf.append("    <dataCollection>\n");
-		buf.append("      <diffractionPlan>\n");
-		buf.append("        <kappaStrategyOption>\n");
-		buf.append("      	  <value>Cell</value>\n");
-		buf.append("        </kappaStrategyOption>\n");
-		buf.append("        <maxExposureTimePerDataCollection>\n");
-		buf.append("          <value>1000.000000</value>\n");
-		buf.append("        </maxExposureTimePerDataCollection>\n");
-		buf.append("        <complexity>\n");
-		buf.append("      	  <value>full</value>\n");
-		buf.append("        </complexity>\n");
-		buf.append("      </diffractionPlan>\n");
-		buf.append("      ${sub_wedges}\n");
-		buf.append("    </dataCollection>\n");
-		buf.append("  </mxv1InputCharacterisation>\n");
-		buf.append("  <mxv2DataCollection>\n");
-		buf.append("     <XSSubWedge>\n");
-		buf.append("        <imagefilenametemplate>\n");
-		buf.append("            <value>ref-testscale_1_###.img</value>\n");
-		buf.append("        </imagefilenametemplate>\n");
-		buf.append("        <XSBeamSetting>\n");
-		buf.append("            <wavelength>\n");
-		buf.append("                <value>1.000000e+00</value>\n");
-		buf.append("            </wavelength>\n");
-		buf.append("            <XSBeam>\n");
-		buf.append("                <polarisatation>\n");
-		buf.append("                    <v1>0.000000e+00</v1>\n");
-		buf.append("                    <v2>1.000000e+00</v2>\n");
-		buf.append("                    <v3>0.000000e+00</v3>\n");
-		buf.append("				</polarisatation>\n");
-		buf.append("                <direction>\n");
-		buf.append("                    <v1>1.000000e+00</v1>\n");
-		buf.append("                    <v2>0.000000e+00</v2>\n");
-		buf.append("                    <v3>0.000000e+00</v3>\n");
-		buf.append("				</direction>\n");
-		buf.append("            </XSBeam>\n");
-		buf.append("        </XSBeamSetting>\n");
-		buf.append("        <XSDiffractionImages>\n");
-		buf.append("            <filename>\n");
-		buf.append("                <value>/home/sudol/work/ednanew/ref-testscale_1_002.img</value>\n");
-		buf.append("            </filename>\n");
-		buf.append("        </XSDiffractionImages>\n");
-		buf.append("        <XSRotationalGoniostatSetting>\n");
-		buf.append("            <baseaxissetting>\n");
-		buf.append("                <value>0.000000e+00</value>\n");
-		buf.append("			</baseaxissetting>\n");
-		buf.append("            <axissetting>\n");
-		buf.append("                <value>9.000000e+01</value>\n");
-		buf.append("			</axissetting>\n");
-		buf.append("            <axissetting>\n");
-		buf.append("                <value>4.000000e+01</value>\n");
-		buf.append("			</axissetting>\n");
-		buf.append("            <XSRotationalGoniostat>\n");
-		buf.append("                <XSGoniostatBaseAxis>\n");
-		buf.append("                    <isscannable>\n");
-		buf.append("                        <value>1</value>\n");
-		buf.append("                    </isscannable>\n");
-		buf.append("                    <name>\n");
-		buf.append("                        <value>Omega</value>\n");
-		buf.append("                    </name>\n");
-		buf.append("                    <XSCalibratedDisplacementAxis>\n");
-		buf.append("                        <zerodirection>\n");
-		buf.append("                            <v1>0.000000e+00</v1>\n");
-		buf.append("                            <v2>0.000000e+00</v2>\n");
-		buf.append("                            <v3>1.000000e+00</v3>\n");
-		buf.append("						</zerodirection>\n");
-		buf.append("                        <XSCalibration>\n");
-		buf.append("                            <date>\n");
-		buf.append("	                           <value>2009-12-10</value>\n");
-		buf.append("                            </date>\n");
-		buf.append("                        </XSCalibration>\n");
-		buf.append("                    </XSCalibratedDisplacementAxis>\n");
-		buf.append("				</XSGoniostatBaseAxis>\n");
-		buf.append("                <XSGoniostatRotatableAxis>\n");
-		buf.append("                    <isscannable>\n");
-		buf.append("                        <value>0</value>\n");
-		buf.append("                    </isscannable>\n");
-		buf.append("                    <name>\n");
-		buf.append("                        <value>Kappa</value>\n");
-		buf.append("                    </name>\n");
-		buf.append("                    <XSCalibratedDisplacementAxis>\n");
-		buf.append("                        <zerodirection>\n");
-		buf.append("                            <v1>0.000000e+00</v1>\n");
-		buf.append("                            <v2>7.071068e-01</v2>\n");
-		buf.append("                            <v3>7.071068e-01</v3>\n");
-		buf.append("						</zerodirection>\n");
-		buf.append("                        <XSCalibration>\n");
-		buf.append("                            <date>\n");
-		buf.append("	                           <value>2009-12-10</value>\n");
-		buf.append("                            </date>\n");
-		buf.append("                        </XSCalibration>\n");
-		buf.append("                    </XSCalibratedDisplacementAxis>\n");
-		buf.append("				</XSGoniostatRotatableAxis>\n");
-		buf.append("                <XSGoniostatRotatableAxis>\n");
-		buf.append("                    <isscannable>\n");
-		buf.append("                        <value>0</value>\n");
-		buf.append("                    </isscannable>\n");
-		buf.append("                    <name>\n");
-		buf.append("                        <value>Phi</value>\n");
-		buf.append("                    </name>\n");
-		buf.append("                    <XSCalibratedDisplacementAxis>\n");
-		buf.append("                        <zerodirection>\n");
-		buf.append("                            <v1>0.000000e+00</v1>\n");
-		buf.append("                            <v2>0.000000e+00</v2>\n");
-		buf.append("                            <v3>1.000000e+00</v3>\n");
-		buf.append("						</zerodirection>\n");
-		buf.append("                        <XSCalibration>\n");
-		buf.append("                            <date>\n");
-		buf.append("	                           <value>2009-12-10</value>\n");
-		buf.append("                            </date>\n");
-		buf.append("                        </XSCalibration>\n");
-		buf.append("                    </XSCalibratedDisplacementAxis>\n");
-		buf.append("				</XSGoniostatRotatableAxis>\n");
-		buf.append("            </XSRotationalGoniostat>\n");
-		buf.append("        </XSRotationalGoniostatSetting>\n");
-		buf.append("        <XSRotationExposure>\n");
-		buf.append("           <imagewidth>\n");
-		buf.append("               <value>1.000000e+00</value>\n");
-		buf.append("			</imagewidth>\n");
-		buf.append("           <numberimages>\n");
-		buf.append("                <value>1</value>\n");
-		buf.append("            </numberimages>\n");
-		buf.append("            <exposuretime>\n");
-		buf.append("                <value>1.000000e+00</value>\n");
-		buf.append("            </exposuretime>\n");
-		buf.append("        </XSRotationExposure>\n");
-		buf.append("    </XSSubWedge>\n");
-		buf.append("  </mxv2DataCollection>\n");
-		buf.append("</XSDataInputCharacterisationv2_0>\n");
-		return buf.toString();
-	}
-
-	@Override
-	public Properties getDefaultOutputProperties() {
-		final Properties props = new Properties();
-		props.put("suggestedStrategy", "//suggestedStrategy");
-		props.put("possibleOrientations", "//possibleOrientations");
-		return props;
-	}
-
-}
Index: src/org/dawb/passerelle/actors/edna/ImageIndexingPlugin.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ImageIndexingPlugin.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/edna/ImageIndexingPlugin.java	(working copy)
@@ -1,89 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.edna;
-
-
-import java.util.Properties;
-
-import ptolemy.kernel.CompositeEntity;
-import ptolemy.kernel.util.IllegalActionException;
-import ptolemy.kernel.util.NameDuplicationException;
-
-/**
- *   EdnaPluginTransformer, copied from delay action.
- *
- *   @author gerring
- *   @date Aug 24, 2010
- *   @project org.edna.passerelle.actors
- **/
-public class ImageIndexingPlugin extends AbstractEdnaPlugin {
-	
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = -8681186522590444596L;
-
-	public ImageIndexingPlugin(CompositeEntity container, String name) throws NameDuplicationException, IllegalActionException {
-		super("EDPluginControlIndexingv10", container, name);
-
-	}
-	
-	@Override
-	protected String getInputTagName() {
-		return "XSDataInputIndexing";
-	}
-
-	
-	protected String getSchemaLocation() {
-		return "/mxv1/datamodel/XSDataMXv1.xsd";
-	}
-	
-	@Override
-	protected String getPythonLocation() {
-		return "/mxv1/plugins/EDPluginControlIndexing-v1.0/plugins/EDPluginControlIndexingv10.py";
-	}
-
-	@Override
-	protected String getExampleOutputLocation() {
-		return "/mxv1/plugins/EDPluginControlIndexing-v1.0/tests/data/XSDataIndexingResult_reference.xml";
-	}
-
-	@Override
-	public String getExtendedInfo() {
-		return "Image indexing";
-	}
-
-	@Override
-	public String getDefaultInputXML() {
-		
-		final StringBuilder buf = new StringBuilder();
-		
-		buf.append("<?xml version=\"1.0\" ?>\n");
-		buf.append("<XSDataIndexingInput>\n");
-		buf.append("    <dataCollection>\n");
-		buf.append("      ${sub_wedges}\n");
-		buf.append("    </dataCollection>\n");
-		buf.append("    ${experimental_condition}\n");
-		buf.append("</XSDataIndexingInput>\n");
-		
-		return buf.toString();
-	}
-
-	@Override
-	public Properties getDefaultOutputProperties() {
-		final Properties props = new Properties();
-		props.put("file_dir",  "");
-		props.put("file_path", "");
-		props.put("image_paths", "//predictionResult/predictionImage/path/value/text()");
-		return props;
-	}
-
-
-}
Index: src/org/dawb/passerelle/actors/edna/ControlIndexingv10.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ControlIndexingv10.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/edna/ControlIndexingv10.java	(working copy)
@@ -1,92 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.edna;
-
-
-import java.util.Properties;
-
-import ptolemy.kernel.CompositeEntity;
-import ptolemy.kernel.util.IllegalActionException;
-import ptolemy.kernel.util.NameDuplicationException;
-
-/**
- *   EdnaPluginTransformer, copied from delay action.
- *
- *   @author svensson
- *   @date Feb 15, 2011
- *   @project org.edna.passerelle.actors
- **/
-public class ControlIndexingv10 extends AbstractEdnaPlugin {
-	
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = -8681186522590444596L;
-
-	public ControlIndexingv10(CompositeEntity container, String name) throws NameDuplicationException, IllegalActionException {
-		super("EDPluginControlIndexingv10", container, name);
-
-	}
-	
-	@Override
-	protected String getInputTagName() {
-		return "XSDataInputIndexing";
-	}
-	
-	
-	protected String getSchemaLocation() {
-		return "/mxv1/datamodel/XSDataMXv1.xsd";
-	}
-	
-	@Override
-	protected String getPythonLocation() {
-		return "/mxv1/plugins/EDPluginControlIndexing-v1.0/plugins/EDPluginControlIndexingv10.py";
-	}
-
-	@Override
-	protected String getExampleOutputLocation() {
-		return "/mxv1/plugins/EDPluginControlIndexing-v1.0/tests/data/XSDataIndexingResult_reference.xml";
-	}
-
-	@Override
-	public String getExtendedInfo() {
-		return "MXv1 Indexing";
-	}
-
-	@Override
-	public String getDefaultInputXML() {
-		
-		final StringBuilder buf = new StringBuilder();
-		
-		buf.append("<?xml version=\"1.0\" ?>\n");
-		buf.append("<XSDataIndexingInput>\n");
-		buf.append("    <dataCollection>\n");
-		buf.append("      ${sub_wedges}\n");
-		buf.append("    </dataCollection>\n");
-		buf.append("    ${experimental_condition}\n");
-		buf.append("</XSDataIndexingInput>\n");
-		
-		return buf.toString();
-	}
-
-	@Override
-	public Properties getDefaultOutputProperties() {
-		final Properties props = new Properties();
-		props.put("file_dir",  "");
-		props.put("file_path", "");
-		props.put("crystal_content", "//selectedSolution/crystal/*");
-		props.put("image_paths", "//predictionResult/predictionImage/path/value/text()");
-		props.put("selectedSolution_content", "//selectedSolution/*");
-		props.put("experimentalConditionRefined_content", "//experimentalConditionRefined/*");
-		return props;
-	}
-
-
-}
Index: src/org/dawb/passerelle/actors/edna/ReadImageHeaderPlugin.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ReadImageHeaderPlugin.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/edna/ReadImageHeaderPlugin.java	(working copy)
@@ -1,91 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.edna;
-
-
-import java.util.Properties;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import ptolemy.kernel.CompositeEntity;
-import ptolemy.kernel.util.IllegalActionException;
-import ptolemy.kernel.util.NameDuplicationException;
-
-/**
- *   EdnaPluginTransformer, copied from delay action.
- *
- *   @author gerring
- *   @date Aug 24, 2010
- *   @project org.edna.passerelle.actors
- **/
-public class ReadImageHeaderPlugin extends AbstractEdnaPlugin {
-
-	private final static Logger logger = LoggerFactory.getLogger(ReadImageHeaderPlugin.class);
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = -5053674282429774593L;
-	
-	
-	public ReadImageHeaderPlugin(CompositeEntity container, String name) throws NameDuplicationException, IllegalActionException {
-		super("EDPluginControlReadImageHeaderv10", container, name);
-
-	}
-	
-	@Override
-	protected String getInputTagName() {
-		return "XSDataInputReadImageHeader";
-	}
-
-	
-	protected String getSchemaLocation() {
-		return "/mxv1/datamodel/XSDataMXv1.xsd";
-	}
-	
-	@Override
-	protected String getPythonLocation() {
-		return "/mxv1/plugins/EDPluginGroupReadImageHeader-v1.0/plugins/EDPluginControlReadImageHeaderv10.py";
-	}
-	
-	@Override
-	protected String getExampleOutputLocation() {
-		return "/mxv1/plugins/EDPluginControlIndexing-v1.0/tests/data/XSDataIndexingInput_reference.xml";
-	}
-
-	@Override
-	public String getExtendedInfo() {
-		return "Read image header";
-	}
-
-	@Override
-	public String getDefaultInputXML() {
-		
-		final StringBuilder buf = new StringBuilder();
-		buf.append("<?xml version=\"1.0\"?>\n");
-		buf.append("<XSDataInputReadImageHeader>\n");
-		buf.append("  <image>\n");
-		buf.append("    <path><value>${file_path}</value></path>\n");
-		buf.append("  </image>\n");
-		buf.append("</XSDataInputReadImageHeader>\n");
-		return buf.toString();
-	}
-
-	@Override
-	public Properties getDefaultOutputProperties() {
-		final Properties props = new Properties();
-		props.put("file_dir",  "");
-		props.put("file_path", "");
-		props.put("sub_wedges", "//subWedge"); // returns all subWedge elements
-		props.put("experimental_condition", "//subWedge/experimentalCondition[1]");
-		return props;
-	}
-
-}
Index: src/org/dawb/passerelle/actors/edna/ThumbnailImagePlugin.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ThumbnailImagePlugin.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/edna/ThumbnailImagePlugin.java	(working copy)
@@ -1,129 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.edna;
-
-import java.util.Map;
-import java.util.Properties;
-
-import org.dawb.common.util.io.FileUtils;
-import org.dawb.passerelle.common.message.IVariable;
-import org.dawb.passerelle.common.message.Variable;
-
-import ptolemy.kernel.CompositeEntity;
-import ptolemy.kernel.util.IllegalActionException;
-import ptolemy.kernel.util.NameDuplicationException;
-
-/**
- *   EdnaPluginTransformer, copied from delay action.
- *
- *   @author gerring
- *   @date Aug 24, 2010
- *   @project org.edna.passerelle.actors
- **/
-public class ThumbnailImagePlugin extends AbstractEdnaPlugin {
-
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = -5053674282429774593L;
-	
-	
-	public ThumbnailImagePlugin(CompositeEntity container, String name) throws NameDuplicationException, IllegalActionException {
-		super("EDPluginExecThumbnailv10", container, name);
-
-	}
-	
-	@Override
-	protected String getInputTagName() {
-		return "XSDataInputExecThumbnail";
-	}
-
-	@Override
-	protected String getSchemaLocation() {
-		return "/execPlugins/plugins/EDPluginExecThumbnail-v1.0/datamodel/XSDataExecThumbnail.xsd";
-	}
-	
-	@Override
-	protected String getPythonLocation() {
-		return "/execPlugins/plugins/EDPluginExecThumbnail-v1.0/plugins/EDPluginExecThumbnailv10.py";
-	}
-
-	@Override
-	protected String getExampleOutputLocation() {
-		return "/execPlugins/plugins/EDPluginExecThumbnail-v1.0/tests/data/XSDataResultThumbnail_reference.xml";
-	}
-
-	@Override
-	public String getExtendedInfo() {
-		return "Create thumbnail image";
-	}
-	@Override
-	public String getDefaultInputXML() {
-		
-		// TODO Actually use template and then generate substituted XML here.
-		final StringBuilder buf = new StringBuilder();
-		buf.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
-		buf.append("<XSDataInputThumbnail>\n");
-		buf.append("  <inputImagePath>\n");
-		buf.append("    <path><value>${file_path}</value></path>\n");
-		buf.append("  </inputImagePath>\n");
-		buf.append("  <outputPath>\n");
-		buf.append("    <path><value>${file_dir}</value></path>\n");
-		buf.append("  </outputPath>\n");
-		buf.append("  <levelsInvert><value>1</value></levelsInvert>");
-	    buf.append("  <levelsGamma><value>0.8</value></levelsGamma>");
-		buf.append("  <thumbHeight><value>512</value></thumbHeight>");
-		buf.append("  <levelsMax><value>1000</value></levelsMax>");
-		buf.append("</XSDataInputThumbnail>\n");
-
-		return buf.toString();
-	}
-
-	@Override
-	public Properties getDefaultOutputProperties() {
-		final Properties props = new Properties();
-		props.put("file_dir",  "");
-		props.put("file_path", "");
-		props.put("file_name", "");
-		props.put("thumbnail_output", "/");
-		return props;
-	}
-
-	
-	@Override
-	protected void transformOutputValues(Map<String, String> outputs) {
-		
-        if (outputs.get("file_path")!=null) {
-        	outputs.put("file_path", FileUtils.setExtension(outputs.get("file_path"), "jpg"));
-        }
-        if (outputs.get("file_name")!=null) {
-        	outputs.put("file_name", FileUtils.setExtension(outputs.get("file_name"), "jpg"));
-        }
-	}
-	
-	
-	/**
-	 * Can be used to manipulate the output variable values after they
-	 * have been evaluated. Bu default does nothing.
-	 * 
-	 * @param outputs
-	 */
-	protected void transformExampleValue(IVariable var) {
-		
-		super.transformExampleValue(var);
-		if (!(var instanceof Variable)) return;
-		if ("file_path".equals(var.getVariableName()) || "file_name".equals(var.getVariableName())) {
-			final Variable v = (Variable)var;
-			final String val = FileUtils.setExtension(v.getExampleValue().toString(), "jpg");
-			v.setExampleValue(val);
-		}
-	}
-
-}
Index: src/org/dawb/passerelle/actors/edna/ControlInterfacev2_2.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ControlInterfacev2_2.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/edna/ControlInterfacev2_2.java	(working copy)
@@ -1,119 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.edna;
-
-import java.util.Properties;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import ptolemy.kernel.CompositeEntity;
-import ptolemy.kernel.util.IllegalActionException;
-import ptolemy.kernel.util.NameDuplicationException;
-
-/**
- * ControlInterfacev2_2
- * 
- * @author svensson
- * @date June 27, 2011
- * @project org.dawb.passerelle.actors
- **/
-public class ControlInterfacev2_2 extends AbstractEdnaPlugin {
-
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = 5459580374931695905L;
-	
-	private final static Logger logger = LoggerFactory.getLogger(ControlInterfacev2_2.class);
-
-	public ControlInterfacev2_2(CompositeEntity container, String name)
-			throws NameDuplicationException, IllegalActionException {
-		super("EDPluginControlInterfacev2_2", container, name);
-
-	}
-	
-	@Override
-	protected String getInputTagName() {
-		return "XSDataInputInterfacev2_2";
-	}
-
-	@Override
-	protected String getSchemaLocation() {
-		return "mxv2/plugins/EDPluginGroupInterface-v2.2/datamodel/XSDataInterfacev2_2.edml";
-	}
-
-	@Override
-	protected String getPythonLocation() {
-		return "mxv2/plugins/EDPluginGroupInterface-v2.2/plugins/EDPluginControlInterfacev2_2.py";
-	}
-
-	@Override
-	protected String getExampleOutputLocation() {
-		return "mxv2/plugins/EDPluginGroupInterface-v2.2/tests/data/XSDataResultInterfacev2_2_kappaCELL.xml";
-	}
-
-	@Override
-	public String getExtendedInfo() {
-		return "MXv2 Interface v2.2";
-	}
-
-	@Override
-	public String getDefaultInputXML() {
-
-		final StringBuilder buf = new StringBuilder();
-
-		buf.append("<?xml version=\"1.0\" ?>\n");
-		buf.append("<XSDataInputInterfacev2_2>\n");
-		buf.append("  <diffractionPlan>\n");
-		buf.append("    <kappaStrategyOption>\n");
-		buf.append("      <value>${kappaStrOpt}</value>\n");
-		buf.append("    </kappaStrategyOption>\n");
-		buf.append("  </diffractionPlan>\n");
-		buf.append("  <imagePath>\n");
-		buf.append("    <path>\n");
-		buf.append("      <value>${directory}/RAW_DATA/${prefix}_${run_number}_0001.${suffix}</value>\n");
-		buf.append("    </path>\n");
-		buf.append("  </imagePath>\n");
-		buf.append("  <imagePath>\n");
-		buf.append("    <path>\n");
-		buf.append("      <value>${directory}/RAW_DATA/${prefix}_${run_number}_0002.${suffix}</value>\n");
-		buf.append("    </path>\n");
-		buf.append("  </imagePath>\n");
-		buf.append("  <omega>\n");
-		buf.append("    <value>${phi}</value>\n");
-		buf.append("  </omega>\n");
-		buf.append("  <kappa>\n");
-		buf.append("    <value>${kap1}</value>\n");
-		buf.append("  </kappa>\n");
-		buf.append("  <phi>\n");
-		buf.append("    <value>${kap2}</value>\n");
-		buf.append("  </phi>\n");
-		buf.append("</XSDataInputInterfacev2_2>\n");
-		return buf.toString();
-	}
-
-	@Override
-	public Properties getDefaultOutputProperties() {
-		final Properties props = new Properties();
-		props.put("suggestedStrategyComment", "//suggestedStrategy/collectionPlan/comment/value/text()");
-		props.put("suggestedStrategy", "//suggestedStrategy");
-		props.put("mxv1ResultCharacterisation", "//mxv1ResultCharacterisation");
-		props.put("mxv1ResultCharacterisation_Reference", "//mxv1ResultCharacterisation_Reference");
-		props.put("predictionImagePath", "//mxv1ResultCharacterisation/indexingResult/predictionResult/predictionImage/path/value/text()");
-		props.put("possibleOrientations", "//possibleOrientations");
-		props.put("mxv1ShortSummary", "//mxv1ResultCharacterisation/shortSummary");
-		props.put("mxv1StrategyResult", "//mxv1ResultCharacterisation/strategyResult");
-		props.put("mxv2DataCollection", "//mxv2DataCollection");
-		props.put("mxv2DataCollection_Reference", "//mxv2DataCollection_Reference");
-	return props;
-	}
-
-}
Index: src/org/dawb/passerelle/actors/hardware/TangoMockModeTransformer.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/TangoMockModeTransformer.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/hardware/TangoMockModeTransformer.java	(working copy)
@@ -1,232 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.hardware;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.management.MBeanServerConnection;
-
-import org.dawb.common.util.ExpressionUtils;
-import org.dawb.common.util.SubstituteUtils;
-import org.dawb.passerelle.actors.hardware.motor.MotorBean;
-import org.dawb.passerelle.actors.hardware.motor.MotorContainer;
-import org.dawb.passerelle.actors.hardware.motor.MotorParameter;
-import org.dawb.passerelle.common.actors.AbstractDataMessageTransformer;
-import org.dawb.passerelle.common.message.DataMessageComponent;
-import org.dawb.passerelle.common.message.DataMessageException;
-import org.dawb.passerelle.common.message.IVariable;
-import org.dawb.passerelle.common.message.IVariable.VARIABLE_TYPE;
-import org.dawb.passerelle.common.message.MessageUtils;
-import org.dawb.passerelle.common.message.Variable;
-import org.dawb.tango.extensions.TangoUtils;
-import org.dawb.tango.extensions.factory.TangoConnection;
-import org.dawb.tango.extensions.factory.TangoConnectionFactory;
-import org.dawb.workbench.jmx.RemoteWorkbenchAgent;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import ptolemy.data.BooleanToken;
-import ptolemy.data.expr.Parameter;
-import ptolemy.data.expr.StringParameter;
-import ptolemy.kernel.CompositeEntity;
-import ptolemy.kernel.util.Attribute;
-import ptolemy.kernel.util.IllegalActionException;
-import ptolemy.kernel.util.Settable;
-
-import com.isencia.passerelle.actor.ProcessingException;
-import com.isencia.passerelle.util.ptolemy.StringChoiceParameter;
-
-import fr.esrf.TangoApi.DeviceAttribute;
-import org.eclipse.swt.SWT;
-
-/**
- * This actor sets or gets the TANGO mock mode. It has four different modes
- * of operation:
- * - Read-only the value of the TANGO mock mode
- * - Set the TANGO mock mode according to an incoming scalar
- * - Force the TANGO mock mode to be true
- * - Force the TANGO mock mode to be false
- * 
- * 
- * @author svensson
- *
- */
-public class TangoMockModeTransformer extends AbstractDataMessageTransformer {
-	
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = -2405810900325470900L;
-	private static final Logger logger = LoggerFactory.getLogger(TangoMockModeTransformer.class);
-
-	protected static final List<String> ACTOR_MODE;
-	static {
-		ACTOR_MODE = new ArrayList<String>(4);
-		ACTOR_MODE.add("TANGO Mock Mode variable read-only");
-		ACTOR_MODE.add("TANGO Mock Mode set by variable");
-		ACTOR_MODE.add("TANGO Mock Mode forced to true");
-		ACTOR_MODE.add("TANGO Mock Mode forced to false");
-	}
-
-	private final Parameter				actorModeParameter;
-	private final StringParameter  		tangoMockModeVariableNameParam;
-	private final Parameter             passInputsParameter;
-
-	private String 						actorMode = ACTOR_MODE.get(0);
-	private String                      tangoMockModeVariableName = "tango_mock_mode";
-	private boolean                     isPassInputs = true;
-	
-
-	public TangoMockModeTransformer(CompositeEntity container, String name) throws Exception {
-		
-		super(container, name);
-		
-		actorModeParameter = new StringChoiceParameter(this, "Actor Mode", ACTOR_MODE, SWT.SINGLE);
-		registerConfigurableParameter(actorModeParameter);
-		actorModeParameter.setExpression(ACTOR_MODE.get(0));
-		
-		tangoMockModeVariableNameParam  = new StringParameter(this, "TANGO Mock Mode Variable Name");
-		registerConfigurableParameter(tangoMockModeVariableNameParam);
-		tangoMockModeVariableNameParam.setExpression(tangoMockModeVariableName);
-
-		passInputsParameter = new Parameter(this,"Pass Inputs On",new BooleanToken(true));
-		registerConfigurableParameter(passInputsParameter);
-
-	}
-
-	
-	public void attributeChanged(Attribute attribute) throws IllegalActionException {
-		
-		if (attribute == actorModeParameter) {
-			actorMode = actorModeParameter.getExpression();
-		} else if (attribute == tangoMockModeVariableNameParam) {
-			tangoMockModeVariableName = tangoMockModeVariableNameParam.getExpression();
-		} else if (attribute == passInputsParameter) {
-			final BooleanToken b = (BooleanToken) passInputsParameter.getToken();
-			isPassInputs = b.booleanValue();
-		}		
-	    super.attributeChanged(attribute);
-	}
-
-	@Override
-	protected DataMessageComponent getTransformedMessage(List<DataMessageComponent> cache) throws ProcessingException {
-		
-		try {
-			String tangoMockModeScalar = null;
-			boolean tangoMockMode = TangoConnectionFactory.isMockMode();
-			logger.info("Actor \""+getName()+"\": initial TANGO mock mode set to "+tangoMockMode);
-			boolean tangoMockModeNew = tangoMockMode;
-			// Try to read upstream variable name tangoMockModeVariableName
-			for (DataMessageComponent dataMessageComponent : cache) {
-				if (dataMessageComponent.getScalar()!=null) {
-					for (String name : dataMessageComponent.getScalar().keySet()) {						
-						if (name.equals(tangoMockModeVariableName)) {
-							tangoMockModeScalar = dataMessageComponent.getScalar().get(name);
-							logger.info("Actor \""+getName()+"\": TANGO mock mode variable "+tangoMockModeVariableName+" set to "+tangoMockModeScalar);
-						}
-					}
-				}
-			}
-			// Action of actor depending on actorModeParameter
-			if (actorModeParameter.getExpression().equals(ACTOR_MODE.get(0))) {
-				// Just read the mock mode, i.e. do nothing here
-			} else if (actorModeParameter.getExpression().equals(ACTOR_MODE.get(1))) {
-				// Set the mock mode according to tangoMockModeVariableName
-				if (tangoMockModeScalar==null) {
-					throw createDataMessageException("Cannot set tango mock mode because "+tangoMockModeVariableName+" is not present in the incoming port!", null);					
-				} else {
-					if (tangoMockModeScalar.equals("true")) {
-						tangoMockModeNew = true;
-						logger.info("Actor \""+getName()+"\": TANGO mock mode set to be true according to "+tangoMockModeVariableName);
-					} else if (tangoMockModeScalar.equals("false")) {	
-						tangoMockModeNew = false;
-						logger.info("Actor \""+getName()+"\": TANGO mock mode set to be false according to "+tangoMockModeVariableName);
-					} else {
-						// Raise exception as the content of tangoMockModeVariableName is neither true nor false
-						throw createDataMessageException("Cannot set tango mock mode because "+tangoMockModeVariableName+" is set to "+tangoMockModeScalar+", it should be set to either true or false!", null);
-					}
-				}
-			} else if (actorModeParameter.getExpression().equals(ACTOR_MODE.get(2))) {
-				// Force mock mode to true
-				tangoMockModeNew = true;
-				logger.info("Actor \""+getName()+"\": TANGO mock mode forced to be true");
-			} else if (actorModeParameter.getExpression().equals(ACTOR_MODE.get(3))) {
-				// Force mock mode to false
-				tangoMockModeNew = false;
-				logger.info("Actor \""+getName()+"\": TANGO mock mode forced to be false");
-			}			
-			// Should the mock mode be changed?
-			if (tangoMockMode != tangoMockModeNew) {
-				logger.info("Actor \""+getName()+"\": TANGO mock mode changed to be "+tangoMockModeNew);
-				TangoConnectionFactory.setMockMode(tangoMockModeNew);
-			}
-			// Set the outgoing variable tangoMockModeVariableName
-			final DataMessageComponent despatch = new DataMessageComponent();
-			despatch.setMeta(MessageUtils.getMeta(cache));
-			if (isPassInputs) {
-				final Map<String,String> upStreamScalar = MessageUtils.getScalar(cache);
-			    despatch.addScalar(upStreamScalar);
-			}
-			despatch.putScalar(tangoMockModeVariableName, ""+tangoMockModeNew);
-
-			return despatch;
-
-		} catch (Exception e) {
-			throw createDataMessageException("Cannot set tango mock mode!", e);
-		}
-	    
-	}
-
-
-	@Override
-	protected String getOperationName() {
-		return "Get/Set TANGO mock mode";
-	}
-
-	@Override
-	protected String getExtendedInfo() {
-		return "Actor to set and get the TANGO mock mode";
-	}
-	
-	public List<IVariable> getInputVariables() {
-		
-		final List<IVariable> inputs = new ArrayList<IVariable>(7);
-		final List<String>    names  = new ArrayList<String>(7);
-		
-		final List<IVariable> vars = super.getInputVariables();				
-		for (IVariable input : vars) {
-			if (!names.contains(input.getVariableName())) {
-				inputs.add(input);
-				names.add(input.getVariableName());
-			}
-		}
-
-		return inputs;
-	}
-
-	/**
-	 */
-	public List<IVariable> getOutputVariables() {
-
-		final List<IVariable> ret;
-		if (isPassInputs) {
-			ret =  getInputVariables();
-		} else {
-			ret = new ArrayList<IVariable>(2);
-		}
-
-		return ret;
-	}
-	
-}
Index: src/org/dawb/passerelle/actors/hardware/SharedMemorySource.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/SharedMemorySource.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/hardware/SharedMemorySource.java	(working copy)
@@ -1,319 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.hardware;
-
-import java.util.List;
-
-import org.dawb.common.ui.plot.PlotType;
-import org.dawb.common.ui.preferences.CommonUIPreferenceConstants;
-import org.dawb.passerelle.common.actors.AbstractDataMessageSource;
-import org.dawb.passerelle.common.message.DataMessageComponent;
-import org.dawb.passerelle.common.message.IVariable;
-import org.dawb.passerelle.common.message.MessageUtils;
-import org.dawb.passerelle.common.message.Variable;
-import org.dawb.passerelle.common.message.IVariable.VARIABLE_TYPE;
-import org.dawb.tango.extensions.TangoUtils;
-import org.dawb.tango.extensions.editors.SharedMemoryUtils;
-import org.dawb.tango.extensions.editors.preferences.SharedConstants;
-import org.dawb.tango.extensions.factory.TangoConnection;
-import org.dawb.tango.extensions.factory.TangoConnectionFactory;
-import org.eclipse.core.runtime.preferences.InstanceScope;
-import org.eclipse.jface.preference.IPreferenceStore;
-import org.eclipse.ui.preferences.ScopedPreferenceStore;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import ptolemy.data.IntToken;
-import ptolemy.data.expr.Parameter;
-import ptolemy.data.expr.StringParameter;
-import ptolemy.kernel.CompositeEntity;
-import uk.ac.diamond.scisoft.analysis.dataset.AbstractDataset;
-
-import com.isencia.passerelle.actor.ProcessingException;
-import com.isencia.passerelle.actor.TerminationException;
-import com.isencia.passerelle.message.ManagedMessage;
-
-import fr.esrf.TangoApi.DeviceData;
-
-/**
- * This actor reads arrays from shared memory and sends them
- * into the pipeline.
- * 
- * We reply on preferences set in the GUI for the workspace. We
- * read them and this configures tango.
- * 
- * @author gerring
- *
- */
-public class SharedMemorySource extends AbstractDataMessageSource {
-	
-	private static final Logger logger = LoggerFactory.getLogger(SharedMemorySource.class);
-	
-	private static final String[] DATA_CHOICES = new String[]{"1D List", "2D"};
-	
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = -5335673681296652024L;
-	
-	private StringParameter specTangoUri,variable,dataType,outputName,specName;
-	
-	/**
-	 * The data will not be fired into the pipeline greater than this rate.
-	 */
-	private Parameter sourceFreq;
-
-	/**
-	 * After this period the source will exit and stop checking
-	 */
-	private Parameter inactiveFreq;
-	
-	/**
-	 * The chunk size used when reading a memory chunk.
-	 */
-	private Parameter chunkSize;
-	
-	public SharedMemorySource(CompositeEntity container, String name) throws Exception {	
-		
-		super(container, name);
-		
-		final ScopedPreferenceStore store = new ScopedPreferenceStore(new InstanceScope(),"org.dawb.tango.extensions");
-
-		this.specTangoUri = new StringParameter(this, "Spec Tango URI");
-		registerExpertParameter(specTangoUri);
-        specTangoUri.setExpression(store.getString(SharedConstants.SPEC_SHARED));
-        // Default to last uri
-       
-		this.variable = new StringParameter(this, "Spec Variable") {
-			private static final long serialVersionUID = -1902977727142062610L;
-			public String[] getChoices() {
-				try {
-					return getMemoryChoices();
-				} catch (Exception e) {
-					logger.error("Cannot get memory names", e);
-					return new String[]{"Error - shared memory choices invalid!"};
-				}
-			}
-		};
-		registerConfigurableParameter(variable);
-		
-		this.outputName = new StringParameter(this, "Output Name");
-		registerConfigurableParameter(outputName);
-		outputName.setExpression("x");
-    
-		this.sourceFreq = new Parameter(this, "Source Frequency", new IntToken(store.getInt(SharedConstants.MON_FREQ)));
-		registerConfigurableParameter(sourceFreq);
-
-		this.inactiveFreq = new Parameter(this, "Inactive After", new IntToken(-1));
-		registerExpertParameter(inactiveFreq);
-
-		this.chunkSize = new Parameter(this, "Chunk Size", new IntToken(store.getInt(SharedConstants.CHUNK_SIZE)));
-		registerExpertParameter(chunkSize);
-		
-		this.specName = new StringParameter(this, "Spec Name");
-		registerConfigurableParameter(specName);
-		IPreferenceStore commonStore =  new ScopedPreferenceStore(new InstanceScope(),"org.dawb.common.ui");
-		specName.setExpression(commonStore.getString(CommonUIPreferenceConstants.SPEC_NAME));
-		
-		this.dataType = new StringParameter(this, "Data Type") {
-			private static final long serialVersionUID = -751428263040559946L;
-			public String[] getChoices() {
-				return DATA_CHOICES;
-			}
-		};
-		dataType.setExpression(DATA_CHOICES[0]);
-		registerConfigurableParameter(dataType);
-       
-	}
-
-	private TangoConnection connection = null;
-
-	private ManagedMessage triggerMsg;
-	
-	protected void acceptTriggerMessage(ManagedMessage triggerMsg) {
-		this.triggerMsg = triggerMsg;
-	}
-	
-	@Override
-	protected ManagedMessage getDataMessage() throws ProcessingException {
-		
-		try {
-			
-			if (connection==null) connection = createConnection();
-			
-			final String memoryName = variable.getExpression();
-			
-			final boolean isData = isData(memoryName);
-			if (!isData) return null;
-			
-			final PlotType plotType = DATA_CHOICES[0].equals(dataType.getExpression())
-			                        ? PlotType.PT1D : PlotType.IMAGE;
-			
-			final int cSize = ((IntToken)chunkSize.getToken()).intValue();
-			
-			final List<AbstractDataset> sets = SharedMemoryUtils.getSharedMemoryValue(connection, 
-					                                                                  memoryName, 
-					                                                                  cSize, 
-					                                                                  plotType);
-			
-			final DataMessageComponent  ret  = new DataMessageComponent();
-			final String               name  = outputName.getExpression();     
-			if (plotType == PlotType.IMAGE) {
-				final AbstractDataset image = sets.get(0);
-				image.setName(name);
-				ret.addList(name, sets.get(0));
-			} else {
-				int i = 1;
-				for (AbstractDataset a : sets) {
-					
-					a.setName(name+i);
-					ret.addList(name+i, a);
-					i++;
-				}
-			}
-			
-			if (triggerMsg!=null) {
-				try {
-					final DataMessageComponent c = MessageUtils.coerceMessage(triggerMsg);
-					ret.addScalar(c.getScalar());
-				} catch (Exception ignored) {
-					logger.info("Trigger for "+getName()+" is not DataMessageComponent, no data added.");
-				}
-			}
-			
-			return MessageUtils.getDataMessage(ret);
-			
-		} catch (Exception ne) {
-			throw createDataMessageException("Cannot extract shared memory", ne);
-		
-		}
-	}
-	
-	/**
-	 * Waits until a timeout occurs. A timeout of 0 or less means wait until stop has been pressed.
-	 * @param memoryName
-	 * @return
-	 * @throws Exception
-	 */
-	private boolean isData(String memoryName) throws Exception {
-
-		final DeviceData  out = new DeviceData();
-		out.insert(new String[]{this.specName.getExpression(), memoryName});
-		
-		DeviceData ret = connection.executeCommand("IsUpdated", out, false);
-		
-		int totalTime = ((IntToken)inactiveFreq.getToken()).intValue();
-		
-		// 0 or less means wait for ever
-		if (totalTime<0) totalTime = Integer.MAX_VALUE;
-		int waitedTime  = 0;
-		while (ret.extractLong()!=1 && waitedTime<totalTime && !isFinishRequested()) { 
-			try {
-				Thread.sleep(100);
-				ret = connection.executeCommand("IsUpdated", out, false);
-			} finally {
-				if (totalTime!=Integer.MAX_VALUE) waitedTime+=100;
-			}
-		}
-		
-		if (ret.extractLong()==1) {
-			return true;
-		} else {
-			logger.warn("The actor '"+getDisplayName()+"' has timed out after "+totalTime+" ms.");
-			return false;
-		}
-	}
-
-	protected boolean doPostFire() throws ProcessingException {
-		try {
-			final int freq = ((IntToken)sourceFreq.getToken()).intValue();
-			if (!isFinishRequested()) Thread.sleep(freq);
-			
-		} catch (Exception e) {
-			throw new ProcessingException("Cannot wait for source frequency time after last data!", this, e);
-		}
-	    return super.doPostFire();
-	}
-	
-	protected void doWrapUp() throws TerminationException {
-		try {
-		    if (connection!=null) connection.dispose();
-		} catch (Exception ne) {
-			throw new TerminationException("Cannot close tango connection", this, ne);
-		} finally {
-			super.doWrapUp();
-		}
-	}
-	
-	@Override
-	protected String getExtendedInfo() {
-		return "Actor to monitor shared memory.";
-	}
-	
-
-	private String[] getMemoryChoices() throws Exception {
-		
-		TangoConnection connection = null;
-		try {
-			connection = createConnection();
-			final List<String> names = SharedMemoryUtils.getSharedNames(connection);
-			return names.toArray(new String[names.size()]);
-			
-		} catch (Exception ne) {
-			logger.error("Cannot read shared memory variables!", ne);
-			return new String[]{ne.getMessage()};
-		} finally {
-			if (connection!=null) connection.dispose();
-		}
-	}
-
-	private TangoConnection createConnection() throws Exception {
-		
-    	final String hardwareURI = TangoUtils.getHardwareAddress(specTangoUri.getExpression());
-    	try {
-		    return TangoConnectionFactory.openCommandConnection(hardwareURI);
-    	} catch (fr.esrf.TangoApi.ConnectionFailed cnf) {
-    		logger.error("Cannot run '"+getDisplayName()+"' because the tango connection cannot be made!\n"+cnf.errors[0].desc);
-    	    throw cnf;
-    	}
-	}
-	
-	@Override
-	public List<IVariable> getOutputVariables() {
-		
-		try {
-		    final List<IVariable>    ret  = super.getOutputVariables();
-			final PlotType plotType = DATA_CHOICES[0].equals(dataType.getExpression())
-                                    ? PlotType.PT1D : PlotType.IMAGE;
-
-			if (plotType==PlotType.IMAGE) {
-				ret.add(new Variable(outputName.getExpression(), VARIABLE_TYPE.ARRAY, null, AbstractDataset.class));
-			} else {
-				final int cSize = ((IntToken)chunkSize.getToken()).intValue();
-				for (int i = 1; i <= cSize; i++) {
-					ret.add(new Variable(outputName.getExpression()+i, VARIABLE_TYPE.ARRAY, null, AbstractDataset.class));
-				}
-			}
-			return ret;
-			
-		} catch (Exception e) {
-			logger.error("Cannot read variables", e);
-			return null;
-		}
-
-	}
-
-	@Override
-	protected boolean mustWaitForTrigger() {
-		if (triggerMsg!=null) return false;
-		return trigger.getWidth()>0;
-	}
-	
-}
Index: src/org/dawb/passerelle/actors/hardware/command/CommandParameter.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/command/CommandParameter.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/hardware/command/CommandParameter.java	(working copy)
@@ -1,79 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.hardware.command;
-
-import org.dawb.passerelle.common.parameter.CellEditorParameter;
-import org.eclipse.jface.dialogs.Dialog;
-import org.eclipse.jface.viewers.CellEditor;
-import org.eclipse.jface.viewers.DialogCellEditor;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Control;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import ptolemy.kernel.util.IllegalActionException;
-import ptolemy.kernel.util.NameDuplicationException;
-import ptolemy.kernel.util.NamedObj;
-
-public class CommandParameter extends CellEditorParameter {
-	
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = 8999174318856900808L;
-	
-	private final static Logger logger = LoggerFactory.getLogger(CommandParameter.class);
-	
-	public CommandParameter(NamedObj container, String name) throws IllegalActionException, NameDuplicationException {
-		super(container, name);
-	}
-	
-	@Override
-	public CellEditor createCellEditor(Control control) {
-		
-		final DialogCellEditor editor = new DialogCellEditor((Composite)control) {
-			@Override
-			protected Object openDialogBox(Control cellEditorWindow) {
-								
-				final CommandDialog dialog = new CommandDialog(cellEditorWindow.getShell(), getContainer()); // extends BeanDialog
-				dialog.create();
-				dialog.getShell().setSize(450,600); // As needed
-				dialog.getShell().setText("Call Spec Commands");
-			
-				dialog.setBean(getBeanFromValue(CommandContainer.class));
-		        final int ok = dialog.open();
-		        if (ok == Dialog.OK) {
-		            return getValueFromBean((CommandContainer)dialog.getBean());
-		        }
-		        
-		        return null;
-			}
-		    protected void updateContents(Object value) {
-		        if ( getDefaultLabel() == null) {
-					return;
-				}
-		        getDefaultLabel().setText(getRendererText());
-		    }
-
-		};
-		
-		
-		return editor;
-	}
-	
-	/**
-	 * May need to cache here but JFace already does a better job of this than swing.
-	 */
-	@Override
-	public String getRendererText() {
-		return getBeanFromValue(CommandContainer.class).toString();
-	}	
-
-}
Index: src/org/dawb/passerelle/actors/hardware/command/CommandDialog.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/command/CommandDialog.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/hardware/command/CommandDialog.java	(working copy)
@@ -1,71 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.hardware.command;
-
-import org.dawb.common.ui.util.GridUtils;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Control;
-import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Shell;
-
-import ptolemy.kernel.util.NamedObj;
-import uk.ac.gda.richbeans.components.selector.VerticalListEditor;
-import uk.ac.gda.richbeans.dialog.BeanDialog;
-
-public class CommandDialog extends BeanDialog {
-
-	private VerticalListEditor beans;
-	
-	
-	protected CommandDialog(Shell parentShell, NamedObj container) {
-		super(parentShell);
-	}
-	
-	public Control createDialogArea(Composite parent) {
-		
-		final Composite main = (Composite)super.createDialogArea(parent);
-		main.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
-		
-		final Label label = new Label(main, SWT.WRAP);
-		label.setText("Call individual commands and record their output here. Note that you can also substitute values directly into a spec macro using the 'Spec Macro' attribute, however that does not record response.");
-		label.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
-		
-		beans = new VerticalListEditor(main, SWT.NONE);
-		beans.setRequireSelectionPack(false);
-		beans.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
-		beans.setMinItems(0);
-		beans.setMaxItems(25);
-		beans.setDefaultName("command_result");
-		beans.setEditorClass(CommandBean.class);
-		
-		final CommandComposite beanComp =  new CommandComposite(beans, SWT.NONE);
-		beans.setEditorUI(beanComp);
-		beans.setNameField("variableName");
-		beans.setAdditionalFields(new String[]{"command"});
-		beans.setColumnWidths(new int[]{120, 300});
-		beans.setListHeight(150);
-		
-		GridUtils.setVisibleAndLayout(beans, true);
-		return main;
-	}
-
-	public VerticalListEditor getBeans() {
-		return beans;
-	}
-	
-	public int open() {
-		beans.setShowAdditionalFields(true);
-        int ret = super.open();
-        beans = null;
-        return ret;
-	}
-}
Index: src/org/dawb/passerelle/actors/hardware/command/CommandComposite.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/command/CommandComposite.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/hardware/command/CommandComposite.java	(working copy)
@@ -1,111 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.hardware.command;
-
-import org.dawb.common.ui.util.GridUtils;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Control;
-import org.eclipse.swt.widgets.Label;
-import org.eclipse.ui.forms.events.ExpansionAdapter;
-import org.eclipse.ui.forms.events.ExpansionEvent;
-import org.eclipse.ui.forms.widgets.ExpandableComposite;
-
-import uk.ac.gda.richbeans.components.wrappers.TextWrapper;
-
-public class CommandComposite extends Composite {
-
-	private TextWrapper variableName, command;
-	private TextWrapper attributeName, commandAttributeName;
-
-	public CommandComposite(Composite parent, int style) {
-		
-		super(parent, style);
-		setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
-		
-		setLayout(new GridLayout(1, false));
-		
-		final Composite main = new Composite(this, SWT.NONE);
-		main.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
-		main.setLayout(new GridLayout(2, false));
-
-		final Label variableLabel = new Label(main, SWT.NONE);
-		variableLabel.setText("Variable Name");
-		variableLabel.setToolTipText("The variable that the command will be read into.");
-		
-		this.variableName = new TextWrapper(main, SWT.NONE);
-		variableName.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
-		variableName.setTextLimit(64);
-		variableName.setTextType(TextWrapper.TEXT_TYPE.EXPRESSION);
-		
-		final Label commandLabel = new Label(main, SWT.NONE);
-		commandLabel.setText("Command");
-		commandLabel.setToolTipText("The spec command to run.\nCommands of the form '<scan_command> <hardware_name> <<numerical args>...>' will have brackets and quotations inserted automatically. Variables can be inserted using '${variable_name}' notation.");
-		
-		this.command = new TextWrapper(main, SWT.NONE);
-		command.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
-		command.setTextLimit(250);
-		
-		final ExpandableComposite advancedComposite = new ExpandableComposite(this, SWT.NONE);
-		advancedComposite.setExpanded(false);
-		advancedComposite.setText("Advanced");
-		advancedComposite.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
-		
-		final Composite advanced = new Composite(this, SWT.NONE);
-		advanced.setLayout(new GridLayout(2, false));
-		advanced.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
-		
-		Label label = new Label(advanced, SWT.NONE);
-		label.setText("Event Attribute");
-		
-		this.attributeName = new TextWrapper(advanced, SWT.NONE);
-		attributeName.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
-		attributeName.setToolTipText("The attribute name or 'Position' if left blank.");
-		
-		label = new Label(advanced, SWT.NONE);
-		label.setText("Command Attribute");
-		
-		this.commandAttributeName = new TextWrapper(advanced, SWT.NONE);
-		commandAttributeName.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
-		commandAttributeName.setToolTipText("The command name or 'ExecuteCmd' if left blank.");
-		
-		GridUtils.setVisible(advanced, false);
-		ExpansionAdapter expansionListener = new ExpansionAdapter() {
-			@Override
-			public void expansionStateChanged(ExpansionEvent e) {
-				GridUtils.setVisible(advanced, !advanced.isVisible());
-				layout(new Control[]{advanced, advancedComposite});
-				getParent().layout();
-				getParent().getParent().layout();
-			}
-		};
-		advancedComposite.addExpansionListener(expansionListener);
-
-	}
-
-	public TextWrapper getVariableName() {
-		return variableName;
-	}
-
-	public TextWrapper getCommand() {
-		return command;
-	}
-
-	public TextWrapper getAttributeName() {
-		return attributeName;
-	}
-
-	public TextWrapper getCommandAttributeName() {
-		return commandAttributeName;
-	}
-
-}
Index: src/org/dawb/passerelle/actors/hardware/command/CommandBean.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/command/CommandBean.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/hardware/command/CommandBean.java	(working copy)
@@ -1,89 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.hardware.command;
-
-public class CommandBean {
-
-	private String  variableName;
-	private String  command;
-	private String  attributeName;
-	private String  commandAttributeName;
-	
-	public String getVariableName() {
-		return variableName;
-	}
-	public void setVariableName(String variableName) {
-		this.variableName = variableName;
-	}
-	public String getCommand() {
-		return command;
-	}
-	public void setCommand(String command) {
-		this.command = command;
-	}
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result
-				+ ((attributeName == null) ? 0 : attributeName.hashCode());
-		result = prime * result + ((command == null) ? 0 : command.hashCode());
-		result = prime
-				* result
-				+ ((commandAttributeName == null) ? 0 : commandAttributeName
-						.hashCode());
-		result = prime * result
-				+ ((variableName == null) ? 0 : variableName.hashCode());
-		return result;
-	}
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (obj == null)
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		CommandBean other = (CommandBean) obj;
-		if (attributeName == null) {
-			if (other.attributeName != null)
-				return false;
-		} else if (!attributeName.equals(other.attributeName))
-			return false;
-		if (command == null) {
-			if (other.command != null)
-				return false;
-		} else if (!command.equals(other.command))
-			return false;
-		if (commandAttributeName == null) {
-			if (other.commandAttributeName != null)
-				return false;
-		} else if (!commandAttributeName.equals(other.commandAttributeName))
-			return false;
-		if (variableName == null) {
-			if (other.variableName != null)
-				return false;
-		} else if (!variableName.equals(other.variableName))
-			return false;
-		return true;
-	}
-	public String getAttributeName() {
-		return attributeName;
-	}
-	public void setAttributeName(String attributeName) {
-		this.attributeName = attributeName;
-	}
-	public String getCommandAttributeName() {
-		return commandAttributeName;
-	}
-	public void setCommandAttributeName(String commandAttributeName) {
-		this.commandAttributeName = commandAttributeName;
-	}
-}
Index: src/org/dawb/passerelle/actors/hardware/command/CommandContainer.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/command/CommandContainer.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/hardware/command/CommandContainer.java	(working copy)
@@ -1,83 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.hardware.command;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class CommandContainer {
-
-	private List<CommandBean> beans;
-	
-	public CommandContainer() {
-		beans = new ArrayList<CommandBean>();
-	}
-	
-	public void clear() {
-		if (beans!=null) beans.clear();
-	}
-
-	public List<CommandBean> getBeans() {
-		return beans;
-	}
-
-	public void setBeans(List<CommandBean> expressions) {
-		this.beans = expressions;
-	}
-
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result
-				+ ((beans == null) ? 0 : beans.hashCode());
-		return result;
-	}
-
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (obj == null)
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		CommandContainer other = (CommandContainer) obj;
-		if (beans == null) {
-			if (other.beans != null)
-				return false;
-		} else if (!beans.equals(other.beans))
-			return false;
-		return true;
-	}
-	
-	/**
-	 * Constructs user readable version of bean
-	 */
-	public String toString() {
-		if (beans==null||beans.isEmpty()) return "No commands created, click to edit...";
-		final StringBuilder buf = new StringBuilder();
-		for (CommandBean b : beans) {
-
-			buf.append("'");
-			buf.append(b.getCommand());
-			buf.append("'  ");
-		}
-		return buf.toString();
-	}
-
-	public int size() {
-		return beans.size();
-	}
-
-	public boolean isEmpty() {
-		return beans==null||size()<1;
-	}
-}
Index: src/org/dawb/passerelle/actors/hardware/TangoCommandTransformer.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/TangoCommandTransformer.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/hardware/TangoCommandTransformer.java	(working copy)
@@ -1,375 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.hardware;
-
-import java.io.ByteArrayInputStream;
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.dawb.common.util.SubstituteUtils;
-import org.dawb.common.util.io.IFileUtils;
-import org.dawb.passerelle.actors.hardware.command.CommandBean;
-import org.dawb.passerelle.actors.hardware.command.CommandContainer;
-import org.dawb.passerelle.actors.hardware.command.CommandParameter;
-import org.dawb.passerelle.common.actors.AbstractDataMessageTransformer;
-import org.dawb.passerelle.common.message.DataMessageComponent;
-import org.dawb.passerelle.common.message.DataMessageException;
-import org.dawb.passerelle.common.message.IVariable;
-import org.dawb.passerelle.common.message.MessageUtils;
-import org.dawb.passerelle.editors.SubstitutionEditor;
-import org.dawb.passerelle.editors.SubstitutionParticipant;
-import org.dawb.tango.extensions.TangoUtils;
-import org.dawb.tango.extensions.factory.TangoConnection;
-import org.dawb.tango.extensions.factory.TangoConnectionEvent;
-import org.dawb.tango.extensions.factory.TangoConnectionFactory;
-import org.dawb.tango.extensions.factory.TangoConnectionListener;
-import org.eclipse.core.resources.IContainer;
-import org.eclipse.core.resources.IFile;
-import org.eclipse.core.resources.IFolder;
-import org.eclipse.core.resources.IProject;
-import org.eclipse.core.resources.IResource;
-import org.eclipse.core.resources.ResourcesPlugin;
-import org.eclipse.core.runtime.CoreException;
-import org.eclipse.core.runtime.NullProgressMonitor;
-import org.eclipse.gmf.runtime.common.core.util.StringUtil;
-import org.eclipse.ui.IWorkbenchPart;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import ptolemy.kernel.CompositeEntity;
-import ptolemy.kernel.util.Settable;
-
-import com.isencia.passerelle.actor.ProcessingException;
-import com.isencia.passerelle.util.ptolemy.ResourceParameter;
-import com.isencia.passerelle.workbench.model.actor.IPartListenerActor;
-import com.isencia.passerelle.workbench.model.actor.IResourceActor;
-import com.isencia.passerelle.workbench.model.actor.ResourceObject;
-import com.isencia.passerelle.workbench.model.utils.ModelUtils;
-
-/**
- * This actor sets or gets a motor value, if set then value should be set
- * (expands allowed) and if get then motor name should be set only.
- * 
- * In  id11/spec/matt ::ExecuteCmd() ['eval(\'COLLECT_SEQ["kappaStart"] = -9999\')']
- * 
- * @author gerring
- *
- */
-public class TangoCommandTransformer extends AbstractDataMessageTransformer implements IResourceActor, SubstitutionParticipant, IPartListenerActor {
-	
-	private static final Logger logger = LoggerFactory.getLogger(TangoCommandTransformer.class);
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = -5335673681296652024L;
-
-	private CommandParameter    cmdParam;
-	private ResourceParameter   specFileParam;
-
-	public TangoCommandTransformer(CompositeEntity container, String name) throws Exception {
-		
-		super(container, name);
-		
-		cmdParam  = new CommandParameter(this,"Commands");
-		registerConfigurableParameter(cmdParam);
-		
-		specFileParam = new ResourceParameter(this, "Spec Macro", "Spec Macro", "*.mac", "*.txt");
-		registerConfigurableParameter(specFileParam);
-	
-		memoryManagementParam.setVisibility(Settable.NONE);
-		dataSetNaming.setVisibility(Settable.NONE);
-	}
-
-	protected int getMinimumCacheSize() {
-		return 0;
-	}
-	
-	@Override
-	protected DataMessageComponent getTransformedMessage(List<DataMessageComponent> cache) throws ProcessingException {
-		
-		try {
-			final CommandContainer cont = (CommandContainer)cmdParam.getBeanFromValue(CommandContainer.class);
-	    	final DataMessageComponent comp = MessageUtils.mergeAll(cache);
-		    
-	    	if (cont == null) {
-		    	comp.putScalar("error_messsage", "No motors configured, '"+getName()+"' did nothing.");
-		    	return comp;
-		    }
-	    	
-	    	runMacro(getResource(false), comp);
-		    
-		    final Map<String,String> values = runCommands(cont, comp);
-	    	if (values!=null) comp.addScalar(values);
-		
-	        return comp;
-	        
-		} catch (Exception e) {
-			throw createDataMessageException("Cannot run command!", e);
-		}
-	    
-	}
-
-	private boolean runMacro(final IResource resource, final DataMessageComponent comp) throws CoreException, Exception {
-		
-        if (!resource.exists())           return false;
-        if (!(resource instanceof IFile)) return false;
-        final IFile file = (IFile)resource;
-        
-		final String macroFile = SubstituteUtils.substitute(file.getContents(), comp.getScalar());
-		if (macroFile==null || "".equals(macroFile.trim())) return false;
-		
-		final String[] cmds = macroFile.split("\n");
-		if (cmds==null || cmds.length<1) return false;
-		
-		final List<String> commands  = new ArrayList<String>(cmds.length);
-		for (int i = 0; i < cmds.length; i++) { // Not ideal but # must be ignored
-			final String line = cmds[i].trim();
-			if (line.startsWith("#")) continue;
-			commands.add(line);
-		}
-
-		if (commands.isEmpty()) return false;
-		
-		logger.info("Running macro '"+resource.getLocation().toOSString()+"'");
-		final String     hardwareURI = TangoUtils.getSpecCommandAddress();
-		TangoConnection  connection	 = null;	
-		try {
-			connection  = TangoConnectionFactory.openCommandConnection(hardwareURI);
-			
-			String sleepTime = System.getProperty("org.dawb.passerelle.actors.hardware.command.sleep.interval");
-			for (String cmd : commands) {
-				
-				logger.info(cmd);
-				connection.executeCommand("ExecuteCmd", cmd, false);
-				if (sleepTime!=null) {
-					Thread.sleep(Long.parseLong(sleepTime));
-				}
-			}
-			
-			return true;
-			
-		} catch (Exception e) {
-			throw createDataMessageException("Cannot connect to "+hardwareURI, e);
-		} finally {
-			if (connection!=null) {
-				try {
-					connection.dispose();
-				} catch (Exception e) {
-					throw createDataMessageException("Cannot dispose tango connection "+connection.getUri(), e);
-				}
-			}
-		}
-	}
-
-	private Map<String, String> runCommands(final CommandContainer cont, final DataMessageComponent comp) throws DataMessageException {
-	
-		final Map<String,StringBuilder> data = new HashMap<String,StringBuilder>(cont.size());
-		
-		for (final CommandBean cb : cont.getBeans()) {
-			
-			final String cmd          = SubstituteUtils.substitute(cb.getCommand(), comp.getScalar());
-			final String attrbuteName = cb.getAttributeName()!=null && !"".equals(cb.getAttributeName())
-			                          ? cb.getAttributeName()
-			                          : "Output";
-			
-			final String            hardwareURI = TangoUtils.getSpecCommandAddress();
-			TangoConnection         connection  = null;
-			TangoConnectionListener listener    = null;
-			try {
-
-				connection = TangoConnectionFactory.openMonitoredCommandConnection(hardwareURI, attrbuteName);
-				
-				String cmdAttribute = "ExecuteCmd";
-				if (cb.getCommandAttributeName()!=null&&!"".equals(cb.getCommandAttributeName())) {
-					cmdAttribute = cb.getCommandAttributeName();
-				}
-				listener = createTangoConnectionListener(cmd, cb, data);
-				connection.addTangoConnectionListener(listener);
-				
-				connection.executeCommand(cmdAttribute, cmd, false);
-				
-			} catch (Exception e) {
-				if (isMockMode()) {
-					throw createDataMessageException(e.getMessage(), e);
-				} else {
-				    throw createDataMessageException("Cannot connect to "+hardwareURI, e);
-				}
-			} finally {
-				if (connection!=null) {
-					connection.removeTangoConnectionListener(listener);
-					try {
-						connection.dispose();
-					} catch (Exception e) {
-						throw createDataMessageException("Cannot dispose tango connection "+connection.getUri(), e);
-					}
-				}
-			}
-		}
-		
-		final Map<String,String> ret = new HashMap<String,String>(cont.size());
-		for (String key : data.keySet()) {
-			ret.put(key, data.get(key).toString());
-		}
-		return ret;
-	}
-
-	private TangoConnectionListener createTangoConnectionListener(final String                     cmd,
-			                                                      final CommandBean                cb,
-			                                                      final Map<String, StringBuilder> data) {
-		
-		return new TangoConnectionListener() {
-			@Override
-			public void tangoEventPerformed(final TangoConnectionEvent event) {
-				StringBuilder buf = data.get(cb.getVariableName());
-				if (buf==null) {
-					buf = new StringBuilder();
-					data.put(cb.getVariableName(), buf);
-				}
-				if (event.getErrorMessage()!=null) {
-					buf.append("\n"+event.getErrorMessage());
-				}
-				try {
-					final String value = event.getValue().extractString().trim();
-					logger.debug(value);
-					buf.append("\n"+value);
-				} catch (Exception ne) {
-				    buf.append("\n"+TangoUtils.getMessageFromException(cmd, ne));
-				}
-			}
-		};
-	}
-
-	@Override
-	protected String getOperationName() {
-		return "Get/Set Motor";
-	}
-
-	@Override
-	protected String getExtendedInfo() {
-		return "Actor to set and get motor";
-	}
-	
-	@Override
-	public List<IVariable> getOutputVariables() {
-		
-		try {
-		    final List<IVariable>    ret  = super.getOutputVariables();
-			// TODO Add variables created from bean
-			
-			return ret;
-			
-		} catch (Exception e) {
-			logger.error("Cannot read variables", e);
-			return null;
-		}
-
-	}
-
-	@Override
-	public String getDefaultSubstitution() {
-		return "# Please insert spec macro contents here, and use the view on the left to insert variables.\n";
-	}
-
-	@Override
-	public void setMomlResource(IResource momlFile) {
-		// TODO Auto-generated method stub
-		
-	}
-
-	@Override
-	public int getResourceCount() {
-		return 1;
-	}
-
-	protected IResource getResource(final boolean setParameterValue) throws Exception {
-		
-		String path = specFileParam.getExpression();
-		IFile  file = null;
-		if (path==null || "".equals(path)) {
-			final IProject          project= getProject();
-			final IContainer        src    = project.getFolder("src");
-			file = IFileUtils.getUniqueIFile(src, "macro", "mac");
-			path   = file.getFullPath().toOSString();
-			path   = StringUtil.replace(path, "/"+file.getProject().getName()+"/", "/${project_name}/", true);
-			if (setParameterValue) specFileParam.setExpression(path);
-		}
-		if (ResourcesPlugin.getWorkspace().getRoot().findMember(path) != null)
-			if (ResourcesPlugin.getWorkspace().getRoot().findMember(path).exists()) {
-				file = (IFile) ResourcesPlugin.getWorkspace().getRoot().findMember(path);
-			}		
-		if (file==null) {
-			path = ModelUtils.substitute(path, this);
-			final IProject project= getProject();
-			final String     srcP = IFileUtils.getPathWithoutProject(path.substring(0,path.lastIndexOf('/')));
-			IContainer specDir  = (IContainer)project.findMember(srcP);
-			if (specDir==null) {
-				try {
-					IFolder srcf = project.getFolder(srcP);
-					specDir = srcf;
-				} catch (Exception ne) {
-					logger.error("Cannot create folder "+srcP, ne);
-				}
-			}
-			final String  fileName= path.substring(path.lastIndexOf('/'));
-			file = (IFile)specDir.findMember(fileName);
-			if (file==null&&specDir instanceof IProject) {
-				file = ((IProject)specDir).getFile(fileName);
-			} if (file==null&&specDir instanceof IFolder) {
-				file = ((IFolder)specDir).getFile(fileName);
-			}
-		}
-				
-		return file;
-	}
-
-	@Override
-	public ResourceObject getResource(int iresource) throws Exception {
-		if (iresource==0) {
-			final ResourceObject ret = new ResourceObject();
-			ret.setResource(getResource(false));
-			ret.setResourceTypeName("Spec Macro");
-			ret.setEditorId(SubstitutionEditor.ID);
-			return ret;
-		}
-	    return null;	
-	}
-
-
-	@Override
-	public void partPreopen(ResourceObject ob) {
-		try {
-			final IFile file = (IFile)getResource(true);
-			if (!file.exists()) {
-	        	final InputStream is = new ByteArrayInputStream(getDefaultSubstitution().getBytes("UTF-8"));
-	        	
-	        	if (!file.getParent().exists() && file.getParent() instanceof IFolder) {
-	        		IFolder par = (IFolder)file.getParent();
-	        		par.create(true, true, new NullProgressMonitor());
-	        	}
-	        	
-	        	file.create(is, true, new NullProgressMonitor());
-	        	file.refreshLocal(IResource.DEPTH_ZERO, new NullProgressMonitor());
-			}
-		} catch (Exception ne) {
-			logger.error("Cannot create file "+ob.getResourceTypeName(), ne);
-		}
-	}
-
-	@Override
-	public void partOpened(IWorkbenchPart part, ResourceObject ob) {
-		final SubstitutionEditor ed = (SubstitutionEditor)part;
-		ed.setSubstitutionParticipant(this);
-		part.setFocus();
-	}
-	
-}
Index: src/org/dawb/passerelle/actors/hardware/motor/MotorDialog.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/motor/MotorDialog.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/hardware/motor/MotorDialog.java	(working copy)
@@ -1,111 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.hardware.motor;
-
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.dawb.common.ui.util.GridUtils;
-import org.dawb.passerelle.common.actors.AbstractDataMessageTransformer;
-import org.dawb.passerelle.common.message.IVariable;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Control;
-import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Shell;
-
-import ptolemy.kernel.util.NamedObj;
-import uk.ac.gda.richbeans.components.selector.BeanSelectionEvent;
-import uk.ac.gda.richbeans.components.selector.BeanSelectionListener;
-import uk.ac.gda.richbeans.components.selector.VerticalListEditor;
-import uk.ac.gda.richbeans.dialog.BeanDialog;
-
-public class MotorDialog extends BeanDialog {
-
-	private VerticalListEditor expressions;
-	
-	/**
-	 * Used to check expressions entered.
-	 */
-	private AbstractDataMessageTransformer parent;
-	
-	protected MotorDialog(Shell parentShell, NamedObj container) {
-		super(parentShell);
-		this.parent = (AbstractDataMessageTransformer)container;
-	}
-	
-	public Control createDialogArea(Composite parent) {
-		
-		final Composite main = (Composite)super.createDialogArea(parent);
-		main.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
-		
-		final Label label = new Label(main, SWT.WRAP);
-		label.setText("Set and read motor values here. The expression is used to set value, the motor value is read into a variable of the same name as the motor. For instance if the motor path is 'motors/phi', the motor name is 'phi'. Motors written are always read afterwards and their value passed on.");
-		label.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
-		
-		expressions = new VerticalListEditor(main, SWT.NONE);
-		expressions.setRequireSelectionPack(false);
-		expressions.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
-		expressions.setMinItems(0);
-		expressions.setMaxItems(25);
-		expressions.setDefaultName("motor");
-		expressions.setEditorClass(MotorBean.class);
-		
-		final MotorComposite motorComp = createMotorComposite();
-		expressions.setEditorUI(motorComp);
-		expressions.setNameField("motorName");
-		expressions.setAdditionalFields(new String[]{"expression"});
-		expressions.setColumnWidths(new int[]{100, 300});
-		expressions.setListHeight(150);
-		expressions.addBeanSelectionListener(new BeanSelectionListener() {
-			@Override
-			public void selectionChanged(BeanSelectionEvent evt) {
-				motorComp.updateVisibility();
-			}
-		});
-		
-		GridUtils.setVisibleAndLayout(expressions, true);
-		return main;
-	}
-
-	private MotorComposite createMotorComposite() {
-		
-		final MotorComposite expressionComposite = new MotorComposite(expressions, SWT.NONE);
-		
-		final Map<String,Object> values = new HashMap<String,Object>(7);
-		final List<IVariable>    vars   = parent.getInputVariables();
-		for (IVariable var : vars) {
-			Object value = var.getExampleValue();
-			if (value instanceof String) {
-				try {
-					value = Double.parseDouble((String)value);
-				} catch (Exception igonred) {
-					// Nothing
-				}
-			}
-			values.put(var.getVariableName(), value);
-		}
-		expressionComposite.setExpressionVariables(values);
-		return expressionComposite;
-	}
-
-	public VerticalListEditor getExpressions() {
-		return expressions;
-	}
-	
-	public int open() {
-		expressions.setShowAdditionalFields(true);
-        int ret = super.open();
-        expressions = null;
-        return ret;
-	}
-}
Index: src/org/dawb/passerelle/actors/hardware/motor/MotorBean.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/motor/MotorBean.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/hardware/motor/MotorBean.java	(working copy)
@@ -1,92 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.hardware.motor;
-
-public class MotorBean {
-
-	private String  motorName;
-	private String  expression;
-	private String  attributeName;
-	private boolean readOnly;
-	
-	public MotorBean() {}
-	public MotorBean(String name, String expr) {
-		setMotorName(name);
-		setExpression(expr);
-	}
-	public String getMotorName() {
-		return motorName;
-	}
-	public void setMotorName(String actorName) {
-		this.motorName = actorName;
-	}
-	public String getExpression() {
-		return expression;
-	}
-	public void setExpression(String expression) {
-		this.expression = expression;
-	}
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result
-				+ ((attributeName == null) ? 0 : attributeName.hashCode());
-		result = prime * result
-				+ ((expression == null) ? 0 : expression.hashCode());
-		result = prime * result
-				+ ((motorName == null) ? 0 : motorName.hashCode());
-		result = prime * result + (readOnly ? 1231 : 1237);
-		return result;
-	}
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (obj == null)
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		MotorBean other = (MotorBean) obj;
-		if (attributeName == null) {
-			if (other.attributeName != null)
-				return false;
-		} else if (!attributeName.equals(other.attributeName))
-			return false;
-		if (expression == null) {
-			if (other.expression != null)
-				return false;
-		} else if (!expression.equals(other.expression))
-			return false;
-		if (motorName == null) {
-			if (other.motorName != null)
-				return false;
-		} else if (!motorName.equals(other.motorName))
-			return false;
-		if (readOnly != other.readOnly)
-			return false;
-		return true;
-	}
-	public boolean isReadOnly() {
-		return readOnly;
-	}
-	public boolean getReadOnly() {
-		return readOnly;
-	}
-	public void setReadOnly(boolean isReadOnly) {
-		this.readOnly = isReadOnly;
-	}
-	public String getAttributeName() {
-		return attributeName;
-	}
-	public void setAttributeName(String attributeName) {
-		this.attributeName = attributeName;
-	}
-}
Index: src/org/dawb/passerelle/actors/hardware/motor/MotorComposite.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/motor/MotorComposite.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/hardware/motor/MotorComposite.java	(working copy)
@@ -1,138 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.hardware.motor;
-
-import java.util.Map;
-
-import org.eclipse.jface.fieldassist.ControlDecoration;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Control;
-import org.eclipse.swt.widgets.Label;
-import org.eclipse.ui.forms.events.ExpansionAdapter;
-import org.eclipse.ui.forms.events.ExpansionEvent;
-import org.eclipse.ui.forms.widgets.ExpandableComposite;
-
-import uk.ac.gda.common.rcp.util.GridUtils;
-import uk.ac.gda.richbeans.components.wrappers.BooleanWrapper;
-import uk.ac.gda.richbeans.components.wrappers.TextWrapper;
-import uk.ac.gda.richbeans.event.ValueAdapter;
-import uk.ac.gda.richbeans.event.ValueEvent;
-
-import com.swtdesigner.ResourceManager;
-
-public class MotorComposite extends Composite {
-
-	private TextWrapper motorName,expression,attributeName;
-	private BooleanWrapper readOnly;
-	private Label expressionLabel;
-	private ControlDecoration controlDecoration;
-
-	public MotorComposite(Composite parent, int style) {
-		
-		super(parent, style);
-		setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
-		
-		setLayout(new GridLayout(1, false));
-		
-		final Composite main = new Composite(this, SWT.NONE);
-		main.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
-		main.setLayout(new GridLayout(2, false));
-
-		final Label motorLabel = new Label(main, SWT.NONE);
-		motorLabel.setText("Motor Name");
-		
-		controlDecoration = new ControlDecoration(motorLabel, SWT.LEFT | SWT.TOP);
-		controlDecoration.setImage(ResourceManager.getPluginImage("org.dawb.passerelle.actors", "icons/hardware.gif"));
-		controlDecoration.setDescriptionText("The motor path after the beamline part of the path, for instance 'motors/phi'");
-		
-		this.motorName = new TextWrapper(main, SWT.NONE);
-		motorName.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
-		motorName.setTextLimit(64);
-		
-		final Label readOnlyLabel = new Label(main, SWT.NONE);
-		readOnlyLabel.setText("Read only");
-
-		readOnly = new BooleanWrapper(main, SWT.NO_FOCUS);
-		//readOnly.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
-		readOnly.addValueListener(new ValueAdapter() {
-			@Override
-			public void valueChangePerformed(ValueEvent e) {
-				updateVisibility();
-			}
-		});
-
-		this.expressionLabel = new Label(main, SWT.NONE);
-		expressionLabel.setText("Value");
-		
-		this.expression = new TextWrapper(main, SWT.NONE);
-		expression.setTextType(TextWrapper.TEXT_TYPE.EXPRESSION);
-		expression.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
-		
-
-		final ExpandableComposite advancedComposite = new ExpandableComposite(this, SWT.NONE);
-		advancedComposite.setExpanded(false);
-		advancedComposite.setText("Advanced");
-		advancedComposite.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
-		
-		final Composite advanced = new Composite(this, SWT.NONE);
-		advanced.setLayout(new GridLayout(2, false));
-		advanced.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
-		
-		final Label label = new Label(advanced, SWT.NONE);
-		label.setText("Attribute Name");
-		
-		this.attributeName = new TextWrapper(advanced, SWT.NONE);
-		attributeName.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
-		attributeName.setToolTipText("The attribute name or 'Position' if left blank.");
-		
-		GridUtils.setVisible(advanced, false);
-		ExpansionAdapter expansionListener = new ExpansionAdapter() {
-			@Override
-			public void expansionStateChanged(ExpansionEvent e) {
-				GridUtils.setVisible(advanced, !advanced.isVisible());
-				layout(new Control[]{advanced, advancedComposite});
-				getParent().layout();
-				getParent().getParent().layout();
-			}
-		};
-		advancedComposite.addExpansionListener(expansionListener);
-		
-	}
-
-	public TextWrapper getMotorName() {
-		return motorName;
-	}
-
-	public TextWrapper getExpression() {
-		return expression;
-	}
-	
-	public TextWrapper getAttributeName() {
-		return attributeName;
-	}
-	
-	public BooleanWrapper getReadOnly() {
-		return readOnly;
-	}
-
-	protected void setExpressionVariables(final Map<String, Object> vars) {
-		expression.setExpressionVariables(vars);
-	}
-
-	public void updateVisibility() {
-		GridUtils.setVisible(expressionLabel, !readOnly.getValue().booleanValue());
-		GridUtils.setVisible(expression,      !readOnly.getValue().booleanValue());
-		
-		layout(new Control[]{expressionLabel, expression});
-	}
-}
Index: src/org/dawb/passerelle/actors/hardware/motor/MotorParameter.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/motor/MotorParameter.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/hardware/motor/MotorParameter.java	(working copy)
@@ -1,80 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.hardware.motor;
-
-import org.dawb.passerelle.common.parameter.CellEditorParameter;
-import org.eclipse.jface.dialogs.Dialog;
-import org.eclipse.jface.viewers.CellEditor;
-import org.eclipse.jface.viewers.DialogCellEditor;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Control;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import ptolemy.kernel.util.IllegalActionException;
-import ptolemy.kernel.util.NameDuplicationException;
-import ptolemy.kernel.util.NamedObj;
-
-public class MotorParameter extends CellEditorParameter {
-	
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = 8999174318856900808L;
-	
-	private final static Logger logger = LoggerFactory.getLogger(MotorParameter.class);
-	
-	public MotorParameter(NamedObj container, String name) throws IllegalActionException, NameDuplicationException {
-		super(container, name);
-	}
-	
-	@Override
-	public CellEditor createCellEditor(Control control) {
-		
-		final DialogCellEditor editor = new DialogCellEditor((Composite)control) {
-			@Override
-			protected Object openDialogBox(Control cellEditorWindow) {
-								
-				final MotorDialog dialog = new MotorDialog(cellEditorWindow.getShell(), getContainer()); // extends BeanDialog
-				dialog.create();
-				dialog.getShell().setSize(450,600); // As needed
-				dialog.getShell().setText("Read and Write Motor Values");
-			
-				dialog.setBean(getBeanFromValue(MotorContainer.class));
-		        final int ok = dialog.open();
-		        if (ok == Dialog.OK) {
-		            return getValueFromBean((MotorContainer)dialog.getBean());
-		        }
-		        
-		        return null;
-			}
-		    protected void updateContents(Object value) {
-		        if ( getDefaultLabel() == null) {
-					return;
-				}
-		        getDefaultLabel().setText(getRendererText());
-		    }
-
-		};
-		
-		
-		return editor;
-	}
-	
-
-	/**
-	 * May need to cache here but JFace already does a better job of this than swing.
-	 */
-	@Override
-	public String getRendererText() {
-		return getBeanFromValue(MotorContainer.class).toString();
-	}	
-
-}
Index: src/org/dawb/passerelle/actors/hardware/motor/MotorContainer.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/motor/MotorContainer.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/hardware/motor/MotorContainer.java	(working copy)
@@ -1,100 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.hardware.motor;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class MotorContainer {
-
-	private List<MotorBean> expressions;
-	
-	public MotorContainer() {
-		expressions = new ArrayList<MotorBean>();
-	}
-	
-	public void clear() {
-		if (expressions!=null) expressions.clear();
-	}
-
-	public List<MotorBean> getExpressions() {
-		return expressions;
-	}
-
-	public void setExpressions(List<MotorBean> expressions) {
-		this.expressions = expressions;
-	}
-
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result
-				+ ((expressions == null) ? 0 : expressions.hashCode());
-		return result;
-	}
-
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (obj == null)
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		MotorContainer other = (MotorContainer) obj;
-		if (expressions == null) {
-			if (other.expressions != null)
-				return false;
-		} else if (!expressions.equals(other.expressions))
-			return false;
-		return true;
-	}
-
-
-	public MotorBean getBean(String name) {
-		if (name==null)        return null;
-		if (expressions==null) return null;
-		for (MotorBean b : expressions) {
-			if (name.equals(b.getMotorName())) return b;
-		}
-		return null;
-	}
-	
-	/**
-	 * Constructs user readable version of bean
-	 */
-	public String toString() {
-		if (expressions==null||expressions.isEmpty()) return "No motors set or read, click to edit...";
-		final StringBuilder buf = new StringBuilder();
-		for (MotorBean b : expressions) {
-			if (b.isReadOnly()) {
-				buf.append("read '");
-				buf.append(b.getMotorName());
-				buf.append("'");
-			} else {
-				buf.append("set '");
-				buf.append(b.getMotorName());
-				buf.append("' to ");
-				buf.append(b.getExpression());
-			}
-			buf.append(";  ");
-		}
-		return buf.toString();
-	}
-
-	public int size() {
-		return expressions.size();
-	}
-
-	public boolean isEmpty() {
-		return expressions==null||size()<1;
-	}
-}
Index: src/org/dawb/passerelle/actors/hardware/TangoMotorTransformer.java
===================================================================
--- src/org/dawb/passerelle/actors/hardware/TangoMotorTransformer.java	(revision 1481)
+++ src/org/dawb/passerelle/actors/hardware/TangoMotorTransformer.java	(working copy)
@@ -1,183 +0,0 @@
-/*
- * Copyright (c) 2012 European Synchrotron Radiation Facility,
- *                    Diamond Light Source Ltd.
- *
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- */ 
-package org.dawb.passerelle.actors.hardware;
-
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.management.MBeanServerConnection;
-
-import org.dawb.common.util.ExpressionUtils;
-import org.dawb.common.util.SubstituteUtils;
-import org.dawb.passerelle.actors.hardware.motor.MotorBean;
-import org.dawb.passerelle.actors.hardware.motor.MotorContainer;
-import org.dawb.passerelle.actors.hardware.motor.MotorParameter;
-import org.dawb.passerelle.common.actors.AbstractDataMessageTransformer;
-import org.dawb.passerelle.common.message.DataMessageComponent;
-import org.dawb.passerelle.common.message.DataMessageException;
-import org.dawb.passerelle.common.message.IVariable;
-import org.dawb.passerelle.common.message.IVariable.VARIABLE_TYPE;
-import org.dawb.passerelle.common.message.MessageUtils;
-import org.dawb.passerelle.common.message.Variable;
-import org.dawb.tango.extensions.TangoUtils;
-import org.dawb.tango.extensions.factory.TangoConnection;
-import org.dawb.tango.extensions.factory.TangoConnectionFactory;
-import org.dawb.workbench.jmx.RemoteWorkbenchAgent;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import ptolemy.kernel.CompositeEntity;
-import ptolemy.kernel.util.Settable;
-
-import com.isencia.passerelle.actor.ProcessingException;
-
-import fr.esrf.TangoApi.DeviceAttribute;
-
-/**
- * This actor sets or gets a motor value, if set then value should be set
- * (expands allowed) and if get then motor name should be set only.
- * 
- * @author gerring
- *
- */
-public class TangoMotorTransformer extends AbstractDataMessageTransformer {
-	
-	private static final Logger logger = LoggerFactory.getLogger(TangoMotorTransformer.class);
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = -5335673681296652024L;
-
-	private MotorParameter motorsParam;
-
-	public TangoMotorTransformer(CompositeEntity container, String name) throws Exception {
-		
-		super(container, name);
-		
-		motorsParam  = new MotorParameter(this,"Motors");
-		registerConfigurableParameter(motorsParam);
-		
-		memoryManagementParam.setVisibility(Settable.NONE);
-		dataSetNaming.setVisibility(Settable.NONE);
-	}
-
-	protected int getMinimumCacheSize() {
-		return 0;
-	}
-	
-	@Override
-	protected DataMessageComponent getTransformedMessage(List<DataMessageComponent> cache) throws ProcessingException {
-		
-		try {
-			final MotorContainer cont = (MotorContainer)motorsParam.getBeanFromValue(MotorContainer.class);
-	    	final DataMessageComponent comp = MessageUtils.mergeAll(cache);
-		    
-	    	if (cont == null) {
-		    	comp.putScalar("error_messsage", "No motors configured, '"+getName()+"' did nothing.");
-		    	return comp;
-		    }
-		    
-		    final Map<String,String> values = setMotors(cont, comp);
-	    	if (values!=null) comp.addScalar(values);
-		
-	        return comp;
-	        
-		} catch (Exception e) {
-			throw createDataMessageException("Cannot set motor values!", e);
-		}
-	    
-	}
-
-	private Map<String, String> setMotors(final MotorContainer cont, final DataMessageComponent comp) throws DataMessageException {
-	
-		final Map<String,String> ret = new HashMap<String,String>(cont.size());
-		for (MotorBean mb : cont.getExpressions()) {
-			
-			final String motorPath = SubstituteUtils.substitute(mb.getMotorName(), comp.getScalar());
-			final String baseUri   = TangoUtils.getHardwareAddress(motorPath);
-			String attribute       = mb.getAttributeName();
-			if (attribute==null||"".equals(attribute.trim())) attribute="Position";
-			
-			DeviceAttribute value = null;
-			if (!mb.isReadOnly()) {
-				try {
-					final double dbl = ExpressionUtils.evaluateExpression(mb.getExpression(), comp.getScalar());
-					if (Double.isNaN(dbl) || Double.isInfinite(dbl)) throw new Exception();
-					value = new DeviceAttribute(attribute, dbl);
-					
-				} catch (Exception e) {
-					final String exp = SubstituteUtils.substitute(mb.getExpression(), comp.getScalar());
-					value = new DeviceAttribute(attribute, exp);
-				}
-			}
-			
-			try {
-				final TangoConnection connection = TangoConnectionFactory.openConnection(baseUri, attribute);
-				if (value!=null) {
-					connection.setValue(value);	// Uses remote call for MockMode				
-				}
-				try {				
-					value = connection.getValue();
-				} catch (Exception ne) {
-					logger.debug("Error in TangoMotorTransformer "+getName());
-					logger.debug("Error message: "+ne.getMessage());
-					logger.debug(ne.getStackTrace().toString());
-					value = new DeviceAttribute(attribute, 0.0);
-				}
-				try {
-					final String dblString = String.valueOf(value.extractDouble());
-					ret.put(connection.getName(), dblString);
-				} catch (Exception ne) {
-					ret.put(connection.getName(), String.valueOf(value.extractString()));
-				}
-				
-			} catch (Exception e) {
-				throw createDataMessageException("Cannot connect to "+baseUri, e);
-			}
-			
-			
-		}
-		
-		return ret;
-	}
-
-	@Override
-	protected String getOperationName() {
-		return "Get/Set Motor";
-	}
-
-	@Override
-	protected String getExtendedInfo() {
-		return "Actor to set and get motor";
-	}
-	
-	@Override
-	public List<IVariable> getOutputVariables() {
-		
-		try {
-		    final List<IVariable>    ret  = super.getOutputVariables();
-			final MotorContainer cont = (MotorContainer)motorsParam.getBeanFromValue(MotorContainer.class);
-			if (cont==null || cont.isEmpty()) return ret;
-			
-			for (MotorBean mb : cont.getExpressions()) {
-			    ret.add(new Variable(mb.getMotorName().substring(mb.getMotorName().lastIndexOf('/')+1), VARIABLE_TYPE.SCALAR, mb.getExpression(), String.class));
-			}
-			
-			return ret;
-			
-		} catch (Exception e) {
-			logger.error("Cannot read variables", e);
-			return null;
-		}
-
-	}
-	
-}
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 1481)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -59,10 +59,8 @@
  org.slf4j
 Export-Package: org.dawb.passerelle.actors,
  org.dawb.passerelle.actors.data,
- org.dawb.passerelle.actors.edna,
  org.dawb.passerelle.actors.file,
  org.dawb.passerelle.actors.flow,
- org.dawb.passerelle.actors.hardware,
  org.dawb.passerelle.actors.process,
  org.dawb.passerelle.actors.scripts,
  org.dawb.passerelle.actors.ui,
#P org.dawb.passerelle.actors.edna
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 1481)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -6,3 +6,4 @@
 Bundle-Vendor: DLS Ltd.
 Fragment-Host: org.dawb.passerelle.actors;bundle-version="1.0.0"
 Bundle-RequiredExecutionEnvironment: JavaSE-1.6
+Export-Package: org.dawb.passerelle.actors.edna
Index: cheat/workflow-edna-menu.xml
===================================================================
--- cheat/workflow-edna-menu.xml	(revision 0)
+++ cheat/workflow-edna-menu.xml	(revision 0)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<compositeCheatsheet name="Workflows with EDNA actors">
+   <taskGroup kind="set" name="EDNA Workflow Tutorials" skip="false">
+      <intro>
+         <b>Introduction</b>
+      </intro>
+      <onCompletion>
+         <b>Conclusion</b>
+      </onCompletion>
+      <task kind="cheatsheet" name="Introduction to EDNA actors and workflows" skip="false">
+         <intro>
+            An introduction to using EDNA actors in workflows. This tutorial is subject to being able to set up and run EDNA on your site as well as python and the other EDNA dendencies.
+         </intro>
+         <onCompletion>
+            <b>Conclusion</b>
+         </onCompletion>
+         <param name="path" value="workflow-edna.xml">
+         </param>
+      </task>
+   </taskGroup>
+</compositeCheatsheet>

Property changes on: cheat/workflow-edna-menu.xml
___________________________________________________________________
Added: svn:mime-type
   + text/plain

Index: cheat/workflow-edna.xml
===================================================================
--- cheat/workflow-edna.xml	(revision 0)
+++ cheat/workflow-edna.xml	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<cheatsheet title="Edna">
+<cheatsheet title="Introduction to EDNA actors and workflows">
 
 	<intro>
 		<description>
Index: src/org/dawb/passerelle/actors/edna/ControlCharForReorientationv2_0.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ControlCharForReorientationv2_0.java	(revision 0)
+++ src/org/dawb/passerelle/actors/edna/ControlCharForReorientationv2_0.java	(revision 0)
@@ -0,0 +1,222 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.edna;
+
+import java.util.Properties;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import ptolemy.kernel.CompositeEntity;
+import ptolemy.kernel.util.IllegalActionException;
+import ptolemy.kernel.util.NameDuplicationException;
+
+/**
+ * ControlCharForReorientationv2_0
+ * 
+ * @author svensson
+ * @date March 23, 2011
+ * @project org.edna.passerelle.actors
+ **/
+public class ControlCharForReorientationv2_0 extends AbstractEdnaPlugin {
+
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = -6909806600920182932L;
+	/**
+	 * 
+	 */
+	private final static Logger logger = LoggerFactory.getLogger(ControlCharForReorientationv2_0.class);
+
+	/**
+	 * 
+	 */
+
+	public ControlCharForReorientationv2_0(CompositeEntity container, String name)
+			throws NameDuplicationException, IllegalActionException {
+		super("EDPluginControlCharForReorientationv2_0", container, name);
+
+	}
+	
+	@Override
+	protected String getInputTagName() {
+		return "XSDataInputCharacterisationv2_0";
+	}
+
+	@Override
+	protected String getSchemaLocation() {
+		return "mxv2/datamodel/XSDataMXv2.xsd";
+	}
+
+	@Override
+	protected String getPythonLocation() {
+		return "mxv2/plugins/EDPluginControlCharForReorientation-v2.0/plugins/EDPluginControlCharForReorientationv2_0.py";
+	}
+
+	@Override
+	protected String getExampleOutputLocation() {
+		return "mxv2/plugins/EDPluginControlCharForReorientation-v2.0/tests/data/XSDataResultCharacterisationv2_0_reference.xml";
+	}
+
+	@Override
+	public String getExtendedInfo() {
+		return "MXv2 Char For Reorientation";
+	}
+
+	@Override
+	public String getDefaultInputXML() {
+
+		final StringBuilder buf = new StringBuilder();
+
+		buf.append("<?xml version=\"1.0\" ?>\n");
+		buf.append("<XSDataInputCharacterisationv2_0>\n");
+		buf.append("  <mxv1InputCharacterisation>\n");
+		buf.append("    <dataCollection>\n");
+		buf.append("      <diffractionPlan>\n");
+		buf.append("        <kappaStrategyOption>\n");
+		buf.append("      	  <value>Cell</value>\n");
+		buf.append("        </kappaStrategyOption>\n");
+		buf.append("        <maxExposureTimePerDataCollection>\n");
+		buf.append("          <value>1000.000000</value>\n");
+		buf.append("        </maxExposureTimePerDataCollection>\n");
+		buf.append("        <complexity>\n");
+		buf.append("      	  <value>full</value>\n");
+		buf.append("        </complexity>\n");
+		buf.append("      </diffractionPlan>\n");
+		buf.append("      ${sub_wedges}\n");
+		buf.append("    </dataCollection>\n");
+		buf.append("  </mxv1InputCharacterisation>\n");
+		buf.append("  <mxv2DataCollection>\n");
+		buf.append("     <XSSubWedge>\n");
+		buf.append("        <imagefilenametemplate>\n");
+		buf.append("            <value>ref-testscale_1_###.img</value>\n");
+		buf.append("        </imagefilenametemplate>\n");
+		buf.append("        <XSBeamSetting>\n");
+		buf.append("            <wavelength>\n");
+		buf.append("                <value>1.000000e+00</value>\n");
+		buf.append("            </wavelength>\n");
+		buf.append("            <XSBeam>\n");
+		buf.append("                <polarisatation>\n");
+		buf.append("                    <v1>0.000000e+00</v1>\n");
+		buf.append("                    <v2>1.000000e+00</v2>\n");
+		buf.append("                    <v3>0.000000e+00</v3>\n");
+		buf.append("				</polarisatation>\n");
+		buf.append("                <direction>\n");
+		buf.append("                    <v1>1.000000e+00</v1>\n");
+		buf.append("                    <v2>0.000000e+00</v2>\n");
+		buf.append("                    <v3>0.000000e+00</v3>\n");
+		buf.append("				</direction>\n");
+		buf.append("            </XSBeam>\n");
+		buf.append("        </XSBeamSetting>\n");
+		buf.append("        <XSDiffractionImages>\n");
+		buf.append("            <filename>\n");
+		buf.append("                <value>/home/sudol/work/ednanew/ref-testscale_1_002.img</value>\n");
+		buf.append("            </filename>\n");
+		buf.append("        </XSDiffractionImages>\n");
+		buf.append("        <XSRotationalGoniostatSetting>\n");
+		buf.append("            <baseaxissetting>\n");
+		buf.append("                <value>0.000000e+00</value>\n");
+		buf.append("			</baseaxissetting>\n");
+		buf.append("            <axissetting>\n");
+		buf.append("                <value>9.000000e+01</value>\n");
+		buf.append("			</axissetting>\n");
+		buf.append("            <axissetting>\n");
+		buf.append("                <value>4.000000e+01</value>\n");
+		buf.append("			</axissetting>\n");
+		buf.append("            <XSRotationalGoniostat>\n");
+		buf.append("                <XSGoniostatBaseAxis>\n");
+		buf.append("                    <isscannable>\n");
+		buf.append("                        <value>1</value>\n");
+		buf.append("                    </isscannable>\n");
+		buf.append("                    <name>\n");
+		buf.append("                        <value>Omega</value>\n");
+		buf.append("                    </name>\n");
+		buf.append("                    <XSCalibratedDisplacementAxis>\n");
+		buf.append("                        <zerodirection>\n");
+		buf.append("                            <v1>0.000000e+00</v1>\n");
+		buf.append("                            <v2>0.000000e+00</v2>\n");
+		buf.append("                            <v3>1.000000e+00</v3>\n");
+		buf.append("						</zerodirection>\n");
+		buf.append("                        <XSCalibration>\n");
+		buf.append("                            <date>\n");
+		buf.append("	                           <value>2009-12-10</value>\n");
+		buf.append("                            </date>\n");
+		buf.append("                        </XSCalibration>\n");
+		buf.append("                    </XSCalibratedDisplacementAxis>\n");
+		buf.append("				</XSGoniostatBaseAxis>\n");
+		buf.append("                <XSGoniostatRotatableAxis>\n");
+		buf.append("                    <isscannable>\n");
+		buf.append("                        <value>0</value>\n");
+		buf.append("                    </isscannable>\n");
+		buf.append("                    <name>\n");
+		buf.append("                        <value>Kappa</value>\n");
+		buf.append("                    </name>\n");
+		buf.append("                    <XSCalibratedDisplacementAxis>\n");
+		buf.append("                        <zerodirection>\n");
+		buf.append("                            <v1>0.000000e+00</v1>\n");
+		buf.append("                            <v2>7.071068e-01</v2>\n");
+		buf.append("                            <v3>7.071068e-01</v3>\n");
+		buf.append("						</zerodirection>\n");
+		buf.append("                        <XSCalibration>\n");
+		buf.append("                            <date>\n");
+		buf.append("	                           <value>2009-12-10</value>\n");
+		buf.append("                            </date>\n");
+		buf.append("                        </XSCalibration>\n");
+		buf.append("                    </XSCalibratedDisplacementAxis>\n");
+		buf.append("				</XSGoniostatRotatableAxis>\n");
+		buf.append("                <XSGoniostatRotatableAxis>\n");
+		buf.append("                    <isscannable>\n");
+		buf.append("                        <value>0</value>\n");
+		buf.append("                    </isscannable>\n");
+		buf.append("                    <name>\n");
+		buf.append("                        <value>Phi</value>\n");
+		buf.append("                    </name>\n");
+		buf.append("                    <XSCalibratedDisplacementAxis>\n");
+		buf.append("                        <zerodirection>\n");
+		buf.append("                            <v1>0.000000e+00</v1>\n");
+		buf.append("                            <v2>0.000000e+00</v2>\n");
+		buf.append("                            <v3>1.000000e+00</v3>\n");
+		buf.append("						</zerodirection>\n");
+		buf.append("                        <XSCalibration>\n");
+		buf.append("                            <date>\n");
+		buf.append("	                           <value>2009-12-10</value>\n");
+		buf.append("                            </date>\n");
+		buf.append("                        </XSCalibration>\n");
+		buf.append("                    </XSCalibratedDisplacementAxis>\n");
+		buf.append("				</XSGoniostatRotatableAxis>\n");
+		buf.append("            </XSRotationalGoniostat>\n");
+		buf.append("        </XSRotationalGoniostatSetting>\n");
+		buf.append("        <XSRotationExposure>\n");
+		buf.append("           <imagewidth>\n");
+		buf.append("               <value>1.000000e+00</value>\n");
+		buf.append("			</imagewidth>\n");
+		buf.append("           <numberimages>\n");
+		buf.append("                <value>1</value>\n");
+		buf.append("            </numberimages>\n");
+		buf.append("            <exposuretime>\n");
+		buf.append("                <value>1.000000e+00</value>\n");
+		buf.append("            </exposuretime>\n");
+		buf.append("        </XSRotationExposure>\n");
+		buf.append("    </XSSubWedge>\n");
+		buf.append("  </mxv2DataCollection>\n");
+		buf.append("</XSDataInputCharacterisationv2_0>\n");
+		return buf.toString();
+	}
+
+	@Override
+	public Properties getDefaultOutputProperties() {
+		final Properties props = new Properties();
+		props.put("suggestedStrategy", "//suggestedStrategy");
+		props.put("possibleOrientations", "//possibleOrientations");
+		return props;
+	}
+
+}
Index: src/org/dawb/passerelle/actors/edna/AbstractEdnaPlugin.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/AbstractEdnaPlugin.java	(revision 0)
+++ src/org/dawb/passerelle/actors/edna/AbstractEdnaPlugin.java	(revision 0)
@@ -0,0 +1,825 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.edna;
+
+import java.io.ByteArrayInputStream;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Date;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.dawb.common.python.EDJob;
+import org.dawb.common.python.PythonUtils;
+import org.dawb.common.python.rpc.PythonService;
+import org.dawb.common.util.SubstituteUtils;
+import org.dawb.common.util.io.Grep;
+import org.dawb.common.util.io.IFileUtils;
+import org.dawb.common.util.io.PropUtils;
+import org.dawb.common.util.xml.XMLUtils;
+import org.dawb.passerelle.common.actors.AbstractDataMessageTransformer;
+import org.dawb.passerelle.common.actors.AbstractPassModeTransformer;
+import org.dawb.passerelle.common.message.DataMessageComponent;
+import org.dawb.passerelle.common.message.DataMessageComponent.VALUE_TYPE;
+import org.dawb.passerelle.common.message.IVariable;
+import org.dawb.passerelle.common.message.IVariableProvider;
+import org.dawb.passerelle.common.message.MessageUtils;
+import org.dawb.passerelle.common.message.XPathVariable;
+import org.dawb.passerelle.editors.EdnaActorMultiPageEditor;
+import org.dawb.passerelle.editors.SubstitutionParticipant;
+import org.dawb.passerelle.editors.XPathParticipant;
+import org.eclipse.core.resources.IContainer;
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IFolder;
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.ui.PlatformUI;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import ptolemy.actor.Actor;
+import ptolemy.actor.ExecutionListener;
+import ptolemy.actor.Manager;
+import ptolemy.actor.util.Time;
+import ptolemy.data.BooleanToken;
+import ptolemy.data.expr.Parameter;
+import ptolemy.data.expr.StringParameter;
+import ptolemy.kernel.CompositeEntity;
+import ptolemy.kernel.util.Attribute;
+import ptolemy.kernel.util.IllegalActionException;
+import ptolemy.kernel.util.NameDuplicationException;
+import ptolemy.kernel.util.Settable;
+
+import com.isencia.passerelle.actor.InitializationException;
+import com.isencia.passerelle.actor.ProcessingException;
+import com.isencia.passerelle.util.ptolemy.ResourceParameter;
+import com.isencia.passerelle.workbench.model.actor.IResourceActor;
+import com.isencia.passerelle.workbench.model.actor.ResourceObject;
+import com.isencia.passerelle.workbench.model.utils.ModelUtils;
+
+public abstract class AbstractEdnaPlugin extends AbstractDataMessageTransformer implements Actor, IResourceActor, IVariableProvider, SubstitutionParticipant, XPathParticipant {
+	
+	private static String[] PYLINK_CHOICES      = new String[]{"RPC",    "Jep"};
+	private static String[] PYDEBUG_CHOICES     = new String[]{"Start new python rcp server",    "Python rpc server already running"};
+
+	private static Logger logger = LoggerFactory.getLogger(AbstractEdnaPlugin.class);
+	
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = 1551436102354087550L;
+	
+	
+	protected StringParameter pluginParam;
+	protected String          plugin;
+	
+	protected ResourceParameter inputParam;
+	protected String            inputString;
+
+	protected ResourceParameter outputParam;
+	protected String            output;
+	
+	private final Parameter             passInputsParameter;
+	private final Parameter             debugModeParameter;
+	private final Parameter             enableChangeWorkingDirParameter;
+	private boolean                     isPassInputs = true;
+	private boolean                     isDebugMode = false;
+	private boolean                     isEnabledChangeWorkingDir = false;
+	
+	private StringParameter             pythonCommand;
+	private StringParameter             pythonLink;
+	private StringParameter             pythonDebug;
+	
+
+	public AbstractEdnaPlugin(final String          pluginName,
+			                  final CompositeEntity container, 
+			                  final String          name) throws NameDuplicationException, IllegalActionException {
+		super(container, name);
+		
+		pluginParam = new StringParameter(this, "Plugin Name");
+		registerExpertParameter(pluginParam);
+		pluginParam.setExpression(pluginName);
+		this.plugin = pluginName;
+		
+		inputParam = new ResourceParameter(this, "Input Template", "XML File", "*.xml");
+		registerConfigurableParameter(inputParam);
+		
+		outputParam = new ResourceParameter(this, "Output Template", "XML File", "*.xml");
+		registerConfigurableParameter(outputParam);
+
+		passModeParameter.setExpression(EXPRESSION_MODE.get(1));
+		memoryManagementParam.setVisibility(Settable.NONE);
+		dataSetNaming.setVisibility(Settable.NONE);
+		
+		passInputsParameter = new Parameter(this,"Pass Inputs On",new BooleanToken(true));
+		registerConfigurableParameter(passInputsParameter);
+
+		debugModeParameter = new Parameter(this,"Debug mode",new BooleanToken(false));
+		registerConfigurableParameter(debugModeParameter);
+
+		enableChangeWorkingDirParameter = new Parameter(this,"Enable change to edna_working_dir",new BooleanToken(true));
+		registerConfigurableParameter(enableChangeWorkingDirParameter);
+		
+		pythonCommand = new StringParameter(this, "Python Interpreter Command");
+		registerConfigurableParameter(pythonCommand);
+		pythonCommand.setExpression(PythonUtils.getPythonInterpreterCommand());
+
+		// Expert param for changing between Jep and RPC
+		pythonLink = new StringParameter(this,"Python Link") {
+
+			public String[] getChoices() {
+				return PYLINK_CHOICES;
+			}
+		};
+		registerExpertParameter(pythonLink);
+		pythonLink.setExpression(PYLINK_CHOICES[0]);
+		
+		// Expert param for turning on debug python server
+		pythonDebug = new StringParameter(this,"Python Debug") {
+
+			public String[] getChoices() {
+				return PYDEBUG_CHOICES;
+			}
+		};
+		registerExpertParameter(pythonDebug);
+		pythonDebug.setExpression(PYDEBUG_CHOICES[0]);
+	}
+	
+	public void attributeChanged(Attribute attribute) throws IllegalActionException {
+		
+		if (attribute == pluginParam) {
+			plugin = pluginParam.getExpression();
+		} else if (attribute == inputParam) {
+			inputString = inputParam.getExpression();
+		} else if (attribute == passInputsParameter) {
+			final BooleanToken b = (BooleanToken) passInputsParameter.getToken();
+			isPassInputs = b.booleanValue();
+		} else if (attribute == debugModeParameter) {
+			final BooleanToken b = (BooleanToken) debugModeParameter.getToken();
+			isDebugMode = b.booleanValue();
+		} else if (attribute == enableChangeWorkingDirParameter) {
+			final BooleanToken b = (BooleanToken) enableChangeWorkingDirParameter.getToken();
+			isEnabledChangeWorkingDir = b.booleanValue();
+		} else if (attribute == outputParam) {
+			output = outputParam.getExpression();
+		}
+		
+	    super.attributeChanged(attribute);
+		
+	}
+	
+	protected static PythonService sharedService;
+	protected static String        managerName;
+	
+	public boolean doPreFire() throws ProcessingException {
+		
+        final boolean ret = super.doPreFire();
+		
+        if (PYLINK_CHOICES[0].equals(pythonLink.getExpression())) {
+        	
+        	// Create a new python interpreter if the name of the Manager has changed,
+        	// The name of the Manager must always be unique for this to work
+			final String manName = getManager().getName();
+			if (sharedService==null || !manName.equals(managerName)) {
+				
+				final boolean isRpcDebug = PYDEBUG_CHOICES[1].equals(pythonDebug.getExpression());
+				
+				try {
+	                if (isRpcDebug) { // The python server could be running in a pydev session!
+		                              // Very handy for debugging the python
+		            	sharedService = PythonService.openClient(PythonService.getDebugPort());
+		            } else {
+		            	// Normally start an interpreter and connect to it on a free port.
+		            	sharedService = PythonService.openConnection(pythonCommand.getExpression());
+		            } 
+	                
+	                getManager().addExecutionListener(new ExecutionListener() {
+
+						@Override
+						public void executionFinished(Manager manager) {
+							sharedService.stop();
+						}
+
+						@Override
+						public void managerStateChanged(Manager manager) { }
+	                	
+						@Override
+						public void executionError(Manager manager, Throwable throwable) {}
+
+	                });
+	                
+				} catch (Exception ne) {
+					throw new ProcessingException("Cannot start python connection!", this, ne);
+				}
+	
+	            managerName = manName;
+			}
+        }
+		
+		return ret;
+	}
+
+	/**
+	 * Should return the file path to the schema file for this plugin.
+	 * This is a relative path to the workspace folder.
+	 * 
+	 * For instance "edna/execPlugins/plugins/EDPluginExecThumbnail-v1.0/datamodel/XSDataExecThumbnail.xsd"
+	 * 
+	 * Use / and not \
+	 * 
+	 * @return
+	 */
+	protected abstract String getSchemaLocation();
+	
+	/**
+	 * Should return the file path to the schema file for this plugin.
+	 * This is a relative path to the workspace folder.
+	 * 
+	 * For instance "edna/execPlugins/plugins/EDPluginExecThumbnail-v1.0/datamodel/XSDataExecThumbnail.xsd"
+	 * 
+	 * Use / and not \
+	 * 
+	 * @return
+	 */
+	protected abstract String getPythonLocation();
+	
+	
+	/**
+	 * The original idea for this method was to use the schema to generate
+	 * some default input xml. Just as the action Generate ->Xml doe in eclipse
+	 * on a xsd file.
+	 * 
+	 * However the xml was not really good enough for the default input. It turns
+	 * out better for each actor to provide the default XML.
+	 */
+	public abstract String getDefaultInputXML();
+	
+	/**
+	 * Please provide an implementation to return an example output xml in the
+	 * edna folder for using as a practice value to run xpaths on.
+	 */
+	protected abstract String getExampleOutputLocation();
+	
+	/**
+	 * Returns key value pairs for the variables and their corresponding
+	 * xpath values or a string describing the parameter.
+	 * 
+	 * @param message
+	 * @throws ProcessingException
+	 */
+	public abstract Properties getDefaultOutputProperties();
+
+	@SuppressWarnings("unused")
+	@Override
+	protected DataMessageComponent getTransformedMessage(List<DataMessageComponent> cache) throws ProcessingException {
+		
+	
+		String  outputXML = null;
+		IFolder ednaWkDir = null;
+		try {
+			ednaWkDir = getEdnaWorkingDirFolder();
+			String lastDir = ednaWkDir.getLocation().lastSegment();
+			String absPathToWorkingDir = ednaWkDir.getLocation().toOSString();
+			if (isEnabledChangeWorkingDir) {
+				for (DataMessageComponent dataMessageComponent : cache) {
+					if (dataMessageComponent.getScalar()!=null) {
+						for (String name : dataMessageComponent.getScalar().keySet()) {						
+							if (name.equals("edna_working_dir")) {
+								absPathToWorkingDir = dataMessageComponent.getScalar().get(name)+"/"+lastDir;
+								boolean success = (new File(absPathToWorkingDir)).mkdirs();
+								if (!success) {
+									logger.warn("Cannot create EDNA working directory: "+absPathToWorkingDir);
+									absPathToWorkingDir = ednaWkDir.getLocation().toOSString();
+									logger.warn("Reverting back to workspace location: "+absPathToWorkingDir);
+								}
+							}
+						}
+					}
+				}
+			}
+			
+            final EDJob  job  = new EDJob(sharedService, plugin, absPathToWorkingDir);
+    		final String xml  = getDataInput(cache);
+            job.setDataInput(xml);
+            job.setDebugMode(isDebugMode);
+            job.execute();
+            
+            outputXML = job.getDataOutput();
+            
+            // We get the variables to pass on
+            final Map      stringProperties = PropUtils.loadProperties(getOutputFile().getContents());
+		    final Map<String,String> xPaths = XPathVariable.getXPaths(stringProperties);
+		    final Map<String,String> rename = XPathVariable.getRenames(stringProperties);
+		    final Map<String,String>     in = MessageUtils.getValues(cache, xPaths.keySet(), this);
+		    
+		    
+			if (xPaths==null) {
+				throw createDataMessageException("Cannot run edna task "+getName()+", the xpaths could not be found!", null);
+			}
+			if (in==null) {
+				throw createDataMessageException("Cannot run edna task "+getName()+", the xpath existing variables could not be extracted!", null);
+			}
+			if (outputXML==null || "".equals(outputXML)) {
+				throw createDataMessageException("Cannot run edna task "+getName()+", the output XML is null!", null);
+			}
+			
+			final DataMessageComponent despatch = new DataMessageComponent();
+			final Map<String,String>   outputs  = XMLUtils.getVariables(xPaths, outputXML, in);				
+			transformNames(outputs, rename);
+			transformOutputValues(outputs);
+			
+			despatch.setMeta(MessageUtils.getMeta(cache));
+			if (isPassInputs) {
+				final Map<String,String> upStreamScalar = MessageUtils.getScalar(cache);
+			    despatch.addScalar(upStreamScalar);
+			}
+			despatch.addScalar(outputs, true);
+			assignAdditiveProperties(despatch, xPaths);
+
+			return despatch;
+            
+		} catch (Throwable ne) {
+			logger.error("Output XML from "+getName()+" may be invalid. It is:\n"+outputXML);
+			throw createDataMessageException("Cannot run edna task "+plugin, ne);
+			
+		} finally {
+			try {
+	            if (ednaWkDir!=null) {
+	            	ednaWkDir.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
+	    			AbstractPassModeTransformer.refreshResource(ednaWkDir.getProject());
+	            }
+			} catch (Throwable ne) {
+				logger.error("Cannot refresh folder "+ednaWkDir);
+				throw createDataMessageException("Cannot run edna task "+plugin, ne);
+			}
+		}
+
+	}
+
+	/**
+	 * Project used to get edna resources. 
+	 * 
+	 * You may set a system property org.dawb.edna.project.name to
+	 * change the default project, or override this method.
+	 * 
+	 * @return
+	 */
+	
+	public String getEdnaProject() {
+		return System.getenv("EDNA_HOME");
+	}
+
+	
+	private void assignAdditiveProperties(final DataMessageComponent despatch, final Map outputs) {
+		
+		for (Object key : outputs.keySet()) {
+			if (outputs.get(key)==null || "".equals(outputs.get(key))) continue;
+			despatch.setValueType(key.toString(), VALUE_TYPE.OVERWRITE_STRING);
+		}
+	}
+
+	protected String getDataInput(List<DataMessageComponent> cache) throws Exception {
+		
+		final IFile              file = getInputFile();
+		final List<CharSequence> referencedVars = XMLUtils.getVariables(file);
+		final Map<String,String> variables = MessageUtils.getValues(cache, referencedVars, this);
+		return SubstituteUtils.substitute(file.getContents(), variables);
+	}
+
+	@Override
+	public int getResourceCount() {
+		return 2;
+	}
+	
+	@Override
+	public ResourceObject getResource(int num) {
+		
+		if (num==0) {
+			final ResourceObject ret = new ResourceObject();
+			ret.setResource(getLinkerFile());
+			ret.setResourceTypeName("Linker");
+			ret.setEditorId(EdnaActorMultiPageEditor.ID);
+			return ret;
+		} else {
+			final ResourceObject ret = new ResourceObject();
+			final File res = new File(getEdnaProject() + "/" + getPythonLocation());
+			ret.setResource(res);
+			ret.setResourceTypeName("'"+plugin+"'");
+			return ret;
+		}
+	}
+	
+	protected String getOutputTagName() throws Exception {
+		String tag = getInputTagName();
+		tag = tag.replace("Input", "Output");
+		tag = tag.replace("input", "output");
+		return tag;
+	}
+	
+	private String cachedTagName = null;
+	/**
+	 * Should return the name of the XSData input object
+	 * 
+	 * @return
+	 * @throws Exception 
+	 */
+	abstract protected String getInputTagName() throws Exception;
+	
+
+	private IResource momlFile;
+	
+	@Override
+	public void setMomlResource(IResource momlFile) {
+		this.momlFile = momlFile;
+	}
+
+	/**
+	 * Creates or reuses a properties file in the workspace
+	 * which carries the properties for the three (or so)
+	 * files needed to link an edna node.
+	 * 
+	 * Method can be called a lot, needs to be fast.
+	 * 
+	 * @return
+	 */
+	private IResource getLinkerFile() {
+		
+		if (!PlatformUI.isWorkbenchRunning() || momlFile==null) return null;
+		
+		IFolder edna = null;
+		try {
+			edna = getEdnaXmlFolder();
+			
+			final StringBuilder props = new StringBuilder();
+			props.append("org.dawb.edna.name = ");
+			props.append(getName());
+			props.append("\n");
+
+			props.append("org.dawb.edna.moml = ");
+			props.append(momlFile.getFullPath().toString());
+			props.append("\n");
+			
+			props.append("org.dawb.edna.input = ");
+			props.append(getInputFile().getFullPath().toString());
+			props.append("\n");
+
+			props.append("org.dawb.edna.output = ");
+			props.append(getOutputFile().getFullPath().toString());
+			props.append("\n");
+			
+			props.append("org.dawb.edna.schema = ");
+			props.append(getEdnaProject()+"/"+getSchemaLocation());
+			props.append("\n");
+		
+			final IFile linker = edna.getFile(getName()+".properties");
+			if (linker.exists()) linker.delete(true, new NullProgressMonitor());
+			final InputStream is = new ByteArrayInputStream(props.toString().getBytes("UTF-8"));
+			linker.create(is, true, new NullProgressMonitor());
+			linker.setHidden(true);
+			
+			return linker;
+			
+		} catch (Exception ne) {
+			logger.error("Cannot create input xml!", ne);
+		} 
+        return null;
+	}
+
+	/**
+	 * Creates one if its not there.
+	 * @return
+	 */
+	protected IFile getInputFile() {
+		try {
+		    return getFileForParameter(inputParam, getInputTagName(), "xml", getDefaultInputXML());
+		} catch (Exception ne) {
+			logger.error("Cannot create input xml!", ne);
+			return null;
+		}
+	}
+	
+	/**
+	 * Creates one if its not there.
+	 * @return
+	 */
+	protected IFile getOutputFile() {
+		try {
+	        final String out = PropUtils.getPropertiesAsString(getDefaultOutputProperties());
+		    return getFileForParameter(outputParam, getOutputTagName(), "properties", out);
+		} catch (Exception ne) {
+			logger.error("Cannot create input xml!", ne);
+			return null;
+		}
+	}
+
+	/**
+	 * Must return a real existing file which is used to 
+	 * create the input to the edna node.
+	 * 
+	 * @return
+	 */
+	private IFile getFileForParameter(final ResourceParameter param,
+							          final String            tag,
+							          final String            ext,
+			                          final String            defaultXml) throws Exception {
+
+ 	    synchronized (param) {
+			
+ 	    	String path = param.getExpression();
+ 	    	path = ModelUtils.substitute(path, this);
+ 	    	IFile file = null;
+			// We generate a template input file if one does not exist.
+			// This is only applicable in the UI.
+	        // In the workflow, this file must have been set.
+ 	    	if (!path.equals("")) {
+ 	    		file = (IFile) ResourcesPlugin.getWorkspace().getRoot().findMember(path);
+ 	    		logger.debug("Linker getFileForParameter path="+path);
+ 	    	}
+			final IFolder edna = getEdnaXmlFolder();
+	        if ( file == null) {
+	        	file = IFileUtils.getUniqueIFile(edna, tag, ext);
+	        	param.setExpression(file.getFullPath().toString());
+	        	logger.debug("Linker new input file: "+file.getFullPath().toString());
+	        } else {
+	        	param.setExpression(file.getFullPath().toString());
+	        	logger.debug("Linker existing input file: "+file.getFullPath().toString());
+	        }
+	        	
+	        
+	        if (!file.exists()) {
+		        // Only create a new file if we are not running through jmx!
+	        	if ( (System.getProperty("org.dawb.worbench.jmx.service") == null) || (!System.getProperty("org.dawb.worbench.jmx.service").equals("true")) ) {
+	        		logger.debug("Linker input file doesn't exist, we create one");
+	        		final InputStream is = new ByteArrayInputStream(defaultXml.getBytes("UTF-8"));
+	        		file.create(is, true, new NullProgressMonitor());
+	        		file.refreshLocal(IResource.DEPTH_ZERO, new NullProgressMonitor());
+	        	} else {
+	        		throw createDataMessageException("Cannot run edna task "+getName()+", the linker path(s) could not be found!", null);
+	        	}
+	        }
+			// Happens when model run in model runner
+			return file;
+	    }
+	}
+
+
+
+	private IFolder getEdnaXmlFolder() throws Exception {
+		
+		final IContainer cont = getProject();
+
+		// Sub directory for the input file.
+		final IFolder edna = cont.getFolder(new Path("edna-xml"));
+		if (!edna.exists()) {
+			try {
+				edna.create(true, true, new NullProgressMonitor());
+			} catch (Exception ne) {
+				logger.error("Did not create new folder "+edna.getName(), ne);
+			}
+		}
+		
+		return edna;
+	}
+	
+	private static final DateFormat DATE_FOLDER = new SimpleDateFormat("yyyyMMdd_HHmmss");
+	private static final Object     LOCK        = new Object();
+	
+	private IFolder getEdnaWorkingDirFolder() throws Exception {
+		
+		final IProject cont = getProject();
+		logger.debug("Containing project is "+cont);
+
+		// Sub directory for the input file.
+		final IFolder edna = cont.getFolder("edna-working-dir");
+		
+		// Best to use single lock blocks or lock entire methods.
+		synchronized (LOCK) {
+			if (!edna.exists()) {
+				edna.create(true, true, new NullProgressMonitor());
+			}
+
+			Time   time       = getDirector()!=null
+			                  ? getDirector().getModelTime()
+			                  : new Time(null, 0);
+			if (time.getLongValue()<=0)  {
+				time = new Time(getDirector(), System.currentTimeMillis());
+				if (getDirector()!=null) getDirector().setModelTime(time);
+			}
+			final String timeFolder = DATE_FOLDER.format(new Date(time.getLongValue()));
+			
+			final IFolder dir = edna.getFolder(timeFolder);
+			if (!dir.exists()) {
+				dir.create(true, true, new NullProgressMonitor());
+			}
+			
+			return dir;
+		}
+	}
+
+	public List<IVariable> getInputVariables() {
+		
+		final List<IVariable> inputs = new ArrayList<IVariable>(7);
+		final List<String>    names  = new ArrayList<String>(7);
+		
+		final List<IVariable> vars = super.getInputVariables();				
+		for (IVariable input : vars) {
+			if (!names.contains(input.getVariableName())) {
+				inputs.add(input);
+				names.add(input.getVariableName());
+			}
+		}
+
+		return inputs;
+	}
+
+	/**
+	 * returns only the outputs from this plugin, not upstream ones.
+	 * @return
+	 * @throws CoreException 
+	 * @throws IOException 
+	 */
+	public boolean isDefinitelyLocalOutput(final String name) throws IOException, CoreException {
+		final Properties outputs  = PropUtils.loadProperties(getOutputFile().getContents());
+		return outputs.containsKey(name);
+	}
+	/**
+	 * Can be used to manipulate the output variable values after they
+	 * have been evaluated. Bu default does nothing.
+	 * 
+	 * @param outputs
+	 */
+	protected void transformOutputValues(Map<String, String> outputs) {
+		// TODO Auto-generated method stub
+		
+	}
+	
+	protected void transformNames(Map<String, String> outputs,
+			                      Map<String, String> renames) {
+		
+		if (renames==null||renames.isEmpty()) return;
+		for (String name : renames.keySet()) {
+			final String rename = renames.get(name);
+			final String value  = transformName(outputs.get(name), rename);
+	        outputs.put(name, value);
+		}
+	}
+	
+	private static final Pattern FIRST_TAG = Pattern.compile("\\<([a-zA-Z0-9_]+)( |\\>).*", Pattern.DOTALL);
+	
+	private String transformName(String value, final String rename) {
+		
+		if (rename==null||value==null) return value;
+		if ("".equals(rename)||"".equals(value)) return value;
+
+		final Matcher matcher = FIRST_TAG.matcher(value.trim());
+		if (!matcher.matches()) return value;
+        final String  tag     = matcher.group(1);
+        
+        value = value.replace("<"+tag+">",  "<"+rename+">");
+        value = value.replace("<"+tag+"/>", "<"+rename+"/>");
+        value = value.replace("<"+tag+" ",  "<"+rename+" ");
+        value = value.replace("</"+tag+">", "</"+rename+">");
+        
+        return value;
+	}
+
+	/**
+	 * Can be used to manipulate the output variable values after they
+	 * have been evaluated. Bu default does nothing.
+	 * 
+	 * @param outputs
+	 */
+	protected void transformExampleValue(IVariable var) {
+		
+		if (var instanceof XPathVariable) {
+			final XPathVariable xp = (XPathVariable)var;
+			if (getExampleOutputLocation()!=null) {
+				xp.setExampleValue(getExampleValueFromFile(getExampleOutputLocation(), xp.getxPath(), xp.getRename()));
+			}
+		}
+ 		
+	}
+
+	/**
+	 * Uses the data to get a subWedge example
+	 * @return
+	 */
+	protected String getExampleValueFromFile(final String filePath, final String xPath, final String rename) {
+
+		//final IFile file = (IFile)getEdnaProject().findMember(filePath);
+		final File file = new File(getEdnaProject() + "/" + filePath);
+	    try {
+			String value = XMLUtils.getXPathValue(file, xPath);
+			value        = transformName(value, rename);
+			return value;
+	    } catch (Exception ne) {
+	    	logger.error("Cannot parse "+file, ne);
+	    	return null;
+	    }
+	}
+	
+	public String getExampleValue(final String xPath, final String rename) {
+		return getExampleValueFromFile(getExampleOutputLocation(), xPath, rename); 
+	}
+
+	@Override
+	protected String getOperationName() {
+		return plugin;
+	}
+
+	/**
+	 * Use to reset editor 
+	 */
+	public String getDefaultSubstitution() {
+		return getDefaultInputXML();
+	}
+	
+	public boolean isUpstreamVariable(final String name) {
+		
+		try {
+			final Properties xpathsInFile =  PropUtils.loadProperties(getOutputFile().getContents());
+			if (xpathsInFile.containsKey(name)) return false; // We overwrite it here.
+		} catch (Exception e) {
+			logger.error("Cannot read properties file!", e);
+		}
+		return super.isUpstreamVariable(name);
+	}	
+	
+	
+	/**
+	 * This method reads the output file and returns the 
+	 * variable names defined in the output file.
+	 * 
+	 * You can override this method to return the variables from
+	 * both upstream nodes and xpath variables.
+	 * 
+	 * The file is a properties file.
+	 */
+	public List<IVariable> getOutputVariables() {
+
+		final List<IVariable> xpaths = getXPathVariables();
+		final List<IVariable> ret;
+		if (isPassInputs) {
+			ret =  getInputVariables();
+		} else {
+			ret = new ArrayList<IVariable>(xpaths.size());
+		}
+		ret.addAll(xpaths);
+
+		return ret;
+	}
+
+	/**
+	 * XPaths local to this object
+	 */
+	public List<IVariable> getXPathVariables() {
+		
+		try {
+			final IFile      outputProps = getOutputFile();
+			final Properties outputs     = PropUtils.loadProperties(outputProps.getContents());
+			final List<IVariable> ret    = new ArrayList<IVariable>(outputs.size());;
+
+			for (Object varName : outputs.keySet()) {
+				final String variableName = (String)varName;
+				final String saveString   = outputs.getProperty(variableName);
+				if (saveString!=null&&!"".equals(saveString)) {
+
+					final IVariable iVariable = new XPathVariable(variableName, saveString);
+					transformExampleValue(iVariable);
+					ret.add(iVariable);
+				} 
+			}
+			return ret;
+		} catch (Exception ne) {
+			logger.error("Cannot read output properties "+getOutputFile(), ne);
+		}
+		return Collections.emptyList();
+	}
+
+	public List<IVariable> getUpstreamVariables() {
+		if (isPassInputs) {
+			return  getInputVariables();
+		} else {
+			return Collections.emptyList();
+		}
+	}
+}
Index: src/org/dawb/passerelle/actors/edna/ControlIndexingv10.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ControlIndexingv10.java	(revision 0)
+++ src/org/dawb/passerelle/actors/edna/ControlIndexingv10.java	(revision 0)
@@ -0,0 +1,92 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.edna;
+
+
+import java.util.Properties;
+
+import ptolemy.kernel.CompositeEntity;
+import ptolemy.kernel.util.IllegalActionException;
+import ptolemy.kernel.util.NameDuplicationException;
+
+/**
+ *   EdnaPluginTransformer, copied from delay action.
+ *
+ *   @author svensson
+ *   @date Feb 15, 2011
+ *   @project org.edna.passerelle.actors
+ **/
+public class ControlIndexingv10 extends AbstractEdnaPlugin {
+	
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = -8681186522590444596L;
+
+	public ControlIndexingv10(CompositeEntity container, String name) throws NameDuplicationException, IllegalActionException {
+		super("EDPluginControlIndexingv10", container, name);
+
+	}
+	
+	@Override
+	protected String getInputTagName() {
+		return "XSDataInputIndexing";
+	}
+	
+	
+	protected String getSchemaLocation() {
+		return "/mxv1/datamodel/XSDataMXv1.xsd";
+	}
+	
+	@Override
+	protected String getPythonLocation() {
+		return "/mxv1/plugins/EDPluginControlIndexing-v1.0/plugins/EDPluginControlIndexingv10.py";
+	}
+
+	@Override
+	protected String getExampleOutputLocation() {
+		return "/mxv1/plugins/EDPluginControlIndexing-v1.0/tests/data/XSDataIndexingResult_reference.xml";
+	}
+
+	@Override
+	public String getExtendedInfo() {
+		return "MXv1 Indexing";
+	}
+
+	@Override
+	public String getDefaultInputXML() {
+		
+		final StringBuilder buf = new StringBuilder();
+		
+		buf.append("<?xml version=\"1.0\" ?>\n");
+		buf.append("<XSDataIndexingInput>\n");
+		buf.append("    <dataCollection>\n");
+		buf.append("      ${sub_wedges}\n");
+		buf.append("    </dataCollection>\n");
+		buf.append("    ${experimental_condition}\n");
+		buf.append("</XSDataIndexingInput>\n");
+		
+		return buf.toString();
+	}
+
+	@Override
+	public Properties getDefaultOutputProperties() {
+		final Properties props = new Properties();
+		props.put("file_dir",  "");
+		props.put("file_path", "");
+		props.put("crystal_content", "//selectedSolution/crystal/*");
+		props.put("image_paths", "//predictionResult/predictionImage/path/value/text()");
+		props.put("selectedSolution_content", "//selectedSolution/*");
+		props.put("experimentalConditionRefined_content", "//experimentalConditionRefined/*");
+		return props;
+	}
+
+
+}
Index: src/org/dawb/passerelle/actors/edna/ControlIntegrationv10.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ControlIntegrationv10.java	(revision 0)
+++ src/org/dawb/passerelle/actors/edna/ControlIntegrationv10.java	(revision 0)
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.edna;
+
+import java.util.Properties;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import ptolemy.kernel.CompositeEntity;
+import ptolemy.kernel.util.IllegalActionException;
+import ptolemy.kernel.util.NameDuplicationException;
+
+/**
+ * EdnaPluginTransformer, copied from delay action.
+ * 
+ * @author svensson
+ * @date Feb 15, 2011
+ * @project org.edna.passerelle.actors
+ **/
+public class ControlIntegrationv10 extends AbstractEdnaPlugin {
+
+	private final static Logger logger = LoggerFactory.getLogger(ControlIntegrationv10.class);
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = -8749832798743297984L;
+
+	public ControlIntegrationv10(CompositeEntity container,
+			String name) throws NameDuplicationException,
+			IllegalActionException {
+		super("EDPluginControlIntegrationv10", container, name);
+
+	}
+
+	@Override
+	protected String getInputTagName() {
+		return "XSDataInputIntegration";
+	}
+
+	@Override
+	protected String getSchemaLocation() {
+		return "/mxv1/datamodel/XSDataMXv1.xsd";
+	}
+
+	@Override
+	protected String getPythonLocation() {
+		return "mxv1/plugins/EDPluginControlIntegration-v1.0/plugins/EDPluginControlIntegrationv10.py";
+	}
+
+	@Override
+	protected String getExampleOutputLocation() {
+		return "mxv1/plugins/EDPluginControlIntegration-v1.0/tests/data/XSDataIntegrationResult_reference.xml";
+	}
+
+	@Override
+	public String getExtendedInfo() {
+		return "MXv1 Integration";
+	}
+
+	@Override
+	public String getDefaultInputXML() {
+
+		final StringBuilder buf = new StringBuilder();
+
+		buf.append("<?xml version=\"1.0\" ?>\n");
+		buf.append("<XSDataIntegrationInput>\n");
+		buf.append("    <dataCollection>\n");
+		buf.append("      ${sub_wedges}\n");
+		buf.append("    </dataCollection>\n");
+		buf.append("    <selectedIndexingSolution>\n");
+		buf.append("      ${selectedSolution_content}\n");
+		buf.append("    </selectedIndexingSolution>\n");
+		buf.append("    <experimentalConditionRefined>\n");
+		buf.append("      ${experimentalConditionRefined_content}\n");
+		buf.append("    </experimentalConditionRefined>\n");
+		buf.append("</XSDataIntegrationInput>\n");
+
+		return buf.toString();
+	}
+
+	@Override
+	public Properties getDefaultOutputProperties() {
+		final Properties props = new Properties();
+		props.put("file_dir", "");
+		props.put("file_path", "");
+		props.put("bestfilePar_content", "//bestfilePar/*");
+		props.put("bestfileDat_content", "//bestfileDat/*");
+		props.put("bestfileHKL_content", "//bestfileHKL/*");
+		props.put("experimental_ConditionRefined_content", "//experimentalConditionRefined/*");
+		return props;
+	}
+
+}
Index: src/org/dawb/passerelle/actors/edna/ControlCharAtNewOrientationv2_0.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ControlCharAtNewOrientationv2_0.java	(revision 0)
+++ src/org/dawb/passerelle/actors/edna/ControlCharAtNewOrientationv2_0.java	(revision 0)
@@ -0,0 +1,86 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.edna;
+
+import java.util.Properties;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import ptolemy.kernel.CompositeEntity;
+import ptolemy.kernel.util.IllegalActionException;
+import ptolemy.kernel.util.NameDuplicationException;
+
+/**
+ * ControlCharForReorientationv2_0
+ * 
+ * @author svensson
+ * @date March 25, 2011
+ * @project org.edna.passerelle.actors
+ **/
+public class ControlCharAtNewOrientationv2_0 extends AbstractEdnaPlugin {
+
+	private static final long serialVersionUID = -2653031224929933394L;
+
+	private final static Logger logger = LoggerFactory.getLogger(ControlCharAtNewOrientationv2_0.class);
+
+	public ControlCharAtNewOrientationv2_0(CompositeEntity container, String name)
+			throws NameDuplicationException, IllegalActionException {
+		super("EDPluginControlCharAtNewOrientationv2_0", container, name);
+
+	}
+	
+	@Override
+	protected String getInputTagName() {
+		return "XSDataInputCharacterisationv2_0";
+	}
+
+	@Override
+	protected String getSchemaLocation() {
+		return "mxv2/datamodel/XSDataMXv2.xsd";
+	}
+
+	@Override
+	protected String getPythonLocation() {
+		return "mxv2/plugins/EDPluginControlCharAtNewOrientation-v2.0/plugins/EDPluginControlCharAtNewOrientationv2_0.py";
+	}
+
+	@Override
+	protected String getExampleOutputLocation() {
+		return "mxv2/plugins/EDPluginControlCharAtNewOrientation-v2.0/tests/data/ControlCharForReorientationv2_0_dataOutput_betterResolution.xml";
+	}
+
+	@Override
+	public String getExtendedInfo() {
+		return "MXv2 Char At New Orientation";
+	}
+
+	@Override
+	public String getDefaultInputXML() {
+
+		final StringBuilder buf = new StringBuilder();
+
+		buf.append("<?xml version=\"1.0\" ?>\n");
+		buf.append("<XSDataInputCharacterisationv2_0>\n");
+		buf.append("  ${mxv1InputCharacterisation}\n");
+		buf.append("  ${mxv2DataCollection}\n");
+		buf.append("</XSDataInputCharacterisationv2_0>\n");
+		return buf.toString();
+	}
+
+	@Override
+	public Properties getDefaultOutputProperties() {
+		final Properties props = new Properties();
+		props.put("suggestedStrategy", "//suggestedStrategy");
+		props.put("possibleOrientations", "//possibleOrientations");
+		return props;
+	}
+
+}
Index: src/org/dawb/passerelle/actors/edna/ControlStrategyv1_2.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ControlStrategyv1_2.java	(revision 0)
+++ src/org/dawb/passerelle/actors/edna/ControlStrategyv1_2.java	(revision 0)
@@ -0,0 +1,111 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.edna;
+
+import java.util.Properties;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import ptolemy.kernel.CompositeEntity;
+import ptolemy.kernel.util.IllegalActionException;
+import ptolemy.kernel.util.NameDuplicationException;
+
+/**
+ * EdnaPluginTransformer, copied from delay action.
+ * 
+ * @author svensson
+ * @date Feb 15, 2011
+ * @project org.edna.passerelle.actors
+ **/
+public class ControlStrategyv1_2 extends AbstractEdnaPlugin {
+
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = 7823020490489403315L;
+
+	private final static Logger logger = LoggerFactory.getLogger(ControlStrategyv1_2.class);
+
+	/**
+	 * 
+	 */
+
+	public ControlStrategyv1_2(CompositeEntity container, String name)
+			throws NameDuplicationException, IllegalActionException {
+		super("EDPluginControlStrategyv1_2", container, name);
+
+	}
+	
+	@Override
+	protected String getInputTagName() {
+		return "XSDataInputStrategy";
+	}
+
+
+	@Override
+	protected String getSchemaLocation() {
+		return "/mxv1/datamodel/XSDataMXv1.xsd";
+	}
+
+	@Override
+	protected String getPythonLocation() {
+		return "mxv1/plugins/EDPluginControlStrategy-v1.2/plugins/EDPluginControlStrategyv1_2.py";
+	}
+
+	@Override
+	protected String getExampleOutputLocation() {
+		return "mxv1/plugins/EDPluginControlStrategy-v1.2/tests/data/XSDataInputStrategy_reference.xml";
+	}
+
+	@Override
+	public String getExtendedInfo() {
+		return "MXv1 Strategy Calculation";
+	}
+
+	@Override
+	public String getDefaultInputXML() {
+
+		final StringBuilder buf = new StringBuilder();
+
+		buf.append("<?xml version=\"1.0\" ?>\n");
+		buf.append("<XSDataInputStrategy>\n");
+		buf.append("  <bestFileContentPar>\n");		
+		buf.append("    ${bestfilePar_content}\n");
+		buf.append("  </bestFileContentPar>\n");		
+		buf.append("  <bestFileContentDat>\n");		
+		buf.append("    ${bestfileDat_content}\n");
+		buf.append("  </bestFileContentDat>\n");		
+		buf.append("  <bestFileContentHKL>\n");		
+		buf.append("    ${bestfileHKL_content}\n");
+		buf.append("  </bestFileContentHKL>\n");		
+		buf.append("  <experimentalCondition>\n");		
+		buf.append("    ${experimentalConditionRefined_content}\n");
+		buf.append("  </experimentalCondition>\n");		
+		buf.append("  <diffractionPlan>\n");		
+		buf.append("    <maxExposureTimePerDataCollection>\n");		
+		buf.append("      <value>600</value>\n");		
+		buf.append("    </maxExposureTimePerDataCollection>\n");		
+		buf.append("  </diffractionPlan>\n");		
+		buf.append("  <crystalRefined>\n");		
+		buf.append("    ${crystal_content}\n");		
+		buf.append("  </crystalRefined>\n");		
+		buf.append("</XSDataInputStrategy>\n");
+		return buf.toString();
+	}
+
+	@Override
+	public Properties getDefaultOutputProperties() {
+		final Properties props = new Properties();
+		props.put("log_path", "//bestLogFile/path/value/text()");
+		return props;
+	}
+
+}
Index: src/org/dawb/passerelle/actors/edna/ReadImageHeaderPlugin.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ReadImageHeaderPlugin.java	(revision 0)
+++ src/org/dawb/passerelle/actors/edna/ReadImageHeaderPlugin.java	(revision 0)
@@ -0,0 +1,91 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.edna;
+
+
+import java.util.Properties;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import ptolemy.kernel.CompositeEntity;
+import ptolemy.kernel.util.IllegalActionException;
+import ptolemy.kernel.util.NameDuplicationException;
+
+/**
+ *   EdnaPluginTransformer, copied from delay action.
+ *
+ *   @author gerring
+ *   @date Aug 24, 2010
+ *   @project org.edna.passerelle.actors
+ **/
+public class ReadImageHeaderPlugin extends AbstractEdnaPlugin {
+
+	private final static Logger logger = LoggerFactory.getLogger(ReadImageHeaderPlugin.class);
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = -5053674282429774593L;
+	
+	
+	public ReadImageHeaderPlugin(CompositeEntity container, String name) throws NameDuplicationException, IllegalActionException {
+		super("EDPluginControlReadImageHeaderv10", container, name);
+
+	}
+	
+	@Override
+	protected String getInputTagName() {
+		return "XSDataInputReadImageHeader";
+	}
+
+	
+	protected String getSchemaLocation() {
+		return "/mxv1/datamodel/XSDataMXv1.xsd";
+	}
+	
+	@Override
+	protected String getPythonLocation() {
+		return "/mxv1/plugins/EDPluginGroupReadImageHeader-v1.0/plugins/EDPluginControlReadImageHeaderv10.py";
+	}
+	
+	@Override
+	protected String getExampleOutputLocation() {
+		return "/mxv1/plugins/EDPluginControlIndexing-v1.0/tests/data/XSDataIndexingInput_reference.xml";
+	}
+
+	@Override
+	public String getExtendedInfo() {
+		return "Read image header";
+	}
+
+	@Override
+	public String getDefaultInputXML() {
+		
+		final StringBuilder buf = new StringBuilder();
+		buf.append("<?xml version=\"1.0\"?>\n");
+		buf.append("<XSDataInputReadImageHeader>\n");
+		buf.append("  <image>\n");
+		buf.append("    <path><value>${file_path}</value></path>\n");
+		buf.append("  </image>\n");
+		buf.append("</XSDataInputReadImageHeader>\n");
+		return buf.toString();
+	}
+
+	@Override
+	public Properties getDefaultOutputProperties() {
+		final Properties props = new Properties();
+		props.put("file_dir",  "");
+		props.put("file_path", "");
+		props.put("sub_wedges", "//subWedge"); // returns all subWedge elements
+		props.put("experimental_condition", "//subWedge/experimentalCondition[1]");
+		return props;
+	}
+
+}
Index: src/org/dawb/passerelle/actors/edna/ISPyBStoreDataCollectionv1_3.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ISPyBStoreDataCollectionv1_3.java	(revision 0)
+++ src/org/dawb/passerelle/actors/edna/ISPyBStoreDataCollectionv1_3.java	(revision 0)
@@ -0,0 +1,89 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.edna;
+
+import java.util.Properties;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import ptolemy.kernel.CompositeEntity;
+import ptolemy.kernel.util.IllegalActionException;
+import ptolemy.kernel.util.NameDuplicationException;
+
+/**
+ * ISPyBStoreDataCollectionv1_3
+ * 
+ * @author svensson
+ * @date October 6, 2011
+ * @project org.dawb.passerelle.actors
+ **/
+public class ISPyBStoreDataCollectionv1_3 extends AbstractEdnaPlugin {
+
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = -2056933313200018801L;
+	/**
+	 * 
+	 */
+	
+
+	public ISPyBStoreDataCollectionv1_3(CompositeEntity container, String name)
+			throws NameDuplicationException, IllegalActionException {
+		super("EDPluginISPyBStoreDataCollectionv1_3", container, name);
+
+	}
+	
+	@Override
+	protected String getInputTagName() {
+		return "XSDataInputStoreDataCollection";
+	}
+
+	@Override
+	protected String getSchemaLocation() {
+		return "mxPluginExec/plugins/EDPluginGroupISPyB-v1.3/datamodel/XSDataISPyBv1_3.edml";
+	}
+
+	@Override
+	protected String getPythonLocation() {
+		return "mxPluginExec/plugins/EDPluginGroupISPyB-v1.3/plugins/EDPluginISPyBStoreDataCollectionv1_3.py";
+	}
+
+	@Override
+	protected String getExampleOutputLocation() {
+		return "XSDataResultStoreDataCollection_reference.xml";
+	}
+
+	@Override
+	public String getExtendedInfo() {
+		return "ISPyB Store Data Collection";
+	}
+
+	@Override
+	public String getDefaultInputXML() {
+
+		final StringBuilder buf = new StringBuilder();
+
+		buf.append("<?xml version=\"1.0\" ?>\n");
+		buf.append("<XSDataInputStoreDataCollection>\n");
+		buf.append("${ispybDataCollection}\n");
+		buf.append("</XSDataInputStoreDataCollection>\n");
+		return buf.toString();
+	}
+
+	@Override
+	public Properties getDefaultOutputProperties() {
+		final Properties props = new Properties();
+		props.put("dataCollectionId", "//dataCollectionId/value/text()");
+	return props;
+	}
+
+}
Index: src/org/dawb/passerelle/actors/edna/ImageIndexingPlugin.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ImageIndexingPlugin.java	(revision 0)
+++ src/org/dawb/passerelle/actors/edna/ImageIndexingPlugin.java	(revision 0)
@@ -0,0 +1,89 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.edna;
+
+
+import java.util.Properties;
+
+import ptolemy.kernel.CompositeEntity;
+import ptolemy.kernel.util.IllegalActionException;
+import ptolemy.kernel.util.NameDuplicationException;
+
+/**
+ *   EdnaPluginTransformer, copied from delay action.
+ *
+ *   @author gerring
+ *   @date Aug 24, 2010
+ *   @project org.edna.passerelle.actors
+ **/
+public class ImageIndexingPlugin extends AbstractEdnaPlugin {
+	
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = -8681186522590444596L;
+
+	public ImageIndexingPlugin(CompositeEntity container, String name) throws NameDuplicationException, IllegalActionException {
+		super("EDPluginControlIndexingv10", container, name);
+
+	}
+	
+	@Override
+	protected String getInputTagName() {
+		return "XSDataInputIndexing";
+	}
+
+	
+	protected String getSchemaLocation() {
+		return "/mxv1/datamodel/XSDataMXv1.xsd";
+	}
+	
+	@Override
+	protected String getPythonLocation() {
+		return "/mxv1/plugins/EDPluginControlIndexing-v1.0/plugins/EDPluginControlIndexingv10.py";
+	}
+
+	@Override
+	protected String getExampleOutputLocation() {
+		return "/mxv1/plugins/EDPluginControlIndexing-v1.0/tests/data/XSDataIndexingResult_reference.xml";
+	}
+
+	@Override
+	public String getExtendedInfo() {
+		return "Image indexing";
+	}
+
+	@Override
+	public String getDefaultInputXML() {
+		
+		final StringBuilder buf = new StringBuilder();
+		
+		buf.append("<?xml version=\"1.0\" ?>\n");
+		buf.append("<XSDataIndexingInput>\n");
+		buf.append("    <dataCollection>\n");
+		buf.append("      ${sub_wedges}\n");
+		buf.append("    </dataCollection>\n");
+		buf.append("    ${experimental_condition}\n");
+		buf.append("</XSDataIndexingInput>\n");
+		
+		return buf.toString();
+	}
+
+	@Override
+	public Properties getDefaultOutputProperties() {
+		final Properties props = new Properties();
+		props.put("file_dir",  "");
+		props.put("file_path", "");
+		props.put("image_paths", "//predictionResult/predictionImage/path/value/text()");
+		return props;
+	}
+
+
+}
Index: src/org/dawb/passerelle/actors/edna/ControlInterfacev2_2.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ControlInterfacev2_2.java	(revision 0)
+++ src/org/dawb/passerelle/actors/edna/ControlInterfacev2_2.java	(revision 0)
@@ -0,0 +1,119 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.edna;
+
+import java.util.Properties;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import ptolemy.kernel.CompositeEntity;
+import ptolemy.kernel.util.IllegalActionException;
+import ptolemy.kernel.util.NameDuplicationException;
+
+/**
+ * ControlInterfacev2_2
+ * 
+ * @author svensson
+ * @date June 27, 2011
+ * @project org.dawb.passerelle.actors
+ **/
+public class ControlInterfacev2_2 extends AbstractEdnaPlugin {
+
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = 5459580374931695905L;
+	
+	private final static Logger logger = LoggerFactory.getLogger(ControlInterfacev2_2.class);
+
+	public ControlInterfacev2_2(CompositeEntity container, String name)
+			throws NameDuplicationException, IllegalActionException {
+		super("EDPluginControlInterfacev2_2", container, name);
+
+	}
+	
+	@Override
+	protected String getInputTagName() {
+		return "XSDataInputInterfacev2_2";
+	}
+
+	@Override
+	protected String getSchemaLocation() {
+		return "mxv2/plugins/EDPluginGroupInterface-v2.2/datamodel/XSDataInterfacev2_2.edml";
+	}
+
+	@Override
+	protected String getPythonLocation() {
+		return "mxv2/plugins/EDPluginGroupInterface-v2.2/plugins/EDPluginControlInterfacev2_2.py";
+	}
+
+	@Override
+	protected String getExampleOutputLocation() {
+		return "mxv2/plugins/EDPluginGroupInterface-v2.2/tests/data/XSDataResultInterfacev2_2_kappaCELL.xml";
+	}
+
+	@Override
+	public String getExtendedInfo() {
+		return "MXv2 Interface v2.2";
+	}
+
+	@Override
+	public String getDefaultInputXML() {
+
+		final StringBuilder buf = new StringBuilder();
+
+		buf.append("<?xml version=\"1.0\" ?>\n");
+		buf.append("<XSDataInputInterfacev2_2>\n");
+		buf.append("  <diffractionPlan>\n");
+		buf.append("    <kappaStrategyOption>\n");
+		buf.append("      <value>${kappaStrOpt}</value>\n");
+		buf.append("    </kappaStrategyOption>\n");
+		buf.append("  </diffractionPlan>\n");
+		buf.append("  <imagePath>\n");
+		buf.append("    <path>\n");
+		buf.append("      <value>${directory}/RAW_DATA/${prefix}_${run_number}_0001.${suffix}</value>\n");
+		buf.append("    </path>\n");
+		buf.append("  </imagePath>\n");
+		buf.append("  <imagePath>\n");
+		buf.append("    <path>\n");
+		buf.append("      <value>${directory}/RAW_DATA/${prefix}_${run_number}_0002.${suffix}</value>\n");
+		buf.append("    </path>\n");
+		buf.append("  </imagePath>\n");
+		buf.append("  <omega>\n");
+		buf.append("    <value>${phi}</value>\n");
+		buf.append("  </omega>\n");
+		buf.append("  <kappa>\n");
+		buf.append("    <value>${kap1}</value>\n");
+		buf.append("  </kappa>\n");
+		buf.append("  <phi>\n");
+		buf.append("    <value>${kap2}</value>\n");
+		buf.append("  </phi>\n");
+		buf.append("</XSDataInputInterfacev2_2>\n");
+		return buf.toString();
+	}
+
+	@Override
+	public Properties getDefaultOutputProperties() {
+		final Properties props = new Properties();
+		props.put("suggestedStrategyComment", "//suggestedStrategy/collectionPlan/comment/value/text()");
+		props.put("suggestedStrategy", "//suggestedStrategy");
+		props.put("mxv1ResultCharacterisation", "//mxv1ResultCharacterisation");
+		props.put("mxv1ResultCharacterisation_Reference", "//mxv1ResultCharacterisation_Reference");
+		props.put("predictionImagePath", "//mxv1ResultCharacterisation/indexingResult/predictionResult/predictionImage/path/value/text()");
+		props.put("possibleOrientations", "//possibleOrientations");
+		props.put("mxv1ShortSummary", "//mxv1ResultCharacterisation/shortSummary");
+		props.put("mxv1StrategyResult", "//mxv1ResultCharacterisation/strategyResult");
+		props.put("mxv2DataCollection", "//mxv2DataCollection");
+		props.put("mxv2DataCollection_Reference", "//mxv2DataCollection_Reference");
+	return props;
+	}
+
+}
Index: src/org/dawb/passerelle/actors/edna/PeakSearchv1_0.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/PeakSearchv1_0.java	(revision 0)
+++ src/org/dawb/passerelle/actors/edna/PeakSearchv1_0.java	(revision 0)
@@ -0,0 +1,91 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.edna;
+
+import java.util.Properties;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import ptolemy.kernel.CompositeEntity;
+import ptolemy.kernel.util.IllegalActionException;
+import ptolemy.kernel.util.NameDuplicationException;
+
+/**
+ * ControlCharForReorientationv2_0
+ * 
+ * @author svensson
+ * @date April 6, 2011
+ * @project org.edna.passerelle.actors
+ **/
+public class PeakSearchv1_0 extends AbstractEdnaPlugin {
+
+
+	private static final long serialVersionUID = -2229884393788676874L;
+
+	private final static Logger logger = LoggerFactory.getLogger(PeakSearchv1_0.class);
+
+	public PeakSearchv1_0(CompositeEntity container, String name)
+			throws NameDuplicationException, IllegalActionException {
+		super("EDPluginExecPeakSearchv1_0", container, name);
+
+	}
+	
+	@Override
+	protected String getInputTagName() {
+		return "XSDataInputPeakSearch";
+	}
+
+	@Override
+	protected String getSchemaLocation() {
+		return "sandbox/id11/EDPluginExecPeakSearch-v1.0/datamodel/XSDataPeakSearchv1_0.xsd";
+	}
+
+	@Override
+	protected String getPythonLocation() {
+		return "sandbox/id11/EDPluginExecPeakSearch-v1.0/plugins/EDPluginExecPeakSearchv1_0.py";
+	}
+
+	@Override
+	protected String getExampleOutputLocation() {
+		return "sandbox/id11/EDPluginExecPeakSearch-v1.0/tests/data/XSDataResultPeakSearch_reference.xml";
+	}
+
+	@Override
+	public String getExtendedInfo() {
+		return "Fable Peak Search";
+	}
+
+	@Override
+	public String getDefaultInputXML() {
+
+		final StringBuilder buf = new StringBuilder();
+
+		buf.append("<?xml version=\"1.0\" ?>\n");
+		buf.append("<XSDataInputPeakSearch>\n");
+		buf.append("  <stem><value>${file_dir}/ref-testscale_1_</value></stem>\n");
+		buf.append("  <indexMin><value>1</value></indexMin>\n");
+		buf.append("  <indexMax><value>1</value></indexMax>\n");
+		buf.append("  <threshold><value>5</value></threshold>\n");
+		buf.append("  <numberOfDigits><value>3</value></numberOfDigits>\n");
+		buf.append("  <imageFormat><value>.img</value></imageFormat>\n");
+		buf.append("</XSDataInputPeakSearch>\n");
+		return buf.toString();
+	}
+
+	@Override
+	public Properties getDefaultOutputProperties() {
+		final Properties props = new Properties();
+		props.put("peakFile2D", "//peakFile2D/path/value/text()");
+		props.put("peakFile3D", "//peakFile3D/path/value/text()");
+		return props;
+	}
+
+}
Index: src/org/dawb/passerelle/actors/edna/ThumbnailImagePlugin.java
===================================================================
--- src/org/dawb/passerelle/actors/edna/ThumbnailImagePlugin.java	(revision 0)
+++ src/org/dawb/passerelle/actors/edna/ThumbnailImagePlugin.java	(revision 0)
@@ -0,0 +1,129 @@
+/*
+ * Copyright (c) 2012 European Synchrotron Radiation Facility,
+ *                    Diamond Light Source Ltd.
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */ 
+package org.dawb.passerelle.actors.edna;
+
+import java.util.Map;
+import java.util.Properties;
+
+import org.dawb.common.util.io.FileUtils;
+import org.dawb.passerelle.common.message.IVariable;
+import org.dawb.passerelle.common.message.Variable;
+
+import ptolemy.kernel.CompositeEntity;
+import ptolemy.kernel.util.IllegalActionException;
+import ptolemy.kernel.util.NameDuplicationException;
+
+/**
+ *   EdnaPluginTransformer, copied from delay action.
+ *
+ *   @author gerring
+ *   @date Aug 24, 2010
+ *   @project org.edna.passerelle.actors
+ **/
+public class ThumbnailImagePlugin extends AbstractEdnaPlugin {
+
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = -5053674282429774593L;
+	
+	
+	public ThumbnailImagePlugin(CompositeEntity container, String name) throws NameDuplicationException, IllegalActionException {
+		super("EDPluginExecThumbnailv10", container, name);
+
+	}
+	
+	@Override
+	protected String getInputTagName() {
+		return "XSDataInputExecThumbnail";
+	}
+
+	@Override
+	protected String getSchemaLocation() {
+		return "/execPlugins/plugins/EDPluginExecThumbnail-v1.0/datamodel/XSDataExecThumbnail.xsd";
+	}
+	
+	@Override
+	protected String getPythonLocation() {
+		return "/execPlugins/plugins/EDPluginExecThumbnail-v1.0/plugins/EDPluginExecThumbnailv10.py";
+	}
+
+	@Override
+	protected String getExampleOutputLocation() {
+		return "/execPlugins/plugins/EDPluginExecThumbnail-v1.0/tests/data/XSDataResultThumbnail_reference.xml";
+	}
+
+	@Override
+	public String getExtendedInfo() {
+		return "Create thumbnail image";
+	}
+	@Override
+	public String getDefaultInputXML() {
+		
+		// TODO Actually use template and then generate substituted XML here.
+		final StringBuilder buf = new StringBuilder();
+		buf.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
+		buf.append("<XSDataInputThumbnail>\n");
+		buf.append("  <inputImagePath>\n");
+		buf.append("    <path><value>${file_path}</value></path>\n");
+		buf.append("  </inputImagePath>\n");
+		buf.append("  <outputPath>\n");
+		buf.append("    <path><value>${file_dir}</value></path>\n");
+		buf.append("  </outputPath>\n");
+		buf.append("  <levelsInvert><value>1</value></levelsInvert>");
+	    buf.append("  <levelsGamma><value>0.8</value></levelsGamma>");
+		buf.append("  <thumbHeight><value>512</value></thumbHeight>");
+		buf.append("  <levelsMax><value>1000</value></levelsMax>");
+		buf.append("</XSDataInputThumbnail>\n");
+
+		return buf.toString();
+	}
+
+	@Override
+	public Properties getDefaultOutputProperties() {
+		final Properties props = new Properties();
+		props.put("file_dir",  "");
+		props.put("file_path", "");
+		props.put("file_name", "");
+		props.put("thumbnail_output", "/");
+		return props;
+	}
+
+	
+	@Override
+	protected void transformOutputValues(Map<String, String> outputs) {
+		
+        if (outputs.get("file_path")!=null) {
+        	outputs.put("file_path", FileUtils.setExtension(outputs.get("file_path"), "jpg"));
+        }
+        if (outputs.get("file_name")!=null) {
+        	outputs.put("file_name", FileUtils.setExtension(outputs.get("file_name"), "jpg"));
+        }
+	}
+	
+	
+	/**
+	 * Can be used to manipulate the output variable values after they
+	 * have been evaluated. Bu default does nothing.
+	 * 
+	 * @param outputs
+	 */
+	protected void transformExampleValue(IVariable var) {
+		
+		super.transformExampleValue(var);
+		if (!(var instanceof Variable)) return;
+		if ("file_path".equals(var.getVariableName()) || "file_name".equals(var.getVariableName())) {
+			final Variable v = (Variable)var;
+			final String val = FileUtils.setExtension(v.getExampleValue().toString(), "jpg");
+			v.setExampleValue(val);
+		}
+	}
+
+}
Index: fragment.xml
===================================================================
--- fragment.xml	(revision 1481)
+++ fragment.xml	(working copy)
@@ -92,5 +92,18 @@
             name="ISPyB Store Data Collection">
       </actor>
    </extension>
+   <extension
+         point="org.eclipse.ui.cheatsheets.cheatSheetContent">
+      <cheatsheet
+            category="org.dawb.passerelle.actors.cheat.sheet.category"
+            composite="true"
+            contentFile="cheat/workflow-edna-menu.xml"
+            id="org.dawb.passerelle.actors.edna.cheatsheet1485702126"
+            name="Workflows with EDNA actors">
+         <description>
+            EDNA workflows
+         </description>
+      </cheatsheet>
+   </extension>
 
 </fragment>
